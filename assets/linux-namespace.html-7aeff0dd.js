import{_ as e,W as a,X as n,Y as r}from"./framework-c08a2544.js";const i="/assets/image-20220819092737036-540d1817.png",t={},c=r('<h1 id="linux-namespace" tabindex="-1"><a class="header-anchor" href="#linux-namespace" aria-hidden="true">#</a> linux-namespace</h1><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>namespace 主要特性就是资源隔离</p><p>docker run -it ubuntu:18.04 /bin/bash</p><p>一般使用 docker 会新增上面的五种做到资源隔离 uts，ips，pid，network，mount</p><h3 id="docker-网络模式" tabindex="-1"><a class="header-anchor" href="#docker-网络模式" aria-hidden="true">#</a> docker 网络模式</h3><p>docker run 创建 Docker 容器时，可以用--net 指定网络模式，有四种</p><p>docker run -it ubuntu:18.04 /bin/bash --net=...</p><h4 id="host-模式" tabindex="-1"><a class="header-anchor" href="#host-模式" aria-hidden="true">#</a> host 模式</h4><p>--net=host 和宿主机共用一个 network namespace</p><h4 id="none-模式" tabindex="-1"><a class="header-anchor" href="#none-模式" aria-hidden="true">#</a> none 模式</h4><p>关闭网络功能</p><h4 id="bridge-模式-默认模式" tabindex="-1"><a class="header-anchor" href="#bridge-模式-默认模式" aria-hidden="true">#</a> bridge 模式（默认模式）</h4><p>容器使用独立 network namespace，并且连接到 docker0 虚拟网桥，通过 iptables nat 表配置和宿主机进行通信</p><h4 id="container-模式" tabindex="-1"><a class="header-anchor" href="#container-模式" aria-hidden="true">#</a> container 模式</h4><p>指定新创建的容器和已经存在的一个容器共享他的 network namespace</p>',16),d=[c];function o(s,h){return a(),n("div",null,d)}const u=e(t,[["render",o],["__file","linux-namespace.html.vue"]]);export{u as default};

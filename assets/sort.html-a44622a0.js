const e=JSON.parse('{"key":"v-1052a15d","path":"/source-code/go-standard-lib/sort.html","title":"sort interface","lang":"zh-CN","frontmatter":{"description":"sort interface 定义了 type Interface interface { \\t// Len is the number of elements in the collection. \\tLen() int \\t// Less reports whether the element with index i \\t// must sort before the element with index j. \\t// \\t// If both Less(i, j) and Less(j, i) are false, \\t// then the elements at index i and j are considered equal. \\t// Sort may place equal elements in any order in the final result, \\t// while Stable preserves the original input order of equal elements. \\t// \\t// Less must describe a transitive ordering: \\t// - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well. \\t// - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well. \\t// \\t// Note that floating-point comparison (the &lt; operator on float32 or float64 values) \\t// is not a transitive ordering when not-a-number (NaN) values are involved. \\t// See Float64Slice.Less for a correct implementation for floating-point values. \\tLess(i, j int) bool \\t// Swap swaps the elements with indexes i and j. \\tSwap(i, j int) }","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/source-code/go-standard-lib/sort.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"sort interface"}],["meta",{"property":"og:description","content":"sort interface 定义了 type Interface interface { \\t// Len is the number of elements in the collection. \\tLen() int \\t// Less reports whether the element with index i \\t// must sort before the element with index j. \\t// \\t// If both Less(i, j) and Less(j, i) are false, \\t// then the elements at index i and j are considered equal. \\t// Sort may place equal elements in any order in the final result, \\t// while Stable preserves the original input order of equal elements. \\t// \\t// Less must describe a transitive ordering: \\t// - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well. \\t// - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well. \\t// \\t// Note that floating-point comparison (the &lt; operator on float32 or float64 values) \\t// is not a transitive ordering when not-a-number (NaN) values are involved. \\t// See Float64Slice.Less for a correct implementation for floating-point values. \\tLess(i, j int) bool \\t// Swap swaps the elements with indexes i and j. \\tSwap(i, j int) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:author","content":"rz"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sort interface\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"rz\\",\\"url\\":\\"https://github.com/xyz3282836/monodoc\\"}]}"]]},"headers":[],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":0.65,"words":196},"filePathRelative":"source-code/go-standard-lib/sort.md","localizedDate":"2023年3月11日","excerpt":"<h1> sort interface</h1>\\n<p>定义了</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> Interface <span class=\\"token keyword\\">interface</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// Len is the number of elements in the collection.</span>\\n\\t<span class=\\"token function\\">Len</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">int</span>\\n\\n\\t<span class=\\"token comment\\">// Less reports whether the element with index i</span>\\n\\t<span class=\\"token comment\\">// must sort before the element with index j.</span>\\n\\t<span class=\\"token comment\\">//</span>\\n\\t<span class=\\"token comment\\">// If both Less(i, j) and Less(j, i) are false,</span>\\n\\t<span class=\\"token comment\\">// then the elements at index i and j are considered equal.</span>\\n\\t<span class=\\"token comment\\">// Sort may place equal elements in any order in the final result,</span>\\n\\t<span class=\\"token comment\\">// while Stable preserves the original input order of equal elements.</span>\\n\\t<span class=\\"token comment\\">//</span>\\n\\t<span class=\\"token comment\\">// Less must describe a transitive ordering:</span>\\n\\t<span class=\\"token comment\\">//  - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span>\\n\\t<span class=\\"token comment\\">//  - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span>\\n\\t<span class=\\"token comment\\">//</span>\\n\\t<span class=\\"token comment\\">// Note that floating-point comparison (the &lt; operator on float32 or float64 values)</span>\\n\\t<span class=\\"token comment\\">// is not a transitive ordering when not-a-number (NaN) values are involved.</span>\\n\\t<span class=\\"token comment\\">// See Float64Slice.Less for a correct implementation for floating-point values.</span>\\n\\t<span class=\\"token function\\">Less</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">,</span> j <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">bool</span>\\n\\n\\t<span class=\\"token comment\\">// Swap swaps the elements with indexes i and j.</span>\\n\\t<span class=\\"token function\\">Swap</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">,</span> j <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};

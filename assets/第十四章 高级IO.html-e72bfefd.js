import{_ as s,W as n,X as a,Y as e}from"./framework-c08a2544.js";const t={},p=e(`<h1 id="第十四章-高级-io" tabindex="-1"><a class="header-anchor" href="#第十四章-高级-io" aria-hidden="true">#</a> 第十四章 高级 IO</h1><h2 id="非阻塞-io" tabindex="-1"><a class="header-anchor" href="#非阻塞-io" aria-hidden="true">#</a> 非阻塞 IO</h2><p>fd 是阻塞还是非阻塞是可以设置的，这也直接影响系统调用函数是否阻塞还是非阻塞（直接返回错误）</p><p>对于一个给定的 fd，有两种方法可以指定为非阻塞 IO</p><ol><li>open 的时候指定 O_NOBLOCK</li><li>已经 open 的 fd，使用 fcntl 函数设置 O_NOBLOCK</li></ol><h2 id="记录锁" tabindex="-1"><a class="header-anchor" href="#记录锁" aria-hidden="true">#</a> 记录锁</h2><h3 id="fcntl-记录锁" tabindex="-1"><a class="header-anchor" href="#fcntl-记录锁" aria-hidden="true">#</a> fcntl 记录锁</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">fcntl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> cmd<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">/* struct flock *flockptr */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>任意多个进程在一个给定的字节上可以有一把共享的读锁，但是在一个给定字节上只能有一个进程有一把独占写锁</p><p>单进程加写锁，后面的锁范围会覆盖前面</p><p>F_SETLK 和 F_SETLKW 命令总是替换调用进程现有的锁（若已存在），所以调用进程决不会阻塞在自己持有的锁上，于是，F_GETLK 命令决不会报告调用进程自己持有的锁</p><h3 id="锁的隐含继承和释放" tabindex="-1"><a class="header-anchor" href="#锁的隐含继承和释放" aria-hidden="true">#</a> 锁的隐含继承和释放</h3><ol><li>锁与进程和文件两者相关联。这有两重含义：第一重很明显，当一个进程终止时，它所建立的锁全部释放；无论一个描述符何时关闭，该进程通过这一描述符引用的文件上的任何一把锁都会释放（这些锁都是该进程设置的）dup，close</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://blog.csdn.net/lqt641/article/details/54605920#使用-dup-复制文件描述符
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>由 fork 产生的子进程不继承父进程所设置的锁。这意味着，若一个进程得到一把锁， 然后调用 fork，那么对于父进程获得的锁而言，子进程被视为另一个进程。对于通过 fork 从父进程处继承过来的描述符，子进程需要调用 fcntl 才能获得它自己的锁</li><li>在执行 exec 后，新程序可以继承原执行程序的锁。但是注意，如果对一个文件描述符设置 了执行时关闭标志，那么当作为 exec 的一部分关闭该文件描述符时，将释放相应文件的所有锁</li></ol><h3 id="freebsd-实现" tabindex="-1"><a class="header-anchor" href="#freebsd-实现" aria-hidden="true">#</a> FreeBSD 实现</h3><p>前面已经给出了 open、fork 以及 dup 调用后的数据结构（见图 3-9 和图 8-2）</p><p>在原来的这些图上新加了 lockf 结构</p><h3 id="建议性锁和强制性锁" tabindex="-1"><a class="header-anchor" href="#建议性锁和强制性锁" aria-hidden="true">#</a> 建议性锁和强制性锁</h3><p>建议性锁：就是内核不去维护这个锁，程序员自己要遵守这个原则</p><p>强制性锁会让内核检查每一个 open、read 和 write，验证调用进程是否违背了正在访问 的文件上的某一把锁。强制性锁有时也称为强迫方式锁</p><h2 id="i-o-多路转接" tabindex="-1"><a class="header-anchor" href="#i-o-多路转接" aria-hidden="true">#</a> I/O 多路转接</h2><p>从一个 fd 读，然后写到另一个 fd，不去设置 O_NOBLOCK，就会是阻塞 IO，很常见</p><h4 id="但是如果必须从两个-fd-去读-那么任意一个-fd-被阻塞-另外一个-fd-就无法处理数据了" tabindex="-1"><a class="header-anchor" href="#但是如果必须从两个-fd-去读-那么任意一个-fd-被阻塞-另外一个-fd-就无法处理数据了" aria-hidden="true">#</a> 但是如果必须从两个 fd 去读，那么任意一个 fd 被阻塞，另外一个 fd 就无法处理数据了</h4><p>telnet 命令结构：从终端读（std-in)，将数据写到网络连接上，同时从网络连接读，将所得数据写到终端上(std-out)，在网络另一端，telnetd 守护进程读用户的命令，发送给 shell，将 shell 执行的结果通过 telnet 命令发送给用户，并显示在终端上，如同登入了远程机器了</p><p>telnet 进程有两个输入，两个输出，<strong>也就是两个 fd 要去读</strong></p><p>终端用户写给 telnet，网络连接返回给 telnet；telnet 输出给网络连接，telnet 输出到终端给用户</p><ol><li>所以不能对两个输入中任意一个使用阻塞 read，所以处理方式是使用**两个进程（fork）**来处理：telnet 父进程读用户输入的，telnet 子进程读网络连接返回的，那么就可以使用阻塞读了，但是还有问题的，子进程由于网络断了，导致子进程终止，然后父进程接受到了子进程结束的信号 SIGCHLD，这 ok，但是如果父进程由于终端输入了文件结束符而终止，那么应该通知子进程停止，但是这需要引入另一个信号，更加复杂。</li><li>如果使用<strong>两个线程来处理</strong>，也会很复杂。</li><li>如果仍旧一个进程处理，使用<strong>非阻塞 IO</strong>来处理，基本思想就是<strong>轮询</strong>，但是浪费 cpu</li></ol><p>Ps: 将两个输入描述符都设置为非阻塞的，对第一个描述符发一个 read。如果该输入上有数据，则 读数据并处理它。如果无数据可读，则该调用立即返回。然后对第二个描述符作同样的处理。在 此之后，等待一定的时间（可能是若干秒），然后再尝试从第一个描述符读。这种形式的循环称 为<strong>轮询</strong> 这种方法的不足之处是浪费 CPU 时间。大多数时间实际上是无数据可读，因此执行 read 系统调用浪费了时间 在每次循环后要等多长时间再执行下一轮循环也很难确定 虽然轮询技术 在支持非阻塞 I/O 的所有系统上都可使用，但是在多任务系统中应当避免使用这种方法</p><ol start="4"><li>使用<strong>异步 IO</strong>，基本思想就是，当 fd 可以进程 IO 了，用信号通知内核，不是直接系统调用 read，但是也会有问题一：移植性问题；问题二：两个 fd 发给内核的信号必须区分，导致如果 fd 不止两个，那<strong>有限数量的信号无法满足</strong>啊，而且为了确定 fd 是否准备好了，任然要将两个 fd 设置为非阻塞，并且顺序尝试执行 IO</li><li>使用 IO 多路转接，先构造一张 fd 列表，然后调用一个函数直到 fd 中的一个准备好了才返回告知进程哪些 fd 准备好了，和 4 比没有发信号，函数阻塞（有超时设置）直到一个 fd 准备好了 IO，poll，pselect，select 都是这种函数</li></ol><h2 id="select-和-pselect" tabindex="-1"><a class="header-anchor" href="#select-和-pselect" aria-hidden="true">#</a> select 和 pselect</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxfdpl<span class="token punctuation">,</span>fd_set <span class="token operator">*</span>restrict readfds<span class="token punctuation">,</span>fd_set <span class="token operator">*</span>restrict writefds<span class="token punctuation">,</span>fd_set <span class="token operator">*</span>restrict exceptfds<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>restrict tvptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>tvptr 就是等待的时间</p><p>readfds</p><p>fd0 fd1 fd2 0 0 0 ...</p><p>writefds</p><p>exceptfds</p><p>这三个可以通过下面宏来操作 fd，如果是 null，表示不关心</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>fdset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值：若 fd 在描述符集中，返回非 0 值；否则，返回 0</span>
<span class="token keyword">void</span> <span class="token function">FD_CLR</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>fdset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">FD_SET</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>fdset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">FD_ZERO</span><span class="token punctuation">(</span>fd_set <span class="token operator">*</span>fdset<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>maxfdpl：最大 fd 编号+1，在 3 个描述符集中找出最大描述符编号值，然后加 1</p><p>或者可以设置为 FD_SETSIZE，最大值，通常是 1024，但是一般程序不会使用这么多 fd，通常 3-10 个，这样内核就只需要在此范围内寻找打开的位</p><p>比如 readset 有 fd(0)，fd(3)；write 有 fd(1)，fd(2)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fd(0)             fd(3)
1     0     0     1...

      fd(1) fd(2)
0     1     1     0...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 maxfdpl:4，也就是前四个位去寻找</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/select.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pselect</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxfdp1<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>restrict readfds<span class="token punctuation">,</span>fd_set <span class="token operator">*</span>restrict writefds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>restrict exceptfds<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>restrict tsptr<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>restrict sigmask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>maxfdp1 一样</p><p>readfds，writefds，exceptfds 一样</p><p>tsptr 支持更加准确的时间，而且是 const，pselect 不能改变这个值</p><p>sigmask 为了调用函数的时候可以安装这个参数的屏蔽字，返回的时候再回复以前的屏蔽字</p><h2 id="函数-poll" tabindex="-1"><a class="header-anchor" href="#函数-poll" aria-hidden="true">#</a> 函数 poll</h2><p>类似 select，但是接口不同</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> fdarray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token class-name">nfds_t</span> nfds<span class="token punctuation">,</span><span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SVR4这样声明：struct pollfd *fdarray，和上面等效在c语言中</span>
<span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token comment">/* file descriptor to check, or &lt; 0 to ignore */</span>
    <span class="token keyword">short</span> events<span class="token punctuation">;</span><span class="token comment">/* events of interest on fd */</span>
    <span class="token keyword">short</span> revents<span class="token punctuation">;</span><span class="token comment">/* events that occurred on fd 由内核设置*/</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有这个概念了：读，写，异常的 fd 集</p><p>pollfd：fd，感兴趣的事件，已经发生的事件</p><p>nfds unsigned long</p><p>poll 没有修改 events 成员，与 select 不同，select 修改参数来指示哪个 fd 已经准备好</p><p>与 select 一样，一个描述符是否阻塞不会影响 poll 是否阻塞。有超时设置，而且就算一个 fd 阻塞在那里，只要其他 fd 准备好了，依旧可以返回</p><h2 id="异步-io" tabindex="-1"><a class="header-anchor" href="#异步-io" aria-hidden="true">#</a> 异步 IO</h2><p>select 和 poll 实现了异步通知</p><p>关于描述符的状态，系统并 不主动告诉我们任何信息，我们需要进行查询（调用 select 或 poll）</p><p>而前面提到的缺点，信号不够，否则无法区分信号对应哪一个 fd</p><p>SUSv4 中将通用的异步 I/O 机制从实时扩展部分调整到基本规范部分。这种机制解决了这些 陈旧的异步 I/O 设施存在的局限性。</p><p>POSIX 异步 IO 接口会有问题</p><h3 id="system-v-异步-io" tabindex="-1"><a class="header-anchor" href="#system-v-异步-io" aria-hidden="true">#</a> System V 异步 IO</h3><p>System V 的异步 I/O 信号是 SIGPOLL</p><h3 id="bsd-异步-io" tabindex="-1"><a class="header-anchor" href="#bsd-异步-io" aria-hidden="true">#</a> BSD 异步 IO</h3><p>异步 I/O 是信号 SIGIO 和 SIGURG 的组合</p><h3 id="posix-异步-io" tabindex="-1"><a class="header-anchor" href="#posix-异步-io" aria-hidden="true">#</a> POSIX 异步 IO</h3><p>这些异步 I/O 接口使用 AIO 控制块来描述 I/O 操作</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">aiocb</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> aio_field<span class="token punctuation">;</span><span class="token comment">//表示被打开用来读或者写的fd</span>
    <span class="token class-name">off_t</span> aio_offset<span class="token punctuation">;</span><span class="token comment">//读或写的文件偏移量，O_APPEND追加模式系统会忽略这个参数</span>
    <span class="token keyword">volatile</span> <span class="token keyword">void</span> <span class="token operator">*</span>aio_buf<span class="token punctuation">;</span><span class="token comment">//缓冲区指针</span>
    <span class="token class-name">size_t</span> aio_nbytes<span class="token punctuation">;</span><span class="token comment">//每次复制数据的大小</span>
    <span class="token keyword">int</span> aio_reqprio<span class="token punctuation">;</span><span class="token comment">//排序，但是不一定起作用</span>
    <span class="token keyword">struct</span> <span class="token class-name">sigevent</span> aio_sigevent<span class="token punctuation">;</span><span class="token comment">//完成IO事件后调用</span>
    <span class="token keyword">int</span> aio_lio_opcode<span class="token punctuation">;</span><span class="token comment">//只能用于基于列表的异步IO</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">sigevent</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> sigev_notify<span class="token punctuation">;</span><span class="token comment">//通知方式 不通知[0] 通知[1] 通知[2]</span>
    <span class="token keyword">int</span> sigev_signo<span class="token punctuation">;</span><span class="token comment">//通知[1] 如果要通知的话，指定信号；如果信号处理程序指定SA_SIGINFO，那么支持排队信号，就会传递siginfo结构，其中si_value会被设置sigev_value[1]</span>
    <span class="token keyword">union</span> sigval sigev_value<span class="token punctuation">;</span><span class="token comment">//[1] [2]</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sigev_function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">union</span> sigval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通知[2] 指定这个函数被调用，而且sigev_value作为参数被传入</span>
    <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>sigev_notify_attributes<span class="token punctuation">;</span><span class="token comment">//通知[2] 除非sigev_notify_attributes字段被设定为 pthread 属性结构的地址，且该结构指定了一个另外的线程属性，否则该函数将在分离状态下的一个单独的线程中执行</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;aio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">aio_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>aiocb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">aio_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>aiocb<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">aio_fsync</span><span class="token punctuation">(</span><span class="token keyword">int</span> op<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>aiocb<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">aio_error</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>aiocb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进行异步 I/O 之前需要先初始化 AIO 控制块，调用 aio_read 函数来进行异步读操作，或 调用 aio_write 函数来进行异步写操作</p><p>要想强制所有等待中的异步操作不等待而写入持久化的存储中，可以设立一个 AIO 控制块并 调用 aio_fsync 函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;aio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">aio_fsync</span><span class="token punctuation">(</span><span class="token keyword">int</span> op<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>aiocb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 op 参数设定为 O_DSYNC，那么操作执行起来就会像调用了 fdatasync 一样。否则，如果 op 参数设定为 O_SYNC， 那么操作执行起来就会像调用了 fsync 一样</p><p>像 aio_read 和 aio_write 函数一样，在安排了同步时，aio_fsync 操作返回。在异步 同步操作完成之前，数据不会被持久化。AIO 控制块控制我们如何被通知，就像 aio_read 和 aio_write 函数一样。为了获知一个异步读、写或者同步操作的完成状态，需要调用 aio_error 函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;aio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">aio_error</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>aiocb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回值0 异步操作成功完成。需要调用 aio_return 函数获取操作返回值。</span>
<span class="token class-name">ssize_t</span> <span class="token function">aio_return</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>aiocb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 I/O 操作时，如果还有其他事务要处理而不想被 I/O 操作阻塞，就可以使用异步 I/O。然 而，如果在完成了所有事务时，还有异步操作未完成时，可以调用 aio_suspend 函数来阻塞进 程，直到操作完成。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;aio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">aio_suspend</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span><span class="token keyword">const</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> nent<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>list 参数是一个指向 AIO 控制块数组的指针，nent 参数表明了数组中的条目数。数组中的空 指针会被跳过，其他条目都必须指向已用于初始化异步 I/O 操作的 AIO 控制块</p><p>当还有我们不想再完成的等待中的异步 I/O 操作时，可以尝试使用 aio_cancel 函数来取消它们</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;aio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">aio_cancel</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>aiocb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个函数也被包含在异步 I/O 接口当中，尽管它既能以同步的方式来使用，又能以异步的方 式来使用，这个函数就是 lio_listio。该函数提交一系列由一个 AIO 控制块列表描述的 I/O 请求</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;aio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">lio_listio</span><span class="token punctuation">(</span><span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>restrict <span class="token keyword">const</span> list<span class="token punctuation">[</span>restrict<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> nent<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigevent</span> <span class="token operator">*</span>restrict sigev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="readv-和-writev" tabindex="-1"><a class="header-anchor" href="#readv-和-writev" aria-hidden="true">#</a> readv 和 writev</h2><p>readv 和 writev 函数用于在一次函数调用中读、写多个非连续缓冲区。</p><p>散布读（scatter read）和聚集写（gather write）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h&gt;</span></span>
<span class="token class-name">sszie_t</span> <span class="token function">readv</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span><span class="token keyword">int</span> iovcnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span><span class="token keyword">int</span> iovcnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">iovec</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>iov_base<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> iov_len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>readn 和 writen</p><p>一次 read 操作所返回的数据可能少于所要求的数据，即使还没达到文件尾端也可能是 这样。这不是一个错误，应当继续读该设备</p><p>一次 write 操作的返回值也可能少于指定输出的字节数。这可能是由某个因素造成的， 例如，内核输出缓冲区变满</p><p>这两 个函数只是按需多次调用 read 和 write 直至读、写了 N 字节数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">readn</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">writen</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存储映射-io" tabindex="-1"><a class="header-anchor" href="#存储映射-io" aria-hidden="true">#</a> 存储映射 IO</h2><p>存储映射 I/O（memory-mapped I/O）能将一个磁盘文件映射到存储空间中的一个缓冲区上， 于是，当从缓冲区中取数据时，就相当于读文件中的相应字节。与此类似，将数据存入缓冲区时， 相应字节就自动写入文件</p><p>存储映射 I/O 伴随虚拟存储系统已经用了很多年</p><p>为了使用这种功能，应首先告诉内核将一个给定的文件映射到一个存储区域中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token class-name">size_t</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> prot<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">,</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token class-name">off_t</span> off<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//flag</span>
MAP_FIXED
MAP_SHARED
MAP_PRIVATE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新程序则不能通过 exec 继承存储映射区，调用 mprotect 可以更改一个现有映射的权限</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">mprotect</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> prot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果共享映射中的页已修改，那么可以调用 msync 将该页冲洗到被映射的文件中。msync 函数类似于 fsync（见 3.13 节），但作用于存储映射区</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">msync</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当进程终止时，会自动解除存储映射区的映射，或者直接调用 munmap 函数也可以解除映射区。</p><p>关闭映射存储区时使用的文件描述符 并不解除映射区</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">munmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 MAP_SHARED 区磁盘文件的更新，会在我们将数据写到存储映射区后的某个时刻， 按内核虚拟存储算法自动进行。在存储区解除映射后，对 MAP_PRIVATE 存储区的修改会被丢弃</p>`,105),c=[p];function o(i,l){return n(),a("div",null,c)}const r=s(t,[["render",o],["__file","第十四章 高级IO.html.vue"]]);export{r as default};

const l=JSON.parse('{"key":"v-cb41d22a","path":"/go/asm/plan9.html","title":"go plan9","lang":"zh-CN","frontmatter":{"description":"go plan9 基本指令 https://go.xargin.com/docs/assembly/assembly/ MOV 数据搬运，赋值 LEA 取址 &amp; TEST CMP 比较 JLS （ jump less ）小于时跳转 JMP（ jump ）无条件跳转 JEQ（ jump equal ）等于时跳转 SUB 相减，结果保存到目标操作数 ADD 相加，结果保存到目标操作数 RET 返回 NOP 空指令 CALL 调用函数 SHL（ shift logical left ） 逻辑左移指令 &lt;&lt; SHR（ shift logical right ） 逻辑右移指令 &gt;&gt;，右移时不保留操作数的符号，用 0 代替 SAL（ shift arithmetic left ）算术左移指令 SAR（ shift arithmetic right ）算术右移指令，右移时保留操作数的符号 XADD：交换并相加 NEG：求补指令，就是取相反数 XORPS：源操作数（第二个操作数）与目标操作数（第一个操作数）进行异或。结果保存到目标操作数 MOVUPS：与 MOV 一样，操作对象的类型不一样，这里是包含四个压缩单精度浮点值的双四字 XCHG: 交换两个操作数内容，自带 LOCK 总线锁属性","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/go/asm/plan9.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"go plan9"}],["meta",{"property":"og:description","content":"go plan9 基本指令 https://go.xargin.com/docs/assembly/assembly/ MOV 数据搬运，赋值 LEA 取址 &amp; TEST CMP 比较 JLS （ jump less ）小于时跳转 JMP（ jump ）无条件跳转 JEQ（ jump equal ）等于时跳转 SUB 相减，结果保存到目标操作数 ADD 相加，结果保存到目标操作数 RET 返回 NOP 空指令 CALL 调用函数 SHL（ shift logical left ） 逻辑左移指令 &lt;&lt; SHR（ shift logical right ） 逻辑右移指令 &gt;&gt;，右移时不保留操作数的符号，用 0 代替 SAL（ shift arithmetic left ）算术左移指令 SAR（ shift arithmetic right ）算术右移指令，右移时保留操作数的符号 XADD：交换并相加 NEG：求补指令，就是取相反数 XORPS：源操作数（第二个操作数）与目标操作数（第一个操作数）进行异或。结果保存到目标操作数 MOVUPS：与 MOV 一样，操作对象的类型不一样，这里是包含四个压缩单精度浮点值的双四字 XCHG: 交换两个操作数内容，自带 LOCK 总线锁属性"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.ruizhou.cf/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"go plan9"}],["meta",{"property":"article:author","content":"rz"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go plan9\\",\\"image\\":[\\"https://www.ruizhou.cf/\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"rz\\",\\"url\\":\\"https://github.com/xyz3282836/monodoc\\"}]}"]]},"headers":[{"level":2,"title":"基本指令","slug":"基本指令","link":"#基本指令","children":[{"level":3,"title":"栈调整","slug":"栈调整","link":"#栈调整","children":[]},{"level":3,"title":"数据计算","slug":"数据计算","link":"#数据计算","children":[]},{"level":3,"title":"内存操作","slug":"内存操作","link":"#内存操作","children":[]},{"level":3,"title":"条件调转","slug":"条件调转","link":"#条件调转","children":[]}]},{"level":2,"title":"寄存器","slug":"寄存器","link":"#寄存器","children":[{"level":3,"title":"通用寄存器","slug":"通用寄存器","link":"#通用寄存器","children":[]},{"level":3,"title":"伪寄存器","slug":"伪寄存器","link":"#伪寄存器","children":[]},{"level":3,"title":"变量声明","slug":"变量声明","link":"#变量声明","children":[]}]},{"level":2,"title":"函数声明","slug":"函数声明","link":"#函数声明","children":[]},{"level":2,"title":"栈结构","slug":"栈结构","link":"#栈结构","children":[{"level":3,"title":"argsize 和 framsize","slug":"argsize-和-framsize","link":"#argsize-和-framsize","children":[]},{"level":3,"title":"伪寄存器 SP 、伪寄存器 FP 和硬件寄存器 SP","slug":"伪寄存器-sp-、伪寄存器-fp-和硬件寄存器-sp","link":"#伪寄存器-sp-、伪寄存器-fp-和硬件寄存器-sp","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":3,"title":"SIMD","slug":"simd","link":"#simd","children":[]},{"level":3,"title":"demo","slug":"demo","link":"#demo","children":[]}]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":20.84,"words":6252},"filePathRelative":"go/asm/plan9.md","localizedDate":"2023年3月11日","excerpt":"<h1> go plan9</h1>\\n<h2> 基本指令</h2>\\n<p><a href=\\"https://go.xargin.com/docs/assembly/assembly/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://go.xargin.com/docs/assembly/assembly/</a></p>\\n<ul>\\n<li>MOV 数据搬运，赋值</li>\\n<li>LEA 取址 &amp;</li>\\n<li>TEST</li>\\n<li>CMP 比较</li>\\n<li>JLS （ jump less ）小于时跳转</li>\\n<li>JMP（ jump ）无条件跳转</li>\\n<li>JEQ（ jump equal ）等于时跳转</li>\\n<li>SUB 相减，结果保存到目标操作数</li>\\n<li>ADD 相加，结果保存到目标操作数</li>\\n<li>RET 返回</li>\\n<li>NOP 空指令</li>\\n<li>CALL 调用函数</li>\\n<li>SHL（ shift logical left ） 逻辑左移指令 <code>&lt;&lt;</code></li>\\n<li>SHR（ shift logical right ） 逻辑右移指令 <code>&gt;&gt;</code>，右移时不保留操作数的符号，用 0 代替</li>\\n<li>SAL（ shift arithmetic left ）算术左移指令</li>\\n<li>SAR（ shift arithmetic right ）算术右移指令，右移时保留操作数的符号</li>\\n<li>XADD：交换并相加</li>\\n<li>NEG：求补指令，就是取相反数</li>\\n<li>XORPS：源操作数（第二个操作数）与目标操作数（第一个操作数）进行异或。结果保存到目标操作数</li>\\n<li>MOVUPS：与 MOV 一样，操作对象的类型不一样，这里是包含四个压缩单精度浮点值的双四字</li>\\n<li>XCHG: 交换两个操作数内容，自带 LOCK 总线锁属性</li>\\n</ul>","autoDesc":true}');export{l as data};

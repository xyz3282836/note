import{_ as n,W as t,X as h,Y as a,Z as e,$ as d,a0 as s,C as i}from"./framework-52f8fb67.js";const o={},p=s('<h1 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h1><p>树</p><p>二叉树</p><p>真二叉树</p><p>满二叉树</p><p>完全二叉树</p><h2 id="三种特殊二叉树的区别于联系" tabindex="-1"><a class="header-anchor" href="#三种特殊二叉树的区别于联系" aria-hidden="true">#</a> 三种特殊二叉树的区别于联系</h2><p>首先看真二叉树和满二叉树，这个都要求每个分支节点都是满的，也就是每个节点都有两个叉，也就是左右孩子节点，当然，叶子节点除外，满足这个就是真二叉树，如果在此条件上再加上一个条件，所有叶子节点在同一层级，那就是满二叉树。</p><p>也就是说，除叶子节点，每个节点都有左右孩子节点，那就是真二叉树。 如果除此之外，所有叶子节点又都在一个层级，那就是满二叉树</p><p>对于完全二叉树，叶子节点只能在最后两层，且除了最后一层的叶子节点，其他节点都是满的，也就是如果倒数第二层也有叶子节点，那一定是左右孩子节点齐全的（成对出现），最后一层的叶子节点可以是不满的，但是只能是左孩子</p><h2 id="存储二叉树" tabindex="-1"><a class="header-anchor" href="#存储二叉树" aria-hidden="true">#</a> 存储二叉树</h2><p>可以用链表或者数组</p><h2 id="二叉树的应用" tabindex="-1"><a class="header-anchor" href="#二叉树的应用" aria-hidden="true">#</a> 二叉树的应用</h2><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><h3 id="维持相对顺序" tabindex="-1"><a class="header-anchor" href="#维持相对顺序" aria-hidden="true">#</a> 维持相对顺序</h3><p>二叉查找树，又叫二叉排序树</p><h2 id="二叉树的平衡" tabindex="-1"><a class="header-anchor" href="#二叉树的平衡" aria-hidden="true">#</a> 二叉树的平衡</h2><p>有多种方式，红黑树，AVL树，树堆</p><h2 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h2><p>前序、中序、后序 深度优先遍历 相对根节点而言</p><p>层序 广度优先遍历 最好理解，实际的输出顺序</p><p>前序遍历 输出顺序是：<strong>根节点，左子树，右子树</strong></p><p>中序遍历 输出顺序是：<strong>左子树，根节点，右子树</strong></p><p>后序遍历 输出顺序是：<strong>左子树，右子树，根节点</strong></p>',24),c={href:"https://juejin.im/post/5e3d78fee51d4526cf47eacb",target:"_blank",rel:"noopener noreferrer"};function l(_,f){const r=i("ExternalLinkIcon");return t(),h("div",null,[p,a("p",null,[e("作者：编码之外 链接："),a("a",c,[e("https://juejin.im/post/5e3d78fee51d4526cf47eacb"),d(r)]),e(" 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])}const x=n(o,[["render",l],["__file","二叉树.html.vue"]]);export{x as default};

const e=JSON.parse('{"key":"v-b2c63254","path":"/source-code/go-standard-lib/container.html","title":"container","lang":"zh-CN","frontmatter":{"description":"container list 双向链表 // Element is an element of a linked list. type Element struct { \\t// Next and previous pointers in the doubly-linked list of elements. \\t// To simplify the implementation, internally a list l is implemented \\t// as a ring, such that &amp;l.root is both the next element of the last \\t// list element (l.Back()) and the previous element of the first list \\t// element (l.Front()). \\tnext, prev *Element \\t// The list to which this element belongs. \\tlist *List \\t// The value stored with this element. \\tValue interface{} }","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/source-code/go-standard-lib/container.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"container"}],["meta",{"property":"og:description","content":"container list 双向链表 // Element is an element of a linked list. type Element struct { \\t// Next and previous pointers in the doubly-linked list of elements. \\t// To simplify the implementation, internally a list l is implemented \\t// as a ring, such that &amp;l.root is both the next element of the last \\t// list element (l.Back()) and the previous element of the first list \\t// element (l.Front()). \\tnext, prev *Element \\t// The list to which this element belongs. \\tlist *List \\t// The value stored with this element. \\tValue interface{} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:author","content":"rz"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"container\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"rz\\",\\"url\\":\\"https://github.com/xyz3282836/monodoc\\"}]}"]]},"headers":[{"level":2,"title":"list","slug":"list","link":"#list","children":[]},{"level":2,"title":"ring","slug":"ring","link":"#ring","children":[]},{"level":2,"title":"heap","slug":"heap","link":"#heap","children":[]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":0.58,"words":175},"filePathRelative":"source-code/go-standard-lib/container.md","localizedDate":"2023年3月11日","excerpt":"<h1> container</h1>\\n<h2> list</h2>\\n<p>双向链表</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// Element is an element of a linked list.</span>\\n<span class=\\"token keyword\\">type</span> Element <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// Next and previous pointers in the doubly-linked list of elements.</span>\\n\\t<span class=\\"token comment\\">// To simplify the implementation, internally a list l is implemented</span>\\n\\t<span class=\\"token comment\\">// as a ring, such that &amp;l.root is both the next element of the last</span>\\n\\t<span class=\\"token comment\\">// list element (l.Back()) and the previous element of the first list</span>\\n\\t<span class=\\"token comment\\">// element (l.Front()).</span>\\n\\tnext<span class=\\"token punctuation\\">,</span> prev <span class=\\"token operator\\">*</span>Element\\n\\n\\t<span class=\\"token comment\\">// The list to which this element belongs.</span>\\n\\tlist <span class=\\"token operator\\">*</span>List\\n\\n\\t<span class=\\"token comment\\">// The value stored with this element.</span>\\n\\tValue <span class=\\"token keyword\\">interface</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};

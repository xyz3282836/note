const n=JSON.parse(`{"key":"v-08db3ce7","path":"/apue/stdio.html","title":"stdio","lang":"zh-CN","frontmatter":{"description":"stdio /* * Copyright (c) 2000, 2005, 2007, 2009, 2010 Apple Inc. All rights reserved. * * @APPLE_LICENSE_HEADER_START@ * * This file contains Original Code and/or Modifications of Original Code * as defined in and that are subject to the Apple Public Source License * Version 2.0 (the 'License'). You may not use this file except in * compliance with the License. Please obtain a copy of the License at * http://www.opensource.apple.com/apsl/ and read it before using this * file. * * The Original Code and all software distributed under the License are * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES, * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. * Please see the License for the specific language governing rights and * limitations under the License. * * @APPLE_LICENSE_HEADER_END@ */ /*- * Copyright (c) 1990, 1993 *\\tThe Regents of the University of California. All rights reserved. * * This code is derived from software contributed to Berkeley by * Chris Torek. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * 1. Redistributions of source code must retain the above copyright * notice, this list of conditions and the following disclaimer. * 2. Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. * 3. All advertising materials mentioning features or use of this software * must display the following acknowledgement: *\\tThis product includes software developed by the University of *\\tCalifornia, Berkeley and its contributors. * 4. Neither the name of the University nor the names of its contributors * may be used to endorse or promote products derived from this software * without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS \`\`AS IS'' AND * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * *\\t@(#)stdio.h\\t8.5 (Berkeley) 4/29/95 */ #ifndef\\t_STDIO_H_ #define\\t_STDIO_H_ #include &lt;_stdio.h&gt; __BEGIN_DECLS extern FILE *__stdinp; extern FILE *__stdoutp; extern FILE *__stderrp; __END_DECLS #define\\t__SLBF\\t0x0001\\t\\t/* line buffered */ #define\\t__SNBF\\t0x0002\\t\\t/* unbuffered */ #define\\t__SRD\\t0x0004\\t\\t/* OK to read */ #define\\t__SWR\\t0x0008\\t\\t/* OK to write */ \\t/* RD and WR are never simultaneously asserted */ #define\\t__SRW\\t0x0010\\t\\t/* open for reading &amp; writing */ #define\\t__SEOF\\t0x0020\\t\\t/* found EOF */ #define\\t__SERR\\t0x0040\\t\\t/* found error */ #define\\t__SMBF\\t0x0080\\t\\t/* _buf is from malloc */ #define\\t__SAPP\\t0x0100\\t\\t/* fdopen()ed in append mode */ #define\\t__SSTR\\t0x0200\\t\\t/* this is an sprintf/snprintf string */ #define\\t__SOPT\\t0x0400\\t\\t/* do fseek() optimisation */ #define\\t__SNPT\\t0x0800\\t\\t/* do not do fseek() optimisation */ #define\\t__SOFF\\t0x1000\\t\\t/* set iff _offset is in fact correct */ #define\\t__SMOD\\t0x2000\\t\\t/* true =&gt; fgetln modified _p text */ #define __SALC 0x4000\\t\\t/* allocate string space dynamically */ #define __SIGN 0x8000\\t\\t/* ignore this file in _fwalk */ /* * The following three definitions are for ANSI C, which took them * from System V, which brilliantly took internal interface macros and * made them official arguments to setvbuf(), without renaming them. * Hence, these ugly _IOxxx names are *supposed* to appear in user code. * * Although numbered as their counterparts above, the implementation * does not rely on this. */ #define\\t_IOFBF\\t0\\t\\t/* setvbuf should set fully buffered */ #define\\t_IOLBF\\t1\\t\\t/* setvbuf should set line buffered */ #define\\t_IONBF\\t2\\t\\t/* setvbuf should set unbuffered */ #define\\tBUFSIZ\\t1024\\t\\t/* size of buffer used by setbuf */ #define\\tEOF\\t(-1) \\t\\t\\t\\t/* must be == _POSIX_STREAM_MAX &lt;limits.h&gt; */ #define\\tFOPEN_MAX\\t20\\t/* must be &lt;= OPEN_MAX &lt;sys/syslimits.h&gt; */ #define\\tFILENAME_MAX\\t1024\\t/* must be &lt;= PATH_MAX &lt;sys/syslimits.h&gt; */ /* System V/ANSI C; this is the wrong way to do this, do *not* use these. */ #ifndef _ANSI_SOURCE #define\\tP_tmpdir\\t\\"/var/tmp/\\" #endif #define\\tL_tmpnam\\t1024\\t/* XXX must be == PATH_MAX */ #define\\tTMP_MAX\\t\\t308915776 #ifndef SEEK_SET #define\\tSEEK_SET\\t0\\t/* set file offset to offset */ #endif #ifndef SEEK_CUR #define\\tSEEK_CUR\\t1\\t/* set file offset to current plus offset */ #endif #ifndef SEEK_END #define\\tSEEK_END\\t2\\t/* set file offset to EOF plus offset */ #endif #define\\tstdin\\t__stdinp #define\\tstdout\\t__stdoutp #define\\tstderr\\t__stderrp #ifdef _DARWIN_UNLIMITED_STREAMS #if defined(__IPHONE_OS_VERSION_MIN_REQUIRED) &amp;&amp; __IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_3_2 #error \\"_DARWIN_UNLIMITED_STREAMS specified, but -miphoneos-version-min version does not support it.\\" #elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED) &amp;&amp; __MAC_OS_X_VERSION_MIN_REQUIRED &lt; __MAC_10_6 #error \\"_DARWIN_UNLIMITED_STREAMS specified, but -mmacosx-version-min version does not support it.\\" #endif #endif /* ANSI-C */ __BEGIN_DECLS void\\t clearerr(FILE *); int\\t fclose(FILE *); int\\t feof(FILE *); int\\t ferror(FILE *); int\\t fflush(FILE *); int\\t fgetc(FILE *); int\\t fgetpos(FILE * __restrict, fpos_t *); char\\t*fgets(char * __restrict, int, FILE *); #if defined(_DARWIN_UNLIMITED_STREAMS) || defined(_DARWIN_C_SOURCE) FILE\\t*fopen(const char * __restrict __filename, const char * __restrict __mode) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_3_2, __DARWIN_EXTSN(fopen)); #else /* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */ FILE\\t*fopen(const char * __restrict __filename, const char * __restrict __mode) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_2_0, __DARWIN_ALIAS(fopen)); #endif /* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */ int\\t fprintf(FILE * __restrict, const char * __restrict, ...) __printflike(2, 3); int\\t fputc(int, FILE *); int\\t fputs(const char * __restrict, FILE * __restrict) __DARWIN_ALIAS(fputs); size_t\\t fread(void * __restrict __ptr, size_t __size, size_t __nitems, FILE * __restrict __stream); FILE\\t*freopen(const char * __restrict, const char * __restrict, FILE * __restrict) __DARWIN_ALIAS(freopen); int\\t fscanf(FILE * __restrict, const char * __restrict, ...) __scanflike(2, 3); int\\t fseek(FILE *, long, int); int\\t fsetpos(FILE *, const fpos_t *); long\\t ftell(FILE *); size_t\\t fwrite(const void * __restrict __ptr, size_t __size, size_t __nitems, FILE * __restrict __stream) __DARWIN_ALIAS(fwrite); int\\t getc(FILE *); int\\t getchar(void); char\\t*gets(char *); void\\t perror(const char *); int\\t printf(const char * __restrict, ...) __printflike(1, 2); int\\t putc(int, FILE *); int\\t putchar(int); int\\t puts(const char *); int\\t remove(const char *); int\\t rename (const char *__old, const char *__new); void\\t rewind(FILE *); int\\t scanf(const char * __restrict, ...) __scanflike(1, 2); void\\t setbuf(FILE * __restrict, char * __restrict); int\\t setvbuf(FILE * __restrict, char * __restrict, int, size_t); int\\t sprintf(char * __restrict, const char * __restrict, ...) __printflike(2, 3) __swift_unavailable(\\"Use snprintf instead.\\"); int\\t sscanf(const char * __restrict, const char * __restrict, ...) __scanflike(2, 3); FILE\\t*tmpfile(void); __swift_unavailable(\\"Use mkstemp(3) instead.\\") #if !defined(_POSIX_C_SOURCE) __deprecated_msg(\\"This function is provided for compatibility reasons only. Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.\\") #endif char\\t*tmpnam(char *); int\\t ungetc(int, FILE *); int\\t vfprintf(FILE * __restrict, const char * __restrict, va_list) __printflike(2, 0); int\\t vprintf(const char * __restrict, va_list) __printflike(1, 0); int\\t vsprintf(char * __restrict, const char * __restrict, va_list) __printflike(2, 0) __swift_unavailable(\\"Use vsnprintf instead.\\"); __END_DECLS /* Additional functionality provided by: * POSIX.1-1988 */ #if __DARWIN_C_LEVEL &gt;= 198808L #define\\tL_ctermid\\t1024\\t/* size for ctermid(); PATH_MAX */ __BEGIN_DECLS #ifndef __CTERMID_DEFINED /* Multiply defined in stdio.h and unistd.h by SUS */ #define __CTERMID_DEFINED 1 char\\t*ctermid(char *); #endif #if defined(_DARWIN_UNLIMITED_STREAMS) || defined(_DARWIN_C_SOURCE) FILE\\t*fdopen(int, const char *) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_3_2, __DARWIN_EXTSN(fdopen)); #else /* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */ FILE\\t*fdopen(int, const char *) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_2_0, __DARWIN_ALIAS(fdopen)); #endif /* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */ int\\t fileno(FILE *); __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 198808L */ /* Additional functionality provided by: * POSIX.2-1992 C Language Binding Option */ #if TARGET_OS_EMBEDDED #define __swift_unavailable_on(osx_msg, ios_msg) __swift_unavailable(ios_msg) #else #define __swift_unavailable_on(osx_msg, ios_msg) __swift_unavailable(osx_msg) #endif #if __DARWIN_C_LEVEL &gt;= 199209L __BEGIN_DECLS int\\t pclose(FILE *) __swift_unavailable_on(\\"Use posix_spawn APIs or NSTask instead.\\", \\"Process spawning is unavailable.\\"); #if defined(_DARWIN_UNLIMITED_STREAMS) || defined(_DARWIN_C_SOURCE) FILE\\t*popen(const char *, const char *) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_3_2, __DARWIN_EXTSN(popen)) __swift_unavailable_on(\\"Use posix_spawn APIs or NSTask instead.\\", \\"Process spawning is unavailable.\\"); #else /* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */ FILE\\t*popen(const char *, const char *) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_2_0, __DARWIN_ALIAS(popen)) __swift_unavailable_on(\\"Use posix_spawn APIs or NSTask instead.\\", \\"Process spawning is unavailable.\\"); #endif /* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */ __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 199209L */ #undef __swift_unavailable_on /* Additional functionality provided by: * POSIX.1c-1995, * POSIX.1i-1995, * and the omnibus ISO/IEC 9945-1: 1996 */ #if __DARWIN_C_LEVEL &gt;= 199506L /* Functions internal to the implementation. */ __BEGIN_DECLS int\\t__srget(FILE *); int\\t__svfscanf(FILE *, const char *, va_list) __scanflike(2, 0); int\\t__swbuf(int, FILE *); __END_DECLS /* * The __sfoo macros are here so that we can * define function versions in the C library. */ #define\\t__sgetc(p) (--(p)-&gt;_r &lt; 0 ? __srget(p) : (int)(*(p)-&gt;_p++)) #if defined(__GNUC__) &amp;&amp; defined(__STDC__) __header_always_inline int __sputc(int _c, FILE *_p) { \\tif (--_p-&gt;_w &gt;= 0 || (_p-&gt;_w &gt;= _p-&gt;_lbfsize &amp;&amp; (char)_c != '\\\\n')) \\t\\treturn (*_p-&gt;_p++ = _c); \\telse \\t\\treturn (__swbuf(_c, _p)); } #else /* * This has been tuned to generate reasonable code on the vax using pcc. */ #define\\t__sputc(c, p) \\\\ \\t(--(p)-&gt;_w &lt; 0 ? \\\\ \\t\\t(p)-&gt;_w &gt;= (p)-&gt;_lbfsize ? \\\\ \\t\\t\\t(*(p)-&gt;_p = (c)), *(p)-&gt;_p != '\\\\n' ? \\\\ \\t\\t\\t\\t(int)*(p)-&gt;_p++ : \\\\ \\t\\t\\t\\t__swbuf('\\\\n', p) : \\\\ \\t\\t\\t__swbuf((int)(c), p) : \\\\ \\t\\t(*(p)-&gt;_p = (c), (int)*(p)-&gt;_p++)) #endif #define\\t__sfeof(p)\\t(((p)-&gt;_flags &amp; __SEOF) != 0) #define\\t__sferror(p)\\t(((p)-&gt;_flags &amp; __SERR) != 0) #define\\t__sclearerr(p)\\t((void)((p)-&gt;_flags &amp;= ~(__SERR|__SEOF))) #define\\t__sfileno(p)\\t((p)-&gt;_file) __BEGIN_DECLS void\\t flockfile(FILE *); int\\t ftrylockfile(FILE *); void\\t funlockfile(FILE *); int\\t getc_unlocked(FILE *); int\\t getchar_unlocked(void); int\\t putc_unlocked(int, FILE *); int\\t putchar_unlocked(int); /* Removed in Issue 6 */ #if !defined(_POSIX_C_SOURCE) || _POSIX_C_SOURCE &lt; 200112L int\\t getw(FILE *); int\\t putw(int, FILE *); #endif __swift_unavailable(\\"Use mkstemp(3) instead.\\") #if !defined(_POSIX_C_SOURCE) __deprecated_msg(\\"This function is provided for compatibility reasons only. Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.\\") #endif char\\t*tempnam(const char *__dir, const char *__prefix) __DARWIN_ALIAS(tempnam); __END_DECLS #ifndef lint #define\\tgetc_unlocked(fp)\\t__sgetc(fp) #define putc_unlocked(x, fp)\\t__sputc(x, fp) #endif /* lint */ #define\\tgetchar_unlocked()\\tgetc_unlocked(stdin) #define\\tputchar_unlocked(x)\\tputc_unlocked(x, stdout) #endif /* __DARWIN_C_LEVEL &gt;= 199506L */ /* Additional functionality provided by: * POSIX.1-2001 * ISO C99 */ #if __DARWIN_C_LEVEL &gt;= 200112L #include &lt;sys/_types/_off_t.h&gt; __BEGIN_DECLS int\\t fseeko(FILE * __stream, off_t __offset, int __whence); off_t\\t ftello(FILE * __stream); __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 200112L */ #if __DARWIN_C_LEVEL &gt;= 200112L || defined(_C99_SOURCE) || defined(__cplusplus) __BEGIN_DECLS int\\t snprintf(char * __restrict __str, size_t __size, const char * __restrict __format, ...) __printflike(3, 4); int\\t vfscanf(FILE * __restrict __stream, const char * __restrict __format, va_list) __scanflike(2, 0); int\\t vscanf(const char * __restrict __format, va_list) __scanflike(1, 0); int\\t vsnprintf(char * __restrict __str, size_t __size, const char * __restrict __format, va_list) __printflike(3, 0); int\\t vsscanf(const char * __restrict __str, const char * __restrict __format, va_list) __scanflike(2, 0); __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 200112L || defined(_C99_SOURCE) || defined(__cplusplus) */ /* Additional functionality provided by: * POSIX.1-2008 */ #if __DARWIN_C_LEVEL &gt;= 200809L #include &lt;sys/_types/_ssize_t.h&gt; __BEGIN_DECLS int\\tdprintf(int, const char * __restrict, ...) __printflike(2, 3) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3); int\\tvdprintf(int, const char * __restrict, va_list) __printflike(2, 0) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3); ssize_t getdelim(char ** __restrict __linep, size_t * __restrict __linecapp, int __delimiter, FILE * __restrict __stream) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3); ssize_t getline(char ** __restrict __linep, size_t * __restrict __linecapp, FILE * __restrict __stream) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3); FILE *fmemopen(void * __restrict __buf, size_t __size, const char * __restrict __mode) __API_AVAILABLE(macos(10.13), ios(11.0), tvos(11.0), watchos(4.0)); FILE *open_memstream(char **__bufp, size_t *__sizep) __API_AVAILABLE(macos(10.13), ios(11.0), tvos(11.0), watchos(4.0)); __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 200809L */ /* Darwin extensions */ #if __DARWIN_C_LEVEL &gt;= __DARWIN_C_FULL __BEGIN_DECLS extern __const int sys_nerr;\\t\\t/* perror(3) external variables */ extern __const char *__const sys_errlist[]; int\\t asprintf(char ** __restrict, const char * __restrict, ...) __printflike(2, 3); char\\t*ctermid_r(char *); char\\t*fgetln(FILE *, size_t *); __const char *fmtcheck(const char *, const char *); int\\t fpurge(FILE *); void\\t setbuffer(FILE *, char *, int); int\\t setlinebuf(FILE *); int\\t vasprintf(char ** __restrict, const char * __restrict, va_list) __printflike(2, 0); FILE\\t*zopen(const char *, const char *, int); /* * Stdio function-access interface. */ FILE\\t*funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *)); __END_DECLS #define\\tfropen(cookie, fn) funopen(cookie, fn, 0, 0, 0) #define\\tfwopen(cookie, fn) funopen(cookie, 0, fn, 0, 0) #define\\tfeof_unlocked(p)\\t__sfeof(p) #define\\tferror_unlocked(p)\\t__sferror(p) #define\\tclearerr_unlocked(p)\\t__sclearerr(p) #define\\tfileno_unlocked(p)\\t__sfileno(p) #endif /* __DARWIN_C_LEVEL &gt;= __DARWIN_C_FULL */ #ifdef _USE_EXTENDED_LOCALES_ #include &lt;xlocale/_stdio.h&gt; #endif /* _USE_EXTENDED_LOCALES_ */ #if defined (__GNUC__) &amp;&amp; _FORTIFY_SOURCE &gt; 0 &amp;&amp; !defined (__cplusplus) /* Security checking functions. */ #include &lt;secure/_stdio.h&gt; #endif #endif /* _STDIO_H_ */","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/apue/stdio.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"stdio"}],["meta",{"property":"og:description","content":"stdio /* * Copyright (c) 2000, 2005, 2007, 2009, 2010 Apple Inc. All rights reserved. * * @APPLE_LICENSE_HEADER_START@ * * This file contains Original Code and/or Modifications of Original Code * as defined in and that are subject to the Apple Public Source License * Version 2.0 (the 'License'). You may not use this file except in * compliance with the License. Please obtain a copy of the License at * http://www.opensource.apple.com/apsl/ and read it before using this * file. * * The Original Code and all software distributed under the License are * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES, * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. * Please see the License for the specific language governing rights and * limitations under the License. * * @APPLE_LICENSE_HEADER_END@ */ /*- * Copyright (c) 1990, 1993 *\\tThe Regents of the University of California. All rights reserved. * * This code is derived from software contributed to Berkeley by * Chris Torek. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * 1. Redistributions of source code must retain the above copyright * notice, this list of conditions and the following disclaimer. * 2. Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. * 3. All advertising materials mentioning features or use of this software * must display the following acknowledgement: *\\tThis product includes software developed by the University of *\\tCalifornia, Berkeley and its contributors. * 4. Neither the name of the University nor the names of its contributors * may be used to endorse or promote products derived from this software * without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS \`\`AS IS'' AND * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * *\\t@(#)stdio.h\\t8.5 (Berkeley) 4/29/95 */ #ifndef\\t_STDIO_H_ #define\\t_STDIO_H_ #include &lt;_stdio.h&gt; __BEGIN_DECLS extern FILE *__stdinp; extern FILE *__stdoutp; extern FILE *__stderrp; __END_DECLS #define\\t__SLBF\\t0x0001\\t\\t/* line buffered */ #define\\t__SNBF\\t0x0002\\t\\t/* unbuffered */ #define\\t__SRD\\t0x0004\\t\\t/* OK to read */ #define\\t__SWR\\t0x0008\\t\\t/* OK to write */ \\t/* RD and WR are never simultaneously asserted */ #define\\t__SRW\\t0x0010\\t\\t/* open for reading &amp; writing */ #define\\t__SEOF\\t0x0020\\t\\t/* found EOF */ #define\\t__SERR\\t0x0040\\t\\t/* found error */ #define\\t__SMBF\\t0x0080\\t\\t/* _buf is from malloc */ #define\\t__SAPP\\t0x0100\\t\\t/* fdopen()ed in append mode */ #define\\t__SSTR\\t0x0200\\t\\t/* this is an sprintf/snprintf string */ #define\\t__SOPT\\t0x0400\\t\\t/* do fseek() optimisation */ #define\\t__SNPT\\t0x0800\\t\\t/* do not do fseek() optimisation */ #define\\t__SOFF\\t0x1000\\t\\t/* set iff _offset is in fact correct */ #define\\t__SMOD\\t0x2000\\t\\t/* true =&gt; fgetln modified _p text */ #define __SALC 0x4000\\t\\t/* allocate string space dynamically */ #define __SIGN 0x8000\\t\\t/* ignore this file in _fwalk */ /* * The following three definitions are for ANSI C, which took them * from System V, which brilliantly took internal interface macros and * made them official arguments to setvbuf(), without renaming them. * Hence, these ugly _IOxxx names are *supposed* to appear in user code. * * Although numbered as their counterparts above, the implementation * does not rely on this. */ #define\\t_IOFBF\\t0\\t\\t/* setvbuf should set fully buffered */ #define\\t_IOLBF\\t1\\t\\t/* setvbuf should set line buffered */ #define\\t_IONBF\\t2\\t\\t/* setvbuf should set unbuffered */ #define\\tBUFSIZ\\t1024\\t\\t/* size of buffer used by setbuf */ #define\\tEOF\\t(-1) \\t\\t\\t\\t/* must be == _POSIX_STREAM_MAX &lt;limits.h&gt; */ #define\\tFOPEN_MAX\\t20\\t/* must be &lt;= OPEN_MAX &lt;sys/syslimits.h&gt; */ #define\\tFILENAME_MAX\\t1024\\t/* must be &lt;= PATH_MAX &lt;sys/syslimits.h&gt; */ /* System V/ANSI C; this is the wrong way to do this, do *not* use these. */ #ifndef _ANSI_SOURCE #define\\tP_tmpdir\\t\\"/var/tmp/\\" #endif #define\\tL_tmpnam\\t1024\\t/* XXX must be == PATH_MAX */ #define\\tTMP_MAX\\t\\t308915776 #ifndef SEEK_SET #define\\tSEEK_SET\\t0\\t/* set file offset to offset */ #endif #ifndef SEEK_CUR #define\\tSEEK_CUR\\t1\\t/* set file offset to current plus offset */ #endif #ifndef SEEK_END #define\\tSEEK_END\\t2\\t/* set file offset to EOF plus offset */ #endif #define\\tstdin\\t__stdinp #define\\tstdout\\t__stdoutp #define\\tstderr\\t__stderrp #ifdef _DARWIN_UNLIMITED_STREAMS #if defined(__IPHONE_OS_VERSION_MIN_REQUIRED) &amp;&amp; __IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_3_2 #error \\"_DARWIN_UNLIMITED_STREAMS specified, but -miphoneos-version-min version does not support it.\\" #elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED) &amp;&amp; __MAC_OS_X_VERSION_MIN_REQUIRED &lt; __MAC_10_6 #error \\"_DARWIN_UNLIMITED_STREAMS specified, but -mmacosx-version-min version does not support it.\\" #endif #endif /* ANSI-C */ __BEGIN_DECLS void\\t clearerr(FILE *); int\\t fclose(FILE *); int\\t feof(FILE *); int\\t ferror(FILE *); int\\t fflush(FILE *); int\\t fgetc(FILE *); int\\t fgetpos(FILE * __restrict, fpos_t *); char\\t*fgets(char * __restrict, int, FILE *); #if defined(_DARWIN_UNLIMITED_STREAMS) || defined(_DARWIN_C_SOURCE) FILE\\t*fopen(const char * __restrict __filename, const char * __restrict __mode) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_3_2, __DARWIN_EXTSN(fopen)); #else /* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */ FILE\\t*fopen(const char * __restrict __filename, const char * __restrict __mode) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_2_0, __DARWIN_ALIAS(fopen)); #endif /* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */ int\\t fprintf(FILE * __restrict, const char * __restrict, ...) __printflike(2, 3); int\\t fputc(int, FILE *); int\\t fputs(const char * __restrict, FILE * __restrict) __DARWIN_ALIAS(fputs); size_t\\t fread(void * __restrict __ptr, size_t __size, size_t __nitems, FILE * __restrict __stream); FILE\\t*freopen(const char * __restrict, const char * __restrict, FILE * __restrict) __DARWIN_ALIAS(freopen); int\\t fscanf(FILE * __restrict, const char * __restrict, ...) __scanflike(2, 3); int\\t fseek(FILE *, long, int); int\\t fsetpos(FILE *, const fpos_t *); long\\t ftell(FILE *); size_t\\t fwrite(const void * __restrict __ptr, size_t __size, size_t __nitems, FILE * __restrict __stream) __DARWIN_ALIAS(fwrite); int\\t getc(FILE *); int\\t getchar(void); char\\t*gets(char *); void\\t perror(const char *); int\\t printf(const char * __restrict, ...) __printflike(1, 2); int\\t putc(int, FILE *); int\\t putchar(int); int\\t puts(const char *); int\\t remove(const char *); int\\t rename (const char *__old, const char *__new); void\\t rewind(FILE *); int\\t scanf(const char * __restrict, ...) __scanflike(1, 2); void\\t setbuf(FILE * __restrict, char * __restrict); int\\t setvbuf(FILE * __restrict, char * __restrict, int, size_t); int\\t sprintf(char * __restrict, const char * __restrict, ...) __printflike(2, 3) __swift_unavailable(\\"Use snprintf instead.\\"); int\\t sscanf(const char * __restrict, const char * __restrict, ...) __scanflike(2, 3); FILE\\t*tmpfile(void); __swift_unavailable(\\"Use mkstemp(3) instead.\\") #if !defined(_POSIX_C_SOURCE) __deprecated_msg(\\"This function is provided for compatibility reasons only. Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.\\") #endif char\\t*tmpnam(char *); int\\t ungetc(int, FILE *); int\\t vfprintf(FILE * __restrict, const char * __restrict, va_list) __printflike(2, 0); int\\t vprintf(const char * __restrict, va_list) __printflike(1, 0); int\\t vsprintf(char * __restrict, const char * __restrict, va_list) __printflike(2, 0) __swift_unavailable(\\"Use vsnprintf instead.\\"); __END_DECLS /* Additional functionality provided by: * POSIX.1-1988 */ #if __DARWIN_C_LEVEL &gt;= 198808L #define\\tL_ctermid\\t1024\\t/* size for ctermid(); PATH_MAX */ __BEGIN_DECLS #ifndef __CTERMID_DEFINED /* Multiply defined in stdio.h and unistd.h by SUS */ #define __CTERMID_DEFINED 1 char\\t*ctermid(char *); #endif #if defined(_DARWIN_UNLIMITED_STREAMS) || defined(_DARWIN_C_SOURCE) FILE\\t*fdopen(int, const char *) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_3_2, __DARWIN_EXTSN(fdopen)); #else /* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */ FILE\\t*fdopen(int, const char *) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_2_0, __DARWIN_ALIAS(fdopen)); #endif /* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */ int\\t fileno(FILE *); __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 198808L */ /* Additional functionality provided by: * POSIX.2-1992 C Language Binding Option */ #if TARGET_OS_EMBEDDED #define __swift_unavailable_on(osx_msg, ios_msg) __swift_unavailable(ios_msg) #else #define __swift_unavailable_on(osx_msg, ios_msg) __swift_unavailable(osx_msg) #endif #if __DARWIN_C_LEVEL &gt;= 199209L __BEGIN_DECLS int\\t pclose(FILE *) __swift_unavailable_on(\\"Use posix_spawn APIs or NSTask instead.\\", \\"Process spawning is unavailable.\\"); #if defined(_DARWIN_UNLIMITED_STREAMS) || defined(_DARWIN_C_SOURCE) FILE\\t*popen(const char *, const char *) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_3_2, __DARWIN_EXTSN(popen)) __swift_unavailable_on(\\"Use posix_spawn APIs or NSTask instead.\\", \\"Process spawning is unavailable.\\"); #else /* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */ FILE\\t*popen(const char *, const char *) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_2_0, __DARWIN_ALIAS(popen)) __swift_unavailable_on(\\"Use posix_spawn APIs or NSTask instead.\\", \\"Process spawning is unavailable.\\"); #endif /* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */ __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 199209L */ #undef __swift_unavailable_on /* Additional functionality provided by: * POSIX.1c-1995, * POSIX.1i-1995, * and the omnibus ISO/IEC 9945-1: 1996 */ #if __DARWIN_C_LEVEL &gt;= 199506L /* Functions internal to the implementation. */ __BEGIN_DECLS int\\t__srget(FILE *); int\\t__svfscanf(FILE *, const char *, va_list) __scanflike(2, 0); int\\t__swbuf(int, FILE *); __END_DECLS /* * The __sfoo macros are here so that we can * define function versions in the C library. */ #define\\t__sgetc(p) (--(p)-&gt;_r &lt; 0 ? __srget(p) : (int)(*(p)-&gt;_p++)) #if defined(__GNUC__) &amp;&amp; defined(__STDC__) __header_always_inline int __sputc(int _c, FILE *_p) { \\tif (--_p-&gt;_w &gt;= 0 || (_p-&gt;_w &gt;= _p-&gt;_lbfsize &amp;&amp; (char)_c != '\\\\n')) \\t\\treturn (*_p-&gt;_p++ = _c); \\telse \\t\\treturn (__swbuf(_c, _p)); } #else /* * This has been tuned to generate reasonable code on the vax using pcc. */ #define\\t__sputc(c, p) \\\\ \\t(--(p)-&gt;_w &lt; 0 ? \\\\ \\t\\t(p)-&gt;_w &gt;= (p)-&gt;_lbfsize ? \\\\ \\t\\t\\t(*(p)-&gt;_p = (c)), *(p)-&gt;_p != '\\\\n' ? \\\\ \\t\\t\\t\\t(int)*(p)-&gt;_p++ : \\\\ \\t\\t\\t\\t__swbuf('\\\\n', p) : \\\\ \\t\\t\\t__swbuf((int)(c), p) : \\\\ \\t\\t(*(p)-&gt;_p = (c), (int)*(p)-&gt;_p++)) #endif #define\\t__sfeof(p)\\t(((p)-&gt;_flags &amp; __SEOF) != 0) #define\\t__sferror(p)\\t(((p)-&gt;_flags &amp; __SERR) != 0) #define\\t__sclearerr(p)\\t((void)((p)-&gt;_flags &amp;= ~(__SERR|__SEOF))) #define\\t__sfileno(p)\\t((p)-&gt;_file) __BEGIN_DECLS void\\t flockfile(FILE *); int\\t ftrylockfile(FILE *); void\\t funlockfile(FILE *); int\\t getc_unlocked(FILE *); int\\t getchar_unlocked(void); int\\t putc_unlocked(int, FILE *); int\\t putchar_unlocked(int); /* Removed in Issue 6 */ #if !defined(_POSIX_C_SOURCE) || _POSIX_C_SOURCE &lt; 200112L int\\t getw(FILE *); int\\t putw(int, FILE *); #endif __swift_unavailable(\\"Use mkstemp(3) instead.\\") #if !defined(_POSIX_C_SOURCE) __deprecated_msg(\\"This function is provided for compatibility reasons only. Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.\\") #endif char\\t*tempnam(const char *__dir, const char *__prefix) __DARWIN_ALIAS(tempnam); __END_DECLS #ifndef lint #define\\tgetc_unlocked(fp)\\t__sgetc(fp) #define putc_unlocked(x, fp)\\t__sputc(x, fp) #endif /* lint */ #define\\tgetchar_unlocked()\\tgetc_unlocked(stdin) #define\\tputchar_unlocked(x)\\tputc_unlocked(x, stdout) #endif /* __DARWIN_C_LEVEL &gt;= 199506L */ /* Additional functionality provided by: * POSIX.1-2001 * ISO C99 */ #if __DARWIN_C_LEVEL &gt;= 200112L #include &lt;sys/_types/_off_t.h&gt; __BEGIN_DECLS int\\t fseeko(FILE * __stream, off_t __offset, int __whence); off_t\\t ftello(FILE * __stream); __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 200112L */ #if __DARWIN_C_LEVEL &gt;= 200112L || defined(_C99_SOURCE) || defined(__cplusplus) __BEGIN_DECLS int\\t snprintf(char * __restrict __str, size_t __size, const char * __restrict __format, ...) __printflike(3, 4); int\\t vfscanf(FILE * __restrict __stream, const char * __restrict __format, va_list) __scanflike(2, 0); int\\t vscanf(const char * __restrict __format, va_list) __scanflike(1, 0); int\\t vsnprintf(char * __restrict __str, size_t __size, const char * __restrict __format, va_list) __printflike(3, 0); int\\t vsscanf(const char * __restrict __str, const char * __restrict __format, va_list) __scanflike(2, 0); __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 200112L || defined(_C99_SOURCE) || defined(__cplusplus) */ /* Additional functionality provided by: * POSIX.1-2008 */ #if __DARWIN_C_LEVEL &gt;= 200809L #include &lt;sys/_types/_ssize_t.h&gt; __BEGIN_DECLS int\\tdprintf(int, const char * __restrict, ...) __printflike(2, 3) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3); int\\tvdprintf(int, const char * __restrict, va_list) __printflike(2, 0) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3); ssize_t getdelim(char ** __restrict __linep, size_t * __restrict __linecapp, int __delimiter, FILE * __restrict __stream) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3); ssize_t getline(char ** __restrict __linep, size_t * __restrict __linecapp, FILE * __restrict __stream) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3); FILE *fmemopen(void * __restrict __buf, size_t __size, const char * __restrict __mode) __API_AVAILABLE(macos(10.13), ios(11.0), tvos(11.0), watchos(4.0)); FILE *open_memstream(char **__bufp, size_t *__sizep) __API_AVAILABLE(macos(10.13), ios(11.0), tvos(11.0), watchos(4.0)); __END_DECLS #endif /* __DARWIN_C_LEVEL &gt;= 200809L */ /* Darwin extensions */ #if __DARWIN_C_LEVEL &gt;= __DARWIN_C_FULL __BEGIN_DECLS extern __const int sys_nerr;\\t\\t/* perror(3) external variables */ extern __const char *__const sys_errlist[]; int\\t asprintf(char ** __restrict, const char * __restrict, ...) __printflike(2, 3); char\\t*ctermid_r(char *); char\\t*fgetln(FILE *, size_t *); __const char *fmtcheck(const char *, const char *); int\\t fpurge(FILE *); void\\t setbuffer(FILE *, char *, int); int\\t setlinebuf(FILE *); int\\t vasprintf(char ** __restrict, const char * __restrict, va_list) __printflike(2, 0); FILE\\t*zopen(const char *, const char *, int); /* * Stdio function-access interface. */ FILE\\t*funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *)); __END_DECLS #define\\tfropen(cookie, fn) funopen(cookie, fn, 0, 0, 0) #define\\tfwopen(cookie, fn) funopen(cookie, 0, fn, 0, 0) #define\\tfeof_unlocked(p)\\t__sfeof(p) #define\\tferror_unlocked(p)\\t__sferror(p) #define\\tclearerr_unlocked(p)\\t__sclearerr(p) #define\\tfileno_unlocked(p)\\t__sfileno(p) #endif /* __DARWIN_C_LEVEL &gt;= __DARWIN_C_FULL */ #ifdef _USE_EXTENDED_LOCALES_ #include &lt;xlocale/_stdio.h&gt; #endif /* _USE_EXTENDED_LOCALES_ */ #if defined (__GNUC__) &amp;&amp; _FORTIFY_SOURCE &gt; 0 &amp;&amp; !defined (__cplusplus) /* Security checking functions. */ #include &lt;secure/_stdio.h&gt; #endif #endif /* _STDIO_H_ */"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"stdio\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":6.73,"words":2019},"filePathRelative":"apue/stdio.md","localizedDate":"2023年3月11日","excerpt":"<h1> stdio</h1>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">/*\\n * Copyright (c) 2000, 2005, 2007, 2009, 2010 Apple Inc. All rights reserved.\\n *\\n * @APPLE_LICENSE_HEADER_START@\\n *\\n * This file contains Original Code and/or Modifications of Original Code\\n * as defined in and that are subject to the Apple Public Source License\\n * Version 2.0 (the 'License'). You may not use this file except in\\n * compliance with the License. Please obtain a copy of the License at\\n * http://www.opensource.apple.com/apsl/ and read it before using this\\n * file.\\n *\\n * The Original Code and all software distributed under the License are\\n * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER\\n * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\\n * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.\\n * Please see the License for the specific language governing rights and\\n * limitations under the License.\\n *\\n * @APPLE_LICENSE_HEADER_END@\\n */</span>\\n<span class=\\"token comment\\">/*-\\n * Copyright (c) 1990, 1993\\n *\\tThe Regents of the University of California.  All rights reserved.\\n *\\n * This code is derived from software contributed to Berkeley by\\n * Chris Torek.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions\\n * are met:\\n * 1. Redistributions of source code must retain the above copyright\\n *    notice, this list of conditions and the following disclaimer.\\n * 2. Redistributions in binary form must reproduce the above copyright\\n *    notice, this list of conditions and the following disclaimer in the\\n *    documentation and/or other materials provided with the distribution.\\n * 3. All advertising materials mentioning features or use of this software\\n *    must display the following acknowledgement:\\n *\\tThis product includes software developed by the University of\\n *\\tCalifornia, Berkeley and its contributors.\\n * 4. Neither the name of the University nor the names of its contributors\\n *    may be used to endorse or promote products derived from this software\\n *    without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS \`\`AS IS'' AND\\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\\n * SUCH DAMAGE.\\n *\\n *\\t@(#)stdio.h\\t8.5 (Berkeley) 4/29/95\\n */</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span>\\t<span class=\\"token expression\\">_STDIO_H_</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">_STDIO_H_</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;_stdio.h&gt;</span></span>\\n\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">extern</span> FILE <span class=\\"token operator\\">*</span>__stdinp<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">extern</span> FILE <span class=\\"token operator\\">*</span>__stdoutp<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">extern</span> FILE <span class=\\"token operator\\">*</span>__stderrp<span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SLBF</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0001</span>\\t\\t</span><span class=\\"token comment\\">/* line buffered */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SNBF</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0002</span>\\t\\t</span><span class=\\"token comment\\">/* unbuffered */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SRD</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0004</span>\\t\\t</span><span class=\\"token comment\\">/* OK to read */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SWR</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0008</span>\\t\\t</span><span class=\\"token comment\\">/* OK to write */</span></span>\\n\\t<span class=\\"token comment\\">/* RD and WR are never simultaneously asserted */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SRW</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0010</span>\\t\\t</span><span class=\\"token comment\\">/* open for reading &amp; writing */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SEOF</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0020</span>\\t\\t</span><span class=\\"token comment\\">/* found EOF */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SERR</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0040</span>\\t\\t</span><span class=\\"token comment\\">/* found error */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SMBF</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0080</span>\\t\\t</span><span class=\\"token comment\\">/* _buf is from malloc */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SAPP</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0100</span>\\t\\t</span><span class=\\"token comment\\">/* fdopen()ed in append mode */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SSTR</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0200</span>\\t\\t</span><span class=\\"token comment\\">/* this is an sprintf/snprintf string */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SOPT</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0400</span>\\t\\t</span><span class=\\"token comment\\">/* do fseek() optimisation */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SNPT</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x0800</span>\\t\\t</span><span class=\\"token comment\\">/* do not do fseek() optimisation */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SOFF</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x1000</span>\\t\\t</span><span class=\\"token comment\\">/* set iff _offset is in fact correct */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">__SMOD</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0x2000</span>\\t\\t</span><span class=\\"token comment\\">/* true =&gt; fgetln modified _p text */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">__SALC</span>  <span class=\\"token expression\\"><span class=\\"token number\\">0x4000</span>\\t\\t</span><span class=\\"token comment\\">/* allocate string space dynamically */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">__SIGN</span>  <span class=\\"token expression\\"><span class=\\"token number\\">0x8000</span>\\t\\t</span><span class=\\"token comment\\">/* ignore this file in _fwalk */</span></span>\\n\\n<span class=\\"token comment\\">/*\\n * The following three definitions are for ANSI C, which took them\\n * from System V, which brilliantly took internal interface macros and\\n * made them official arguments to setvbuf(), without renaming them.\\n * Hence, these ugly _IOxxx names are *supposed* to appear in user code.\\n *\\n * Although numbered as their counterparts above, the implementation\\n * does not rely on this.\\n */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">_IOFBF</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0</span>\\t\\t</span><span class=\\"token comment\\">/* setvbuf should set fully buffered */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">_IOLBF</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">1</span>\\t\\t</span><span class=\\"token comment\\">/* setvbuf should set line buffered */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">_IONBF</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">2</span>\\t\\t</span><span class=\\"token comment\\">/* setvbuf should set unbuffered */</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">BUFSIZ</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">1024</span>\\t\\t</span><span class=\\"token comment\\">/* size of buffer used by setbuf */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">EOF</span>\\t<span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span></span></span>\\n\\n\\t\\t\\t\\t<span class=\\"token comment\\">/* must be == _POSIX_STREAM_MAX &lt;limits.h&gt; */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">FOPEN_MAX</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">20</span>\\t</span><span class=\\"token comment\\">/* must be &lt;= OPEN_MAX &lt;sys/syslimits.h&gt; */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">FILENAME_MAX</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">1024</span>\\t</span><span class=\\"token comment\\">/* must be &lt;= PATH_MAX &lt;sys/syslimits.h&gt; */</span></span>\\n\\n<span class=\\"token comment\\">/* System V/ANSI C; this is the wrong way to do this, do *not* use these. */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\">_ANSI_SOURCE</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">P_tmpdir</span>\\t<span class=\\"token string\\">\\"/var/tmp/\\"</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">L_tmpnam</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">1024</span>\\t</span><span class=\\"token comment\\">/* XXX must be == PATH_MAX */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">TMP_MAX</span>\\t\\t<span class=\\"token expression\\"><span class=\\"token number\\">308915776</span></span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\"><span class=\\"token constant\\">SEEK_SET</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">SEEK_SET</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">0</span>\\t</span><span class=\\"token comment\\">/* set file offset to offset */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\"><span class=\\"token constant\\">SEEK_CUR</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">SEEK_CUR</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">1</span>\\t</span><span class=\\"token comment\\">/* set file offset to current plus offset */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\"><span class=\\"token constant\\">SEEK_END</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">SEEK_END</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">2</span>\\t</span><span class=\\"token comment\\">/* set file offset to EOF plus offset */</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">stdin</span>\\t<span class=\\"token expression\\">__stdinp</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">stdout</span>\\t<span class=\\"token expression\\">__stdoutp</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">stderr</span>\\t<span class=\\"token expression\\">__stderrp</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifdef</span> <span class=\\"token expression\\">_DARWIN_UNLIMITED_STREAMS</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>__IPHONE_OS_VERSION_MIN_REQUIRED<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> __IPHONE_OS_VERSION_MIN_REQUIRED <span class=\\"token operator\\">&lt;</span> __IPHONE_3_2</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">error</span> <span class=\\"token string\\">\\"_DARWIN_UNLIMITED_STREAMS specified, but -miphoneos-version-min version does not support it.\\"</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">elif</span> <span class=\\"token expression\\"><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>__MAC_OS_X_VERSION_MIN_REQUIRED<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> __MAC_OS_X_VERSION_MIN_REQUIRED <span class=\\"token operator\\">&lt;</span> __MAC_10_6</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">error</span> <span class=\\"token string\\">\\"_DARWIN_UNLIMITED_STREAMS specified, but -mmacosx-version-min version does not support it.\\"</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n\\n<span class=\\"token comment\\">/* ANSI-C */</span>\\n\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">void</span>\\t <span class=\\"token function\\">clearerr</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fclose</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">feof</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">ferror</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fflush</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fgetc</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fgetpos</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">fpos_t</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">char</span>\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">fgets</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_DARWIN_UNLIMITED_STREAMS<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_DARWIN_C_SOURCE<span class=\\"token punctuation\\">)</span></span></span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">fopen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __filename<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __mode<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_6<span class=\\"token punctuation\\">,</span> __IPHONE_3_2<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">__DARWIN_EXTSN</span><span class=\\"token punctuation\\">(</span>fopen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">else</span> <span class=\\"token comment\\">/* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */</span></span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">fopen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __filename<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __mode<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_6<span class=\\"token punctuation\\">,</span> __IPHONE_2_0<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">__DARWIN_ALIAS</span><span class=\\"token punctuation\\">(</span>fopen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */</span></span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fprintf</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fputc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fputs</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS</span><span class=\\"token punctuation\\">(</span>fputs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">size_t</span>\\t <span class=\\"token function\\">fread</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span> __restrict __ptr<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> __size<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> __nitems<span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span> __restrict __stream<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">freopen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span>\\n                 FILE <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS</span><span class=\\"token punctuation\\">(</span>freopen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fscanf</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__scanflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fseek</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">long</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fsetpos</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">fpos_t</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">long</span>\\t <span class=\\"token function\\">ftell</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">size_t</span>\\t <span class=\\"token function\\">fwrite</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span> __restrict __ptr<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> __size<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> __nitems<span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span> __restrict __stream<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS</span><span class=\\"token punctuation\\">(</span>fwrite<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">getc</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">getchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">char</span>\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">gets</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span>\\t <span class=\\"token function\\">perror</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">putc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">putchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">puts</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">rename</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>__old<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>__new<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span>\\t <span class=\\"token function\\">rewind</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__scanflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span>\\t <span class=\\"token function\\">setbuf</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">setvbuf</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">sprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__swift_unavailable</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Use snprintf instead.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">sscanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__scanflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">tmpfile</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token function\\">__swift_unavailable</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Use mkstemp(3) instead.\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token operator\\">!</span><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_POSIX_C_SOURCE<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token function\\">__deprecated_msg</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n<span class=\\"token keyword\\">char</span>\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">tmpnam</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">ungetc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">vfprintf</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">vprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">vsprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__swift_unavailable</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Use vsnprintf instead.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n\\n\\n\\n<span class=\\"token comment\\">/* Additional functionality provided by:\\n * POSIX.1-1988\\n */</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">__DARWIN_C_LEVEL <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">198808L</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name\\">L_ctermid</span>\\t<span class=\\"token expression\\"><span class=\\"token number\\">1024</span>\\t</span><span class=\\"token comment\\">/* size for ctermid(); PATH_MAX */</span></span>\\n\\n__BEGIN_DECLS\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\">__CTERMID_DEFINED</span></span>\\n<span class=\\"token comment\\">/* Multiply defined in stdio.h and unistd.h by SUS */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">__CTERMID_DEFINED</span> <span class=\\"token expression\\"><span class=\\"token number\\">1</span></span></span>\\n<span class=\\"token keyword\\">char</span>\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">ctermid</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_DARWIN_UNLIMITED_STREAMS<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_DARWIN_C_SOURCE<span class=\\"token punctuation\\">)</span></span></span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">fdopen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_6<span class=\\"token punctuation\\">,</span> __IPHONE_3_2<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">__DARWIN_EXTSN</span><span class=\\"token punctuation\\">(</span>fdopen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">else</span> <span class=\\"token comment\\">/* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */</span></span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">fdopen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_6<span class=\\"token punctuation\\">,</span> __IPHONE_2_0<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">__DARWIN_ALIAS</span><span class=\\"token punctuation\\">(</span>fdopen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */</span></span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fileno</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* __DARWIN_C_LEVEL &gt;= 198808L */</span></span>\\n\\n\\n<span class=\\"token comment\\">/* Additional functionality provided by:\\n * POSIX.2-1992 C Language Binding Option\\n */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">TARGET_OS_EMBEDDED</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">__swift_unavailable_on</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>osx_msg<span class=\\"token punctuation\\">,</span> ios_msg<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__swift_unavailable</span><span class=\\"token punctuation\\">(</span>ios_msg<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">else</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">__swift_unavailable_on</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>osx_msg<span class=\\"token punctuation\\">,</span> ios_msg<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__swift_unavailable</span><span class=\\"token punctuation\\">(</span>osx_msg<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">__DARWIN_C_LEVEL <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">199209L</span></span></span>\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">pclose</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__swift_unavailable_on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Use posix_spawn APIs or NSTask instead.\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Process spawning is unavailable.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_DARWIN_UNLIMITED_STREAMS<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_DARWIN_C_SOURCE<span class=\\"token punctuation\\">)</span></span></span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">popen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_6<span class=\\"token punctuation\\">,</span> __IPHONE_3_2<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">__DARWIN_EXTSN</span><span class=\\"token punctuation\\">(</span>popen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__swift_unavailable_on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Use posix_spawn APIs or NSTask instead.\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Process spawning is unavailable.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">else</span> <span class=\\"token comment\\">/* !_DARWIN_UNLIMITED_STREAMS &amp;&amp; !_DARWIN_C_SOURCE */</span></span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">popen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_6<span class=\\"token punctuation\\">,</span> __IPHONE_2_0<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">__DARWIN_ALIAS</span><span class=\\"token punctuation\\">(</span>popen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__swift_unavailable_on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Use posix_spawn APIs or NSTask instead.\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Process spawning is unavailable.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* (DARWIN_UNLIMITED_STREAMS || _DARWIN_C_SOURCE) */</span></span>\\n__END_DECLS\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* __DARWIN_C_LEVEL &gt;= 199209L */</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">undef</span> <span class=\\"token expression\\">__swift_unavailable_on</span></span>\\n\\n<span class=\\"token comment\\">/* Additional functionality provided by:\\n * POSIX.1c-1995,\\n * POSIX.1i-1995,\\n * and the omnibus ISO/IEC 9945-1: 1996\\n */</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">__DARWIN_C_LEVEL <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">199506L</span></span></span>\\n\\n<span class=\\"token comment\\">/* Functions internal to the implementation. */</span>\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">int</span>\\t<span class=\\"token function\\">__srget</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t<span class=\\"token function\\">__svfscanf</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__scanflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t<span class=\\"token function\\">__swbuf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n\\n<span class=\\"token comment\\">/*\\n * The __sfoo macros are here so that we can\\n * define function versions in the C library.\\n */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">__sgetc</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_r <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> <span class=\\"token function\\">__srget</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_p<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>__GNUC__<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>__STDC__<span class=\\"token punctuation\\">)</span></span></span>\\n__header_always_inline <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">__sputc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> _c<span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span>_p<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">--</span>_p<span class=\\"token operator\\">-&gt;</span>_w <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>_p<span class=\\"token operator\\">-&gt;</span>_w <span class=\\"token operator\\">&gt;=</span> _p<span class=\\"token operator\\">-&gt;</span>_lbfsize <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">)</span>_c <span class=\\"token operator\\">!=</span> <span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>_p<span class=\\"token operator\\">-&gt;</span>_p<span class=\\"token operator\\">++</span> <span class=\\"token operator\\">=</span> _c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">else</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">__swbuf</span><span class=\\"token punctuation\\">(</span>_c<span class=\\"token punctuation\\">,</span> _p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">else</span></span>\\n<span class=\\"token comment\\">/*\\n * This has been tuned to generate reasonable code on the vax using pcc.\\n */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">__sputc</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">,</span> p<span class=\\"token punctuation\\">)</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n\\t<span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_w <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n\\t\\t<span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_w <span class=\\"token operator\\">&gt;=</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_lbfsize <span class=\\"token operator\\">?</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n\\t\\t\\t<span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_p <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_p <span class=\\"token operator\\">!=</span> </span><span class=\\"token char\\">'\\\\n'</span> <span class=\\"token expression\\"><span class=\\"token operator\\">?</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n\\t\\t\\t\\t<span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_p<span class=\\"token operator\\">++</span> <span class=\\"token operator\\">:</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n\\t\\t\\t\\t<span class=\\"token expression\\"><span class=\\"token function\\">__swbuf</span><span class=\\"token punctuation\\">(</span></span><span class=\\"token char\\">'\\\\n'</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">,</span> p<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n\\t\\t\\t<span class=\\"token expression\\"><span class=\\"token function\\">__swbuf</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> p<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> </span><span class=\\"token punctuation\\">\\\\</span>\\n\\t\\t<span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_p <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_p<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">__sfeof</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_flags <span class=\\"token operator\\">&amp;</span> __SEOF<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">__sferror</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_flags <span class=\\"token operator\\">&amp;</span> __SERR<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">__sclearerr</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_flags <span class=\\"token operator\\">&amp;=</span> <span class=\\"token operator\\">~</span><span class=\\"token punctuation\\">(</span>__SERR<span class=\\"token operator\\">|</span>__SEOF<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">__sfileno</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span>_file<span class=\\"token punctuation\\">)</span></span></span>\\n\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">void</span>\\t <span class=\\"token function\\">flockfile</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">ftrylockfile</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span>\\t <span class=\\"token function\\">funlockfile</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">getc_unlocked</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">getchar_unlocked</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">putc_unlocked</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">putchar_unlocked</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">/* Removed in Issue 6 */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token operator\\">!</span><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_POSIX_C_SOURCE<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> _POSIX_C_SOURCE <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">200112L</span></span></span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">getw</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">putw</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n\\n<span class=\\"token function\\">__swift_unavailable</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Use mkstemp(3) instead.\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token operator\\">!</span><span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_POSIX_C_SOURCE<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token function\\">__deprecated_msg</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n<span class=\\"token keyword\\">char</span>\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">tempnam</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>__dir<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>__prefix<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__DARWIN_ALIAS</span><span class=\\"token punctuation\\">(</span>tempnam<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\">lint</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">getc_unlocked</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>fp<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token function\\">__sgetc</span><span class=\\"token punctuation\\">(</span>fp<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">putc_unlocked</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> fp<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token function\\">__sputc</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> fp<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* lint */</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">getchar_unlocked</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\t<span class=\\"token function\\">getc_unlocked</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">stdin</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">putchar_unlocked</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token function\\">putc_unlocked</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">stdout</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* __DARWIN_C_LEVEL &gt;= 199506L */</span></span>\\n\\n\\n\\n<span class=\\"token comment\\">/* Additional functionality provided by:\\n * POSIX.1-2001\\n * ISO C99\\n */</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">__DARWIN_C_LEVEL <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">200112L</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;sys/_types/_off_t.h&gt;</span></span>\\n\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fseeko</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __stream<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">off_t</span> __offset<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> __whence<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">off_t</span>\\t <span class=\\"token function\\">ftello</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __stream<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* __DARWIN_C_LEVEL &gt;= 200112L */</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">__DARWIN_C_LEVEL <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">200112L</span> <span class=\\"token operator\\">||</span> <span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>_C99_SOURCE<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token function\\">defined</span><span class=\\"token punctuation\\">(</span>__cplusplus<span class=\\"token punctuation\\">)</span></span></span>\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">snprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __str<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> __size<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __format<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">vfscanf</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span> __restrict __stream<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __format<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__scanflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">vscanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __format<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__scanflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">vsnprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __str<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> __size<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __format<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">vsscanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __str<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __format<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__scanflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* __DARWIN_C_LEVEL &gt;= 200112L || defined(_C99_SOURCE) || defined(__cplusplus) */</span></span>\\n\\n\\n\\n<span class=\\"token comment\\">/* Additional functionality provided by:\\n * POSIX.1-2008\\n */</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">__DARWIN_C_LEVEL <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">200809L</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;sys/_types/_ssize_t.h&gt;</span></span>\\n\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">int</span>\\t<span class=\\"token function\\">dprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__OSX_AVAILABLE_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_7<span class=\\"token punctuation\\">,</span> __IPHONE_4_3<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t<span class=\\"token function\\">vdprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__OSX_AVAILABLE_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_7<span class=\\"token punctuation\\">,</span> __IPHONE_4_3<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">ssize_t</span> <span class=\\"token function\\">getdelim</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span> __restrict __linep<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> <span class=\\"token operator\\">*</span> __restrict __linecapp<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> __delimiter<span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span> __restrict __stream<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__OSX_AVAILABLE_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_7<span class=\\"token punctuation\\">,</span> __IPHONE_4_3<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">ssize_t</span> <span class=\\"token function\\">getline</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span> __restrict __linep<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> <span class=\\"token operator\\">*</span> __restrict __linecapp<span class=\\"token punctuation\\">,</span> FILE <span class=\\"token operator\\">*</span> __restrict __stream<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__OSX_AVAILABLE_STARTING</span><span class=\\"token punctuation\\">(</span>__MAC_10_7<span class=\\"token punctuation\\">,</span> __IPHONE_4_3<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nFILE <span class=\\"token operator\\">*</span><span class=\\"token function\\">fmemopen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span> __restrict __buf<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> __size<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict __mode<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__API_AVAILABLE</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">macos</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10.13</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">ios</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11.0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">tvos</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11.0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">watchos</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4.0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nFILE <span class=\\"token operator\\">*</span><span class=\\"token function\\">open_memstream</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span>__bufp<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> <span class=\\"token operator\\">*</span>__sizep<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__API_AVAILABLE</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">macos</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10.13</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">ios</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11.0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">tvos</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11.0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">watchos</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4.0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* __DARWIN_C_LEVEL &gt;= 200809L */</span></span>\\n\\n\\n\\n<span class=\\"token comment\\">/* Darwin extensions */</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\">__DARWIN_C_LEVEL <span class=\\"token operator\\">&gt;=</span> __DARWIN_C_FULL</span></span>\\n__BEGIN_DECLS\\n<span class=\\"token keyword\\">extern</span> __const <span class=\\"token keyword\\">int</span> sys_nerr<span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">/* perror(3) external variables */</span>\\n<span class=\\"token keyword\\">extern</span> __const <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>__const sys_errlist<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">asprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">char</span>\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">ctermid_r</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">char</span>\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">fgetln</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__const <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token function\\">fmtcheck</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">fpurge</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span>\\t <span class=\\"token function\\">setbuffer</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">setlinebuf</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span>\\t <span class=\\"token function\\">vasprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span> __restrict<span class=\\"token punctuation\\">,</span> va_list<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">__printflike</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">zopen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token comment\\">/*\\n * Stdio function-access interface.\\n */</span>\\nFILE\\t<span class=\\"token operator\\">*</span><span class=\\"token function\\">funopen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span>\\n                 <span class=\\"token keyword\\">int</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> _Nullable<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n                 <span class=\\"token keyword\\">int</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> _Nullable<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n                 <span class=\\"token class-name\\">fpos_t</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> _Nullable<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">fpos_t</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n                 <span class=\\"token keyword\\">int</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> _Nullable<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n__END_DECLS\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">fropen</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>cookie<span class=\\"token punctuation\\">,</span> fn<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">funopen</span><span class=\\"token punctuation\\">(</span>cookie<span class=\\"token punctuation\\">,</span> fn<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">fwopen</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>cookie<span class=\\"token punctuation\\">,</span> fn<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">funopen</span><span class=\\"token punctuation\\">(</span>cookie<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> fn<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span></span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">feof_unlocked</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token function\\">__sfeof</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">ferror_unlocked</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token function\\">__sferror</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">clearerr_unlocked</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token function\\">__sclearerr</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span>\\t<span class=\\"token macro-name function\\">fileno_unlocked</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token function\\">__sfileno</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span></span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* __DARWIN_C_LEVEL &gt;= __DARWIN_C_FULL */</span></span>\\n\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifdef</span> <span class=\\"token expression\\">_USE_EXTENDED_LOCALES_</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;xlocale/_stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* _USE_EXTENDED_LOCALES_ */</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">if</span> <span class=\\"token expression\\"><span class=\\"token function\\">defined</span> <span class=\\"token punctuation\\">(</span>__GNUC__<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> _FORTIFY_SOURCE <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span><span class=\\"token function\\">defined</span> <span class=\\"token punctuation\\">(</span>__cplusplus<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token comment\\">/* Security checking functions.  */</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;secure/_stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">/* _STDIO_H_ */</span></span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};

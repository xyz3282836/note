import{_ as e,V as o,W as c,X as n,Y as a,Z as t,$ as p,C as i}from"./framework-7d796c00.js";const u={},l=p(`<h1 id="context-传递-kv" tabindex="-1"><a class="header-anchor" href="#context-传递-kv" aria-hidden="true">#</a> context 传递 kv</h1><h2 id="go-sdk-context包" tabindex="-1"><a class="header-anchor" href="#go-sdk-context包" aria-hidden="true">#</a> go sdk context包</h2><p>ctx 的 kv pair</p><p>提供了两个方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="grpc-go-metadata包" tabindex="-1"><a class="header-anchor" href="#grpc-go-metadata包" aria-hidden="true">#</a> grpc-go metadata包</h2><p>提供了传出和传入key定义</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mdIncomingKey <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">type</span> mdOutgoingKey <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b站metadata包" tabindex="-1"><a class="header-anchor" href="#b站metadata包" aria-hidden="true">#</a> B站metadata包</h2><p>大仓提供了metadata的定义</p>`,10),r={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},k={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},d=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// MD is a mapping from metadata keys to values.</span>
<span class="token keyword">type</span> MD <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">type</span> mdKey <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// rpc client 获取和塞入的 outgoing key</span>
<span class="token keyword">var</span> outgoingKey <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
	Color<span class="token punctuation">:</span>       <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	RemoteIP<span class="token punctuation">:</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	RemotePort<span class="token punctuation">:</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	Mirror<span class="token punctuation">:</span>      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	Criticality<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> incomingKey <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
	Caller<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	Zone<span class="token punctuation">:</span>   <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-server" tabindex="-1"><a class="header-anchor" href="#http-server" aria-hidden="true">#</a> http server</h3><p>bm server.go handlerContext 处理了ctx的kv，这样bff 网关接口内部通过内置的key可以获取相应的信息</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">handleContext</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	engine<span class="token punctuation">.</span><span class="token function">prepareHandler</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token keyword">if</span> sampled<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> engine<span class="token punctuation">.</span>statSampler<span class="token punctuation">.</span><span class="token function">IsSampled</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>RoutePath<span class="token punctuation">)</span><span class="token punctuation">;</span> sampled <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> <span class="token operator">&amp;</span>statBody<span class="token punctuation">{</span>
			ctx<span class="token punctuation">:</span>        c<span class="token punctuation">,</span>
			routePath<span class="token punctuation">:</span>  c<span class="token punctuation">.</span>RoutePath<span class="token punctuation">,</span>
			ReadCloser<span class="token punctuation">:</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		c<span class="token punctuation">.</span>Writer <span class="token operator">=</span> <span class="token operator">&amp;</span>statWriter<span class="token punctuation">{</span>
			ctx<span class="token punctuation">:</span>            c<span class="token punctuation">,</span>
			routePath<span class="token punctuation">:</span>      c<span class="token punctuation">.</span>RoutePath<span class="token punctuation">,</span>
			ResponseWriter<span class="token punctuation">:</span> c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> cancel <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	req <span class="token operator">:=</span> c<span class="token punctuation">.</span>Request
	ctype <span class="token operator">:=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>ctype<span class="token punctuation">,</span> <span class="token string">&quot;multipart/form-data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		req<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span>defaultMaxMemory<span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		req<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// get derived timeout from http request header,</span>
	<span class="token comment">// compare with the engine configured,</span>
	<span class="token comment">// and use the minimum one</span>
	engine<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	tm <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>engine<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span>
	engine<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// the method config is preferred</span>
	<span class="token keyword">if</span> pc <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">methodConfig</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>RoutePath<span class="token punctuation">)</span><span class="token punctuation">;</span> pc <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		tm <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> ctm <span class="token operator">:=</span> <span class="token function">timeout</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span> ctm <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tm <span class="token operator">&gt;</span> ctm <span class="token punctuation">{</span>
		tm <span class="token operator">=</span> ctm
	<span class="token punctuation">}</span>
	ipAddr <span class="token operator">:=</span> <span class="token function">remoteIP</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	ipPort <span class="token operator">:=</span> <span class="token function">remotePort</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	md <span class="token operator">:=</span> metadata<span class="token punctuation">.</span>MD<span class="token punctuation">{</span>
		metadata<span class="token punctuation">.</span>Color<span class="token punctuation">:</span>       <span class="token function">color</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span>
		metadata<span class="token punctuation">.</span>RemoteIP<span class="token punctuation">:</span>    ipAddr<span class="token punctuation">,</span>
		metadata<span class="token punctuation">.</span>RemotePort<span class="token punctuation">:</span>  ipPort<span class="token punctuation">,</span>
		metadata<span class="token punctuation">.</span>Caller<span class="token punctuation">:</span>      <span class="token function">caller</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span>
		metadata<span class="token punctuation">.</span>Mirror<span class="token punctuation">:</span>      <span class="token function">mirror</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span>
		metadata<span class="token punctuation">.</span>Criticality<span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>criticalityPkg<span class="token punctuation">.</span>Critical<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> crtl <span class="token operator">:=</span> <span class="token function">criticality</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span> crtl <span class="token operator">!=</span> criticalityPkg<span class="token punctuation">.</span>EmptyCriticality <span class="token punctuation">{</span>
		md<span class="token punctuation">[</span>metadata<span class="token punctuation">.</span>Criticality<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>crtl<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
  <span class="token comment">// 1.构建ctx，并且塞入md，metadata.mdKey =&gt; metadata.MD，底层调用go sdk下context.WithValue</span>
	ctx <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> md<span class="token punctuation">)</span>
  <span class="token comment">// 2.塞入networkKey</span>
	ctx <span class="token operator">=</span> netctx<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> netctx<span class="token punctuation">.</span>Network<span class="token punctuation">{</span>
		RemoteIP<span class="token punctuation">:</span>   ipAddr<span class="token punctuation">,</span>
		RemotePort<span class="token punctuation">:</span> ipPort<span class="token punctuation">,</span>
		WebcdnIP<span class="token punctuation">:</span>   req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;X-Cache-Server-Addr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> tm <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token comment">// 3.ctx 设置超时</span>
		c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cancel <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> tm<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 4.ctx 设置cacel</span>
		c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cancel <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),m={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},v=p(`<h3 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc" aria-hidden="true">#</a> grpc</h3><h4 id="client" tabindex="-1"><a class="header-anchor" href="#client" aria-hidden="true">#</a> client</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// handle returns a new unary client interceptor for OpenTracing\\Logging\\LinkTimeout.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> grpc<span class="token punctuation">.</span>UnaryClientInterceptor <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> method <span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cc <span class="token operator">*</span>grpc<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> invoker grpc<span class="token punctuation">.</span>UnaryInvoker<span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> <span class="token punctuation">(</span>
			ok     <span class="token builtin">bool</span>
			t      trace<span class="token punctuation">.</span>Trace
			gmd    metadata<span class="token punctuation">.</span>MD
			conf   <span class="token operator">*</span>ClientConfig
			cancel context<span class="token punctuation">.</span>CancelFunc
			addr   <span class="token builtin">string</span>
			p      peer<span class="token punctuation">.</span>Peer
		<span class="token punctuation">)</span>

		<span class="token comment">// apm tracing</span>
		<span class="token keyword">if</span> t<span class="token punctuation">,</span> ok <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">FromContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Fork</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			t <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>_gRPCComponentTag<span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>SpanKindClientTag<span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>TagMirror<span class="token punctuation">,</span> nmd<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> nmd<span class="token punctuation">.</span>Mirror<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">defer</span> grpc_trace<span class="token punctuation">.</span><span class="token function">FinishWithError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span>

		<span class="token comment">// 1.构建value grpc.metadata.MD</span>
		gmd <span class="token operator">=</span> <span class="token function">baseMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		trace<span class="token punctuation">.</span><span class="token function">Inject</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> trace<span class="token punctuation">.</span>GRPCFormat<span class="token punctuation">,</span> gmd<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> conf<span class="token punctuation">,</span> ok <span class="token operator">=</span> c<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Method<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			conf <span class="token operator">=</span> c<span class="token punctuation">.</span>conf
		<span class="token punctuation">}</span>
		c<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		brk <span class="token operator">:=</span> c<span class="token punctuation">.</span>breaker<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> brk<span class="token punctuation">.</span><span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			_metricClientReqCodeTotal<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">&quot;breaker&quot;</span><span class="token punctuation">,</span> <span class="token function">getPathFromTarget</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span><span class="token function">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">defer</span> <span class="token function">onBreaker</span><span class="token punctuation">(</span>brk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span>
		<span class="token keyword">var</span> timeOpt <span class="token operator">*</span>TimeoutCallOption
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> opts <span class="token punctuation">{</span>
			<span class="token keyword">var</span> tok <span class="token builtin">bool</span>
			timeOpt<span class="token punctuation">,</span> tok <span class="token operator">=</span> opt<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>TimeoutCallOption<span class="token punctuation">)</span>
			<span class="token keyword">if</span> tok <span class="token punctuation">{</span>
				<span class="token keyword">break</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> timeOpt <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> timeOpt<span class="token punctuation">.</span>Timeout <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			ctx<span class="token punctuation">,</span> cancel <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>xcontext<span class="token punctuation">.</span><span class="token function">Detach</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> timeOpt<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> cancel <span class="token operator">=</span> conf<span class="token punctuation">.</span>Timeout<span class="token punctuation">.</span><span class="token function">Shrink</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 2.获取上游ctx中key metadata.mdKey得到value metadata.MD(非grpc.metadata.MD)，value是个map，对于这个map的key string和metadata.outgoingKey做比对从而过滤，gmd是grpc.metadata.MD</span>
    <span class="token comment">// grpc.metadata.MD 是 map[string][]string</span>
    <span class="token comment">// metadata.MD 都是 map[string]interface{}</span>
		nmd<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>
			<span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> valstr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> valstr <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
					gmd<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>valstr<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			nmd<span class="token punctuation">.</span>IsOutgoingKey<span class="token punctuation">)</span>
    <span class="token comment">// 3.获取上游ctx中key grpc.metadata.mdOutgoingKey得到value grpc.metadata.MD</span>
		<span class="token keyword">if</span> oldmd<span class="token punctuation">,</span> ok <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">FromOutgoingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
      <span class="token comment">// 4.和3生成的MD做合并</span>
			gmd <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>gmd<span class="token punctuation">,</span> oldmd<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
    <span class="token comment">// 5.调用grpc-go底层方法，塞入key grpc.metadata.mdOutgoingKey和value grpc.metadata.MD</span>
		ctx <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">NewOutgoingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> gmd<span class="token punctuation">)</span>

		opts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">Peer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 6.发起grpc请求</span>
		err <span class="token operator">=</span> <span class="token function">invoker</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> method<span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>Addr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			addr <span class="token operator">=</span> p<span class="token punctuation">.</span>Addr<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> t <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>TagAddress<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">,</span> trace<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>TagComment<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},b={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},f=p(`<h4 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> server</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// handle return a new unary server interceptor for OpenTracing\\Logging\\LinkTimeout.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> grpc<span class="token punctuation">.</span>UnaryServerInterceptor <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args <span class="token operator">*</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">,</span> handler grpc<span class="token punctuation">.</span>UnaryHandler<span class="token punctuation">)</span> <span class="token punctuation">(</span>resp <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> <span class="token punctuation">(</span>
			cancel <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			addr   <span class="token builtin">string</span>
		<span class="token punctuation">)</span>
		s<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		conf <span class="token operator">:=</span> s<span class="token punctuation">.</span>conf
		s<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// get derived timeout from grpc context,</span>
		<span class="token comment">// compare with the warden configured,</span>
		<span class="token comment">// and use the minimum one</span>
		timeout <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span>
		<span class="token keyword">if</span> dl<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			ctimeout <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span>
			<span class="token keyword">if</span> ctimeout<span class="token operator">-</span>time<span class="token punctuation">.</span>Millisecond<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				ctimeout <span class="token operator">=</span> ctimeout <span class="token operator">-</span> time<span class="token punctuation">.</span>Millisecond<span class="token operator">*</span><span class="token number">2</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> timeout <span class="token operator">&gt;</span> ctimeout <span class="token punctuation">{</span>
				timeout <span class="token operator">=</span> ctimeout
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		ctx<span class="token punctuation">,</span> cancel <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
		<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment">// get grpc metadata(trace &amp; remote_ip &amp; color)</span>
		<span class="token keyword">var</span> t trace<span class="token punctuation">.</span>Trace
    <span class="token comment">// 1.初始化metadata.MD，cmd是服务创建的</span>
		cmd <span class="token operator">:=</span> nmd<span class="token punctuation">.</span>MD<span class="token punctuation">{</span><span class="token punctuation">}</span>
		cmd<span class="token punctuation">[</span>nmd<span class="token punctuation">.</span>FullMethod<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">.</span>FullMethod
    <span class="token comment">// 2.获取上游ctx中key grpc.metadata.mdIncomingKey得到value grpc.metadata.MD</span>
    <span class="token comment">// 不是client设置的key mdOutgoingKey ？</span>
    <span class="token comment">// gmd是grpc.metadata.MD，上游ctx中的</span>
		<span class="token keyword">if</span> gmd<span class="token punctuation">,</span> ok <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">FromIncomingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">Extract</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>GRPCFormat<span class="token punctuation">,</span> gmd<span class="token punctuation">)</span>
			<span class="token keyword">for</span> key<span class="token punctuation">,</span> vals <span class="token operator">:=</span> <span class="token keyword">range</span> gmd <span class="token punctuation">{</span>
        <span class="token comment">// 3.这里nmd是metadata.MD，nmd和gmd的key都是string，key比较，过滤了非（metadata.outgoingKey+metadata.ingoingKey），把gmd数据复制到cmd</span>
				<span class="token keyword">if</span> nmd<span class="token punctuation">.</span><span class="token function">IsIncomingKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					cmd<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
      <span class="token comment">// 4.这里重新调整cmd的color，上面已经遍历了gmd，但是做了过滤，包含颜色的key不在（metadata.outgoingKey+metadata.ingoingKey）中，所以要再次使用gmd获取</span>
			<span class="token function">reconcileColor</span><span class="token punctuation">(</span>gmd<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			t <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>FullMethod<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">SetTitle</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>FullMethod<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>_gRPCComponentTag<span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>SpanKindServerTag<span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span><span class="token function">TagString</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>TagMirror<span class="token punctuation">,</span> nmd<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> nmd<span class="token punctuation">.</span>Mirror<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span><span class="token function">TagInt</span><span class="token punctuation">(</span><span class="token string">&quot;server-throughput-in&quot;</span><span class="token punctuation">,</span> <span class="token function">messageSize</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// set BILI-TRACE-ID to response header, associate the misaka log</span>
		grpc<span class="token punctuation">.</span><span class="token function">SetTrailer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">Pairs</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>BiliTraceID<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">TraceID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		grpc<span class="token punctuation">.</span><span class="token function">SetTrailer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">Pairs</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>DeprecatedBiliTraceID<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">ShortTraceID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> pr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">FromContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			addr <span class="token operator">=</span> pr<span class="token punctuation">.</span>Addr<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span>TagAddress<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">defer</span> grpc_trace<span class="token punctuation">.</span><span class="token function">FinishWithError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span>
		<span class="token comment">// 5.构建ctx，把cmd设置到ctx中，metadata.mdKey =&gt; metadata.MD，底层调用go sdk下context.WithValue</span>
		<span class="token comment">// use common meta data context instead of grpc context</span>
		ctx <span class="token operator">=</span> nmd<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>
		ctx <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> t<span class="token punctuation">)</span>

		resp<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> status<span class="token punctuation">.</span><span class="token function">FromError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		t<span class="token punctuation">.</span><span class="token function">SetTag</span><span class="token punctuation">(</span>trace<span class="token punctuation">.</span><span class="token function">TagInt</span><span class="token punctuation">(</span><span class="token string">&quot;server-throughput-out&quot;</span><span class="token punctuation">,</span> <span class="token function">messageSize</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> resp<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},y={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},x=n("h3",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),a(" 总结")],-1),_={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},w={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},M={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},D={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},C={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},T=n("h3",{id:"案例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#案例","aria-hidden":"true"},"#"),a(" 案例")],-1),K=n("p",null,[a("调用链路："),n("strong",null,"apigw -> bff1 -> grpcs1 -> grpcs2")],-1),q=n("p",null,"bff1 ctx链路分析",-1),S={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"grpc.metadata.mdOutgoingKey",-1),P={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"grpc.metadata.mdOutgoingKey",-1),O={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,"grpcs1 ctx链路分析",-1),W=n("code",null,"grpc.metadata.mdIncomingKey",-1),N={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},B={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"grpc.metadata.mdOutgoingKey",-1),E={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"grpc.metadata.mdOutgoingKey",-1),U={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"grpcs2 ctx链路分析",-1),G=n("code",null,"grpc.metadata.mdIncomingKey",-1),H={href:"http://grpc.metadata.MD",target:"_blank",rel:"noopener noreferrer"},z={href:"http://metadata.MD",target:"_blank",rel:"noopener noreferrer"},X=n("li",null,[n("p",null,"逻辑处理")],-1);function Z(j,J){const s=i("ExternalLinkIcon");return o(),c("div",null,[l,n("p",null,[a("ctx 存储kv：metadata.mdKey=>"),n("a",r,[a("metadata.MD"),t(s)])]),n("p",null,[n("a",k,[a("metadata.MD"),t(s)]),a(" 存储的map的key比对metadata.outgoingKey和metadata.incomingKey")]),d,n("p",null,[a("ctx 塞入 metadata.mdKey => "),n("a",m,[a("metadata.MD"),t(s)])]),v,n("p",null,[a("client端调用下游grpc服务时，合并ctx中的metadata.mdKey => metadata.MD和grpc.metadata.mdOutgoingKey => value "),n("a",g,[a("grpc.metadata.MD"),t(s)]),a("，并且构建新的塞入ctx中grpc.metadata.mdOutgoingKey => "),n("a",b,[a("grpc.metadata.MD"),t(s)])]),f,n("p",null,[a("server端处理上游grpc请求时，合并ctx中grpc.metadata.mdIncomingKey => "),n("a",h,[a("grpc.metadata.MD"),t(s)]),a("，并且构建新的塞入ctx中metadata.mdKey => "),n("a",y,[a("metadata.MD"),t(s)])]),x,n("blockquote",null,[n("ol",null,[n("li",null,[a("http server端ctx塞入 metadata.mdKey => "),n("a",_,[a("metadata.MD"),t(s)])]),n("li",null,[a("grpc client端调用下游grpc服务时，合并ctx中的metadata.mdKey => metadata.MD和grpc.metadata.mdOutgoingKey => value "),n("a",w,[a("grpc.metadata.MD"),t(s)]),a("，并且构建新的塞入ctx中grpc.metadata.mdOutgoingKey => "),n("a",M,[a("grpc.metadata.MD"),t(s)])]),n("li",null,[a("grpc server端处理上游grpc请求时，合并ctx中grpc.metadata.mdIncomingKey => "),n("a",D,[a("grpc.metadata.MD"),t(s)]),a("，并且构建新的塞入ctx中metadata.mdKey => "),n("a",C,[a("metadata.MD"),t(s)])])])]),T,K,q,n("ol",null,[n("li",null,[a("从req获取metadata信息，往ctx塞入metadata.mdKey => "),n("a",S,[a("metadata.MD"),t(s)])]),n("li",null,[a("调用grpcs1，合并1中的metadata.mdKey => metadata.MD和"),I,a(" => value "),n("a",P,[a("grpc.metadata.MD"),t(s)]),a("，构建新的塞入ctx中"),R,a(" => "),n("a",O,[a("grpc.metadata.MD"),t(s)])])]),F,n("ol",null,[n("li",null,[a("处理grpc请求，合并ctx中"),W,a(" => "),n("a",N,[a("grpc.metadata.MD"),t(s)]),a("，并且构建新的塞入ctx中metadata.mdKey => "),n("a",B,[a("metadata.MD"),t(s)])]),n("li",null,[a("调用grpcs2，合并1中的metadata.mdKey => metadata.MD和"),A,a(" => value "),n("a",E,[a("grpc.metadata.MD"),t(s)]),a("，构建新的塞入ctx中"),L,a(" => "),n("a",U,[a("grpc.metadata.MD"),t(s)])])]),V,n("ol",null,[n("li",null,[n("p",null,[a("处理grpc请求，合并ctx中"),G,a(" => "),n("a",H,[a("grpc.metadata.MD"),t(s)]),a("，并且构建新的塞入ctx中metadata.mdKey => "),n("a",z,[a("metadata.MD"),t(s)])])]),X])])}const $=e(u,[["render",Z],["__file","ctx-kv.html.vue"]]);export{$ as default};

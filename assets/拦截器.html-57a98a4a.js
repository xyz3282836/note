const e=JSON.parse('{"key":"v-0b9cd25e","path":"/source-code/bilibili-kratos/grpc/%E6%8B%A6%E6%88%AA%E5%99%A8.html","title":"拦截器","lang":"zh-CN","frontmatter":{"description":"拦截器 说明 gRPC 暴露了两个拦截器接口，分别是： grpc.UnaryServerInterceptor服务端拦截器 grpc.UnaryClientInterceptor客户端拦截器 基于两个拦截器可以针对性的定制公共模块的封装代码，比如warden/logging.go是通用日志逻辑。 分析 服务端拦截器 让我们先看一下grpc.UnaryServerInterceptor的声明，官方代码位置：","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/source-code/bilibili-kratos/grpc/%E6%8B%A6%E6%88%AA%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"拦截器"}],["meta",{"property":"og:description","content":"拦截器 说明 gRPC 暴露了两个拦截器接口，分别是： grpc.UnaryServerInterceptor服务端拦截器 grpc.UnaryClientInterceptor客户端拦截器 基于两个拦截器可以针对性的定制公共模块的封装代码，比如warden/logging.go是通用日志逻辑。 分析 服务端拦截器 让我们先看一下grpc.UnaryServerInterceptor的声明，官方代码位置："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拦截器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[{"level":3,"title":"服务端拦截器","slug":"服务端拦截器","link":"#服务端拦截器","children":[]},{"level":3,"title":"客户端拦截器","slug":"客户端拦截器","link":"#客户端拦截器","children":[]},{"level":3,"title":"实现自己的拦截器","slug":"实现自己的拦截器","link":"#实现自己的拦截器","children":[]}]},{"level":2,"title":"内置拦截器","slug":"内置拦截器","link":"#内置拦截器","children":[{"level":3,"title":"自适应限流拦截器","slug":"自适应限流拦截器","link":"#自适应限流拦截器","children":[]}]},{"level":2,"title":"reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":7.78,"words":2335},"filePathRelative":"source-code/bilibili-kratos/grpc/拦截器.md","localizedDate":"2023年3月11日","excerpt":"<h1> 拦截器</h1>\\n<h2> 说明</h2>\\n<p>gRPC 暴露了两个拦截器接口，分别是：</p>\\n<ul>\\n<li><code>grpc.UnaryServerInterceptor</code>服务端拦截器</li>\\n<li><code>grpc.UnaryClientInterceptor</code>客户端拦截器</li>\\n</ul>\\n<p>基于两个拦截器可以针对性的定制公共模块的封装代码，比如<code>warden/logging.go</code>是通用日志逻辑。</p>\\n<h2> 分析</h2>\\n<h3> 服务端拦截器</h3>\\n<p>让我们先看一下<code>grpc.UnaryServerInterceptor</code>的声明，<a href=\\"https://github.com/grpc/grpc-go/blob/master/interceptor.go\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官方代码位置</a>：</p>","autoDesc":true}');export{e as data};

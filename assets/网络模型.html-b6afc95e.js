const t=JSON.parse('{"key":"v-0bad70d8","path":"/raw/unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.html","title":"网络模型","lang":"zh-CN","frontmatter":{"description":"Reactor模型 Reactor 模式本质上指的是使用 I/O 多路复用(I/O multiplexing) + 非阻塞 I/O(non-blocking I/O) 的模式 通常设置一个主线程负责做 event-loop 事件循环和 I/O 读写，通过 select/poll/epollwait 等系统调用监听 I/O 事件，业务逻辑提交给其他工作线...","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/raw/unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"网络模型"}],["meta",{"property":"og:description","content":"Reactor模型 Reactor 模式本质上指的是使用 I/O 多路复用(I/O multiplexing) + 非阻塞 I/O(non-blocking I/O) 的模式 通常设置一个主线程负责做 event-loop 事件循环和 I/O 读写，通过 select/poll/epollwait 等系统调用监听 I/O 事件，业务逻辑提交给其他工作线..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-19T14:45:43.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-19T14:45:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-19T14:45:43.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1676817943000,"updatedTime":1676817943000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"raw/unix环境高级编程/网络模型.md","localizedDate":"2023年2月19日","autoDesc":true}');export{t as data};

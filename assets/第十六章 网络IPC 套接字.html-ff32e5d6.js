import{_ as s,X as n,Y as a,Z as e}from"./framework-5a8052d6.js";const t={},p=e(`<h1 id="第十六章-网络-ipc-套接字" tabindex="-1"><a class="header-anchor" href="#第十六章-网络-ipc-套接字" aria-hidden="true">#</a> 第十六章 网络 IPC 套接字</h1><h2 id="套接字描述" tabindex="-1"><a class="header-anchor" href="#套接字描述" aria-hidden="true">#</a> 套接字描述</h2><p>套接字是通信端点的抽象</p><p><strong>套接字描述符</strong>：正如使用文件描述符访问文件，应用程序用套接字描述符访问套接字</p><p>套接字描述符在 UNIX 系统中被当作是一种文件描述符</p><p>许多处理文件描述符的 函数（如 read 和 write）可以用于处理套接字描述符</p><p>为创建一个套接字，调用 socket 函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span><span class="token keyword">int</span> type<span class="token punctuation">,</span><span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 domain（域）确定通信的特性</p><p>AF_INET IPv4</p><p>AF_INET6 IPv6</p><p>AF_UNIX 别名 AF_LOCAL unix 域</p><p>AF_UPSPEC</p><p>参数 type 确定套接字的类型，进一步确定通信特征</p><p>SOCK_DGRAM 默认 UDP 无连接 报文</p><p>SOCK_RAW 直接访问下面的网络层 应用程序负责构造自己的协议头部，这是因为传输协议（如 TCP 和 UDP） 被绕过了</p><p>SOCK_SEQPACKET 面向连接 报文</p><p>SOCK_STREAM 默认 tcp 面向连接 字节流</p><p>参数 protocol 通常是 0，表示为给定的域和套接字类型选择默认协议</p><p>当对同一域和套接字 类型支持多个协议时，可以使用 protocol 选择一个特定协议</p><p>因特网域套接字定义的协议：</p><p>IPPROTO_IP IPv4</p><p>IPPROTO_IPV6 IPv6</p><p>IPPROTO_ICMP</p><p>IPPROTO_RAW</p><p>IPPROTO_TCP tcp</p><p>IPPROTO_UDP udp</p><p>套接字通信是双向的。可以采用 shutdown 函数来禁止一个套接字的 I/O</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">int</span> flow<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 how 是 SHUT_RD（关闭读端），那么无法从套接字读取数据。 如果 how 是 SHUT_WR（关闭写 端），那么无法使用套接字发送数据。 如果 how 是 SHUT_RDWR，则既无法读取数据，又无法发送数据</p><h2 id="寻址" tabindex="-1"><a class="header-anchor" href="#寻址" aria-hidden="true">#</a> 寻址</h2><p>进程标识：计算机的网络地址 + 计算机上用端口号表示的服务</p><h3 id="字节序" tabindex="-1"><a class="header-anchor" href="#字节序" aria-hidden="true">#</a> 字节序</h3><p>big-endian：最大字节地址出现在最低有效字节</p><p>little-endian：最低有效字节包含最小字节地址</p><p>不管字节如何排序，最高有效字节总是在左边 msb，最低有效字节总是在右边 lsb</p><p>0x04030201：msb 包含 4，lsb 包含 1</p><p>大端 cp 来存，cp[0]=4</p><p>小端 cp 来存，cp[0]=1</p><p>网络协议指定了字节序，TCP/IP 协议栈使用大端字节序</p><p>对于 TCP/IP 应用程序，有 4 个用来在处理器字节序和网络字节序之间实施转换的函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token class-name">uint32_t</span> <span class="token function">htonl</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> hostint32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值：以网络字节序表示的 32 位整数</span>
<span class="token class-name">uint16_t</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> hostint16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值：以网络字节序表示的 16 位整数</span>
<span class="token class-name">uint32_t</span> <span class="token function">ntohl</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> netint32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值：以主机字节序表示的 32 位整数</span>
<span class="token class-name">uint16_t</span> <span class="token function">ntohs</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> netint16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值：以主机字节序表示的 16 位整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>h 表示“主机”字节序，n 表示“网络”字节序。l 表示“长”（即 4 字节）整数，s 表示“短” （即 4 字节）整数</p><h3 id="地址格式" tabindex="-1"><a class="header-anchor" href="#地址格式" aria-hidden="true">#</a> 地址格式</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>为使不同格式地址能够传入到套接字函数，地址会被强制转换成一个通用的地址结构 sockaddr
<span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">{</span>
    <span class="token class-name">sa_family_t</span> sa_family<span class="token punctuation">;</span>
    <span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//linux sa_data[14];</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
在 IPv4 因特网域（AF_INET）中，套接字 地址用结构 sockaddr_in 表示
<span class="token keyword">struct</span> <span class="token class-name">socketaddr_in</span><span class="token punctuation">{</span>
	<span class="token class-name">sa_family_t</span> sin_family<span class="token punctuation">;</span>
	<span class="token class-name">in_port_t</span> sin_port<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">in_addr</span><span class="token punctuation">{</span>
	<span class="token class-name">in_addr_t</span> s_addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
与 AF_INET 域相比较，IPv6 因特网域（AF_INET6）套接字地址用结构 sockaddr_in6 表示
<span class="token keyword">struct</span> <span class="token class-name">socketaddr_in6</span><span class="token punctuation">{</span>
	<span class="token class-name">sa_family_t</span> sin6_family<span class="token punctuation">;</span>
	<span class="token class-name">in_port_t</span> sin6_port<span class="token punctuation">;</span>
	<span class="token class-name">uint32_t</span> sin6_flowinfo<span class="token punctuation">;</span>
	<span class="token class-name">uint32_t</span> sin6_scope_id<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">in6_addr</span> sin6_addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">in6_addr</span><span class="token punctuation">{</span>
	<span class="token class-name">uint8_t</span> s6_addr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管 <strong>sockaddr_in</strong> 与 <strong>sockaddr_in6</strong> 结构相差比较大，但它们均被强制转换成 <strong>sockaddr</strong> 结构输入到套接字例程中</p><p>二进制地址格式与点分十进制字符表示（a.b.c.d）之间的相互转换的两个函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">inet_ntop</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>restrict addr<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>restrict str<span class="token punctuation">,</span><span class="token class-name">socketlen_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">inet_pton</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict str<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>restrict addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 domain 仅支持两个值：AF_INET 和 AF_INET6</p><h3 id="地址查询" tabindex="-1"><a class="header-anchor" href="#地址查询" aria-hidden="true">#</a> 地址查询</h3><p>通过调用 gethostent，可以找到给定计算机系统的主机信息</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token keyword">struct</span> <span class="token class-name">hostent</span> <span class="token operator">*</span><span class="token function">gethostent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sethostent</span><span class="token punctuation">(</span><span class="token keyword">int</span> stayopen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">endhostent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
计算机系统的主机信息
<span class="token keyword">struct</span> <span class="token class-name">hostent</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>能够采用一套相似的接口来获得网络名字和网络编号</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token keyword">struct</span> <span class="token class-name">netent</span> <span class="token operator">*</span><span class="token function">getnetbyaddr</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> net<span class="token punctuation">,</span><span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">netent</span> <span class="token operator">*</span><span class="token function">getnetbyname</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">netent</span> <span class="token operator">*</span><span class="token function">getnetent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">setnetent</span><span class="token punctuation">(</span><span class="token keyword">int</span> stayopen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">endnetent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
网络名字和网络编号
<span class="token keyword">struct</span> <span class="token class-name">netent</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用以下函数在协议名字和协议编号之间进行映射</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token keyword">struct</span> <span class="token class-name">protoent</span> <span class="token operator">*</span><span class="token function">getprotobyname</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">protoent</span> <span class="token operator">*</span><span class="token function">getprotobynumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">protoent</span> <span class="token operator">*</span><span class="token function">getprotoent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setprotoent</span><span class="token punctuation">(</span><span class="token keyword">int</span> stayopen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">endprotoent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
协议
<span class="token keyword">struct</span> <span class="token class-name">protoent</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以 使用函数 getservbyname 将一个服务名映射到一个端口号，使用函数 getservbyport 将一 个端口号映射到一个服务名，使用函数 getservent 顺序扫描服务数据库。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token keyword">struct</span> <span class="token class-name">servent</span> <span class="token operator">*</span><span class="token function">getservbyname</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">servent</span> <span class="token operator">*</span><span class="token function">getserbyport</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">servent</span> <span class="token operator">*</span><span class="token function">getservent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setservent</span><span class="token punctuation">(</span><span class="token keyword">int</span> stayopen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">endservent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
服务名
<span class="token keyword">struct</span> <span class="token class-name">servent</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getaddrinfo 函数允许将一个主机名和一个服务名映射到一个地址</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict host<span class="token punctuation">,</span>
				<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict service<span class="token punctuation">,</span>
				<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>restrict hint<span class="token punctuation">,</span>
				<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span><span class="token operator">*</span>restrict res<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>ai<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ai_flags<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ai_family<span class="token punctuation">;</span><span class="token comment">// domain 域</span>
    <span class="token keyword">int</span> ai_socktype<span class="token punctuation">;</span><span class="token comment">//类型</span>
    <span class="token keyword">int</span> ai_protocol<span class="token punctuation">;</span><span class="token comment">//协议</span>
    <span class="token class-name">socklen_t</span> ai_addrlen<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>ai_addr<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ai_canonname<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>ai_next<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以提供一个可选的 hint 来选择符合特定条件的地址。hint 是一个用于过滤地址的模板，包 括 ai_family、ai_flags、ai_protocol 和 ai_socktype 字段</p><p>getnameinfo 函数将一个地址转换成一个主机名和一个服务名</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">getnameinfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>restrict addr<span class="token punctuation">,</span>
                <span class="token class-name">socklen_t</span> alen<span class="token punctuation">,</span>
				<span class="token keyword">char</span> <span class="token operator">*</span>restrict host<span class="token punctuation">,</span>
                <span class="token class-name">socklen_t</span> hostlen<span class="token punctuation">,</span>
				<span class="token keyword">char</span> <span class="token operator">*</span>restrict service<span class="token punctuation">,</span>
                <span class="token class-name">socklen_t</span> servlen<span class="token punctuation">,</span>
                <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="套接字与地址关联" tabindex="-1"><a class="header-anchor" href="#套接字与地址关联" aria-hidden="true">#</a> 套接字与地址关联</h3><p>给一个接收客户端请求的服务器套接字关联上一个众所周知的地址</p><p>客户端应 有一种方法来发现连接服务器所需要的地址，最简单的方法就是服务器保留一个地址并且注册在 /etc/services 或者某个名字服务中</p><p>使用 bind 函数来关联地址和套接字</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以调用 getsockname 函数来发现绑定到套接字上的地址</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">getsockname</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>restrict addr<span class="token punctuation">,</span><span class="token class-name">socklen_t</span> <span class="token operator">*</span>restrict alenp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">getpeername</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>restrict addr<span class="token punctuation">,</span><span class="token class-name">socklen_t</span> <span class="token operator">*</span>restrict alenp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="建立连接" tabindex="-1"><a class="header-anchor" href="#建立连接" aria-hidden="true">#</a> 建立连接</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token class-name">socket_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器调用 listen 函数来宣告它愿意接受连接请求。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 backlog 提供了一个提示，提示系统该进程所要入队的未完成连接请求数量</p><p>一旦服务器调用了 listen，所用的套接字就能接收连接请求。使用 accept 函数获得连接 请求并建立连接</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockefd<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">socketaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token class-name">socklen_t</span> <span class="token operator">*</span>restrict len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 accept 所返回的文件描述符是套接字描述符，该描述符连接到调用 connect 的客户端</p><p>这个新的套接字描述符和原始套接字（sockfd）具有相同的套接字类型和地址族</p><p>传给 accept 的原始套接字没有关联到这个连接，而是继续保持可用状态并接收其他连接请求</p><p>返回时，accept 会在缓冲区填充客户端的地址，并且更新指向 len 的整数来反映该地址的大小</p><p>如果没有连接请求在等待，accept 会阻塞直到一个请求到来。如果 sockfd 处于非阻塞模式， accept 会返回 −1，并将 errno 设置为 EAGAIN 或 EWOULDBLOCK</p><h2 id="数据传输" tabindex="-1"><a class="header-anchor" href="#数据传输" aria-hidden="true">#</a> 数据传输</h2><p>尽管可以通过 read 和 write 交换数据，但这就是这两个函数所能做的一切</p><p>3 个函数用来发送数据，3 个用于接收数据</p><p>最简单的是 send，它和 write 很像，但是可以指定标志来改变处理传输数据的方式</p><p>对于字节流协议，send 会阻塞直到整个数据传 输完成。函数 sendto 和 send 很类似。区别在于 sendto 可以在无连接的套接字上指定一个目 标地址</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> nbytes<span class="token punctuation">,</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>destaddr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> destlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过套接字发送数据时，还有一个选择。可以调用带有 msghdr 结构的 sendmsg 来指定多 重缓冲区传输数据，这和 writev 函数很相似</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">sendmsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 recv 和 read 相似，但是 recv 可以指定标志来控制如何接收数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">recv</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> nbytes<span class="token punctuation">,</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>restrict addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>restrict addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//因为可以获得发送者的地址，recvfrom 通常用于无连接的套接字。否则，recvfrom 等同于recv</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了将接收到的数据送入多个缓冲区，类似于 readv，或者想接收辅助数据，可以使用 recvmsg</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">recvmsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="套接字选项" tabindex="-1"><a class="header-anchor" href="#套接字选项" aria-hidden="true">#</a> 套接字选项</h2><p>套接字机制提供了两个套接字选项接口来控制套接字行为</p><ol><li>通用选项，工作在所有套接字类型上</li><li>在套接字层次管理的选项</li><li>特定于某协议的选项</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> option<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">getsockopt</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> option<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>restrict val<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>restrict lenp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 level 标识了选项应用的协议</p><h2 id="带外数据" tabindex="-1"><a class="header-anchor" href="#带外数据" aria-hidden="true">#</a> 带外数据</h2><p>TCP 支持带外数 据，但是 UDP 不支持</p>`,101),c=[p];function o(l,i){return n(),a("div",null,c)}const r=s(t,[["render",o],["__file","第十六章 网络IPC 套接字.html.vue"]]);export{r as default};

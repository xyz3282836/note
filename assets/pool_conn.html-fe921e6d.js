import{_ as n,W as s,X as a,Y as t}from"./framework-3ab8bde0.js";const p={},o=t(`<h1 id="pool-conn" tabindex="-1"><a class="header-anchor" href="#pool-conn" aria-hidden="true">#</a> pool_conn</h1><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Pool memcache connection pool struct.</span>
<span class="token keyword">type</span> Pool <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	p pool<span class="token punctuation">.</span>Pool <span class="token comment">// 连接池的interface</span>
	c <span class="token operator">*</span>Config
<span class="token punctuation">}</span>

<span class="token comment">// poolConn实现了memcache.go 的 Conn</span>
<span class="token keyword">type</span> poolConn <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	c   Conn
	p   <span class="token operator">*</span>Pool
	ctx context<span class="token punctuation">.</span>Context
<span class="token punctuation">}</span>

<span class="token comment">// Pool提供get方法返回poolConn也就是Conn interface的实现，返回了一个链接</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pool<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> Conn <span class="token punctuation">{</span>
	c<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	p<span class="token punctuation">.</span><span class="token function">connStat</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errConn<span class="token punctuation">{</span>err<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	c1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span>Conn<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>poolConn<span class="token punctuation">{</span>p<span class="token punctuation">:</span> p<span class="token punctuation">,</span> c<span class="token punctuation">:</span> c1<span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> ctx<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 连接池的实现pool.NewList，其中 conn.go中的Dial也就是连接池的New</span>
<span class="token keyword">func</span> <span class="token function">NewPool</span><span class="token punctuation">(</span>cfg <span class="token operator">*</span>Config<span class="token punctuation">)</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> cfg<span class="token punctuation">.</span>DialTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> cfg<span class="token punctuation">.</span>ReadTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> cfg<span class="token punctuation">.</span>WriteTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;must config memcache timeout&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	p1 <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">NewList</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
	cnop <span class="token operator">:=</span> <span class="token function">DialConnectTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>DialTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
	rdop <span class="token operator">:=</span> <span class="token function">DialReadTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
	wrop <span class="token operator">:=</span> <span class="token function">DialWriteTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>WriteTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
	p1<span class="token punctuation">.</span>New <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>io<span class="token punctuation">.</span>Closer<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">Dial</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>Proto<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>Addr<span class="token punctuation">,</span> cnop<span class="token punctuation">,</span> rdop<span class="token punctuation">,</span> wrop<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">newTraceConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s://%s&quot;</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>Proto<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>Addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	p <span class="token operator">=</span> <span class="token operator">&amp;</span>Pool<span class="token punctuation">{</span>p<span class="token punctuation">:</span> p1<span class="token punctuation">,</span> c<span class="token punctuation">:</span> cfg<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),c=[o];function e(u,i){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","pool_conn.html.vue"]]);export{k as default};

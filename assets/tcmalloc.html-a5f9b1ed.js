const l=JSON.parse('{"key":"v-9fdd33a2","path":"/linux/malloc/tcmalloc.html","title":"pcmalloc vs tcmalloc","lang":"zh-CN","frontmatter":{"description":"pcmalloc vs tcmalloc tcmalloc tcmalloc 使用细颗粒度的高效自旋锁，ptmalloc2 使用 per-thread arenas tcmalloc 每个线程分配一个本地线程缓存，小的分配直接放在里面；对象可以从中心堆移动到本地线程缓存，并且周期行进行 gc，将内存从本地线程缓存移动到中心缓存。 tcmalloc 对应小于 32K 的小对象和大对象处理方式不同。大对象使用中心堆，通过页分配器（一页 4K，通常是一些列的页）。 一些列的页分割成大小相同的小对象，如一页 4K 可以分成 32 个 128 字节对象。","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/linux/malloc/tcmalloc.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"pcmalloc vs tcmalloc"}],["meta",{"property":"og:description","content":"pcmalloc vs tcmalloc tcmalloc tcmalloc 使用细颗粒度的高效自旋锁，ptmalloc2 使用 per-thread arenas tcmalloc 每个线程分配一个本地线程缓存，小的分配直接放在里面；对象可以从中心堆移动到本地线程缓存，并且周期行进行 gc，将内存从本地线程缓存移动到中心缓存。 tcmalloc 对应小于 32K 的小对象和大对象处理方式不同。大对象使用中心堆，通过页分配器（一页 4K，通常是一些列的页）。 一些列的页分割成大小相同的小对象，如一页 4K 可以分成 32 个 128 字节对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:author","content":"rz"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pcmalloc vs tcmalloc\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"rz\\",\\"url\\":\\"https://github.com/xyz3282836/monodoc\\"}]}"]]},"headers":[{"level":2,"title":"tcmalloc","slug":"tcmalloc","link":"#tcmalloc","children":[{"level":3,"title":"小对象分配","slug":"小对象分配","link":"#小对象分配","children":[]},{"level":3,"title":"大对象分配","slug":"大对象分配","link":"#大对象分配","children":[]},{"level":3,"title":"span","slug":"span","link":"#span","children":[]},{"level":3,"title":"内存回收","slug":"内存回收","link":"#内存回收","children":[]}]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":0.6,"words":181},"filePathRelative":"linux/malloc/tcmalloc.md","localizedDate":"2023年3月11日","excerpt":"<h1> pcmalloc vs tcmalloc</h1>\\n<h2> tcmalloc</h2>\\n<p>tcmalloc 使用细颗粒度的高效自旋锁，ptmalloc2 使用 per-thread arenas</p>\\n<p>tcmalloc 每个线程分配一个本地线程缓存，小的分配直接放在里面；对象可以从中心堆移动到本地线程缓存，并且周期行进行 gc，将内存从本地线程缓存移动到中心缓存。</p>\\n<p>tcmalloc 对应小于 32K 的小对象和大对象处理方式不同。大对象使用中心堆，通过页分配器（一页 4K，通常是一些列的页）。</p>\\n<p>一些列的页分割成大小相同的小对象，如一页 4K 可以分成 32 个 128 字节对象。</p>","autoDesc":true}');export{l as data};

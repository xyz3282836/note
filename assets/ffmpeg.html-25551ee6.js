import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,a as n}from"./app-08e26ff4.js";const i={},p=n(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>介绍 FFmpeg 用法之前，需要了解一些视频处理的基本概念。</p><h3 id="_1-1-容器" tabindex="-1"><a class="header-anchor" href="#_1-1-容器" aria-hidden="true">#</a> 1.1 容器</h3><p>视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容。</p><p>常见的容器格式有以下几种。一般来说，视频文件的后缀名反映了它的容器格式。</p><blockquote><ul><li>MP4</li><li>MKV</li><li>WebM</li><li>AVI</li></ul></blockquote><p>下面的命令查看 FFmpeg 支持的容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-formats</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-编码格式" tabindex="-1"><a class="header-anchor" href="#_1-2-编码格式" aria-hidden="true">#</a> 1.2 编码格式</h3><p>视频和音频都需要经过编码，才能保存成文件。不同的编码格式（CODEC），有不同的压缩率，会导致文件大小和清晰度的差异。</p><p>常用的视频编码格式如下。</p><blockquote><ul><li>H.262</li><li>H.264</li><li>H.265</li></ul></blockquote><p>上面的编码格式都是有版权的，但是可以免费使用。此外，还有几种无版权的视频编码格式。</p><blockquote><ul><li>VP8</li><li>VP9</li><li>AV1</li></ul></blockquote><p>常用的音频编码格式如下。</p><blockquote><ul><li>MP3</li><li>AAC</li></ul></blockquote><p>上面所有这些都是有损的编码格式，编码后会损失一些细节，以换取压缩后较小的文件体积。无损的编码格式压缩出来的文件体积较大，这里就不介绍了。</p><p>下面的命令可以查看 FFmpeg 支持的编码格式，视频编码和音频编码都在内。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-codecs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-编码器" tabindex="-1"><a class="header-anchor" href="#_1-3-编码器" aria-hidden="true">#</a> 1.3 编码器</h3><p>编码器（encoders）是实现某种编码格式的库文件。只有安装了某种格式的编码器，才能实现该格式视频/音频的编码和解码。</p><p>以下是一些 FFmpeg 内置的视频编码器。</p><blockquote><ul><li>libx264：最流行的开源 H.264 编码器</li><li>NVENC：基于 NVIDIA GPU 的 H.264 编码器</li><li>libx265：开源的 HEVC 编码器</li><li>libvpx：谷歌的 VP8 和 VP9 编码器</li><li>libaom：AV1 编码器</li></ul></blockquote><p>音频编码器如下。</p><blockquote><ul><li>libfdk-aac</li><li>aac</li></ul></blockquote><p>下面的命令可以查看 FFmpeg 已安装的编码器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-encoders</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ffmpeg-的使用格式" tabindex="-1"><a class="header-anchor" href="#ffmpeg-的使用格式" aria-hidden="true">#</a> FFmpeg 的使用格式</h2><p>FFmpeg 的命令行参数非常多，可以分成五个部分。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token parameter variable">-i</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令中，五个部分的参数依次如下。</p><blockquote><ol><li>全局参数</li><li>输入文件参数</li><li>输入文件</li><li>输出文件参数</li><li>输出文件</li></ol></blockquote><p>参数太多的时候，为了便于查看，ffmpeg 命令可以写成多行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token punctuation">[</span>全局参数<span class="token punctuation">]</span> <span class="token punctuation">\\</span>
<span class="token punctuation">[</span>输入文件参数<span class="token punctuation">]</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-i</span> <span class="token punctuation">[</span>输入文件<span class="token punctuation">]</span> <span class="token punctuation">\\</span>
<span class="token punctuation">[</span>输出文件参数<span class="token punctuation">]</span> <span class="token punctuation">\\</span>
<span class="token punctuation">[</span>输出文件<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个例子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token parameter variable">-y</span> <span class="token punctuation">\\</span> <span class="token comment"># 全局参数</span>
<span class="token parameter variable">-c:a</span> libfdk_aac <span class="token parameter variable">-c:v</span> libx264 <span class="token punctuation">\\</span> <span class="token comment"># 输入文件参数</span>
<span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\\</span> <span class="token comment"># 输入文件</span>
<span class="token parameter variable">-c:v</span> libvpx-vp9 <span class="token parameter variable">-c:a</span> libvorbis <span class="token punctuation">\\</span> <span class="token comment"># 输出文件参数</span>
output.webm <span class="token comment"># 输出文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令将 mp4 文件转成 webm 文件，这两个都是容器格式。输入的 mp4 文件的音频编码格式是 aac，视频编码格式是 H.264；输出的 webm 文件的视频编码格式是 VP9，音频格式是 Vorbis。</p><p>如果不指明编码格式，FFmpeg 会自己判断输入文件的编码。因此，上面的命令可以简单写成下面的样子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-i</span> input.avi output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="brew-安装" tabindex="-1"><a class="header-anchor" href="#brew-安装" aria-hidden="true">#</a> brew 安装</h2><p>Fetching dependencies for ffmpeg: <code>highway, imath, jpeg-turbo, zstd, openexr, jpeg-xl, aom, aribb24, dav1d, freetype, frei0r, libtasn1, nettle, p11-kit, openssl@1.1, libnghttp2, unbound, gnutls, lame, glib, libxcb, libx11, harfbuzz, libunibreak, libass, libbluray, cjson, mbedtls, librist, libsoxr, libvidstab, libogg, libvorbis, libvpx, opencore-amr, openjpeg, opus, rav1e, libsamplerate, flac, mpg123, libsndfile, rubberband, sdl2, snappy, speex, srt, svt-av1, leptonica, libb2, libarchive, pango, tesseract, theora, x264, x265, xvid, zeromq and zimg</code></p><h2 id="常用命令行参数" tabindex="-1"><a class="header-anchor" href="#常用命令行参数" aria-hidden="true">#</a> 常用命令行参数</h2><p>FFmpeg 常用的命令行参数如下。</p><blockquote><ul><li><code>-c</code>：指定编码器</li><li><code>-c copy</code>：直接复制，不经过重新编码（这样比较快）</li><li><code>-c:v</code>：指定视频编码器</li><li><code>-c:a</code>：指定音频编码器</li><li><code>-i</code>：指定输入文件</li><li><code>-an</code>：去除音频流</li><li><code>-vn</code>： 去除视频流</li><li><code>-preset</code>：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。</li><li><code>-y</code>：不经过确认，输出时直接覆盖同名文件。</li></ul></blockquote><h2 id="一般使用场景" tabindex="-1"><a class="header-anchor" href="#一般使用场景" aria-hidden="true">#</a> 一般使用场景</h2><h3 id="_4-1-查看文件信息" tabindex="-1"><a class="header-anchor" href="#_4-1-查看文件信息" aria-hidden="true">#</a> 4.1 查看文件信息</h3><p>查看视频文件的元信息，比如编码格式和比特率，可以只使用<code>-i</code>参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-i</span> input.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会输出很多冗余信息，加上<code>-hide_banner</code>参数，可以只显示元信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-hide_banner</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-转换编码格式" tabindex="-1"><a class="header-anchor" href="#_4-2-转换编码格式" aria-hidden="true">#</a> 4.2 转换编码格式</h3><p>转换编码格式（transcoding）指的是， 将视频文件从一种编码转成另一种编码。比如转成 H.264 编码，一般使用编码器<code>libx264</code>，所以只需指定输出文件的视频编码器即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-i</span> <span class="token punctuation">[</span>input.file<span class="token punctuation">]</span> <span class="token parameter variable">-c:v</span> libx264 output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是转成 H.265 编码的写法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-i</span> <span class="token punctuation">[</span>input.file<span class="token punctuation">]</span> <span class="token parameter variable">-c:v</span> libx265 output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-转换容器格式" tabindex="-1"><a class="header-anchor" href="#_4-3-转换容器格式" aria-hidden="true">#</a> 4.3 转换容器格式</h3><p>转换容器格式（transmuxing）指的是，将视频文件从一种容器转到另一种容器。下面是 mp4 转 webm 的写法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-c</span> copy output.webm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面例子中，只是转一下容器，内部的编码格式不变，所以使用<code>-c copy</code>指定直接拷贝，不经过转码，这样比较快。</p><h3 id="_4-4-调整码率" tabindex="-1"><a class="header-anchor" href="#_4-4-调整码率" aria-hidden="true">#</a> 4.4 调整码率</h3><p>调整码率（transrating）指的是，改变编码的比特率，一般用来将视频文件的体积变小。下面的例子指定码率最小为 964K，最大为 3856K，缓冲区大小为 2000K。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\\</span>
<span class="token parameter variable">-minrate</span> 964K <span class="token parameter variable">-maxrate</span> 3856K <span class="token parameter variable">-bufsize</span> 2000K <span class="token punctuation">\\</span>
output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-改变分辨率-transsizing" tabindex="-1"><a class="header-anchor" href="#_4-5-改变分辨率-transsizing" aria-hidden="true">#</a> 4.5 改变分辨率（transsizing）</h3><p>下面是改变视频分辨率（transsizing）的例子，从 1080p 转为 480p 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\\</span>
<span class="token parameter variable">-vf</span> <span class="token assign-left variable">scale</span><span class="token operator">=</span><span class="token number">480</span>:-1 <span class="token punctuation">\\</span>
output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-提取音频" tabindex="-1"><a class="header-anchor" href="#_4-6-提取音频" aria-hidden="true">#</a> 4.6 提取音频</h3><p>有时，需要从视频里面提取音频（demuxing），可以像下面这样写。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\\</span>
<span class="token parameter variable">-vn</span> <span class="token parameter variable">-c:a</span> copy <span class="token punctuation">\\</span>
output.aac
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，<code>-vn</code>表示去掉视频，<code>-c:a copy</code>表示不改变音频编码，直接拷贝。</p><h3 id="_4-7-添加音轨" tabindex="-1"><a class="header-anchor" href="#_4-7-添加音轨" aria-hidden="true">#</a> 4.7 添加音轨</h3><p>添加音轨（muxing）指的是，将外部音频加入视频，比如添加背景音乐或旁白。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token parameter variable">-i</span> input.aac <span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\\</span>
output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，有音频和视频两个输入文件，FFmpeg 会将它们合成为一个文件。</p><h3 id="_4-8-截图" tabindex="-1"><a class="header-anchor" href="#_4-8-截图" aria-hidden="true">#</a> 4.8 截图</h3><p>下面的例子是从指定时间开始，连续对 1 秒钟的视频进行截图。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token parameter variable">-y</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\\</span>
<span class="token parameter variable">-ss</span> 00:01:24 <span class="token parameter variable">-t</span> 00:00:01 <span class="token punctuation">\\</span>
output_%3d.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只需要截一张图，可以指定只截取一帧。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token parameter variable">-ss</span> 01:23:45 <span class="token punctuation">\\</span>
<span class="token parameter variable">-i</span> input <span class="token punctuation">\\</span>
<span class="token parameter variable">-vframes</span> <span class="token number">1</span> <span class="token parameter variable">-q:v</span> <span class="token number">2</span> <span class="token punctuation">\\</span>
output.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，<code>-vframes 1</code>指定只截取一帧，<code>-q:v 2</code>表示输出的图片质量，一般是 1 到 5 之间（1 为质量最高）。</p><h3 id="_4-9-裁剪" tabindex="-1"><a class="header-anchor" href="#_4-9-裁剪" aria-hidden="true">#</a> 4.9 裁剪</h3><p>裁剪（cutting）指的是，截取原始视频里面的一个片段，输出为一个新视频。可以指定开始时间（start）和持续时间（duration），也可以指定结束时间（end）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-ss</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token parameter variable">-i</span> <span class="token punctuation">[</span>input<span class="token punctuation">]</span> <span class="token parameter variable">-t</span> <span class="token punctuation">[</span>duration<span class="token punctuation">]</span> <span class="token parameter variable">-c</span> copy <span class="token punctuation">[</span>output<span class="token punctuation">]</span>
$ ffmpeg <span class="token parameter variable">-ss</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token parameter variable">-i</span> <span class="token punctuation">[</span>input<span class="token punctuation">]</span> <span class="token parameter variable">-to</span> <span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token parameter variable">-c</span> copy <span class="token punctuation">[</span>output<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是实际的例子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token parameter variable">-ss</span> 00:01:50 <span class="token parameter variable">-i</span> <span class="token punctuation">[</span>input<span class="token punctuation">]</span> <span class="token parameter variable">-t</span> <span class="token number">10.5</span> <span class="token parameter variable">-c</span> copy <span class="token punctuation">[</span>output<span class="token punctuation">]</span>
$ ffmpeg <span class="token parameter variable">-ss</span> <span class="token number">2.5</span> <span class="token parameter variable">-i</span> <span class="token punctuation">[</span>input<span class="token punctuation">]</span> <span class="token parameter variable">-to</span> <span class="token number">10</span> <span class="token parameter variable">-c</span> copy <span class="token punctuation">[</span>output<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，<code>-c copy</code>表示不改变音频和视频的编码格式，直接拷贝，这样会快很多。</p><h3 id="_4-10-为音频添加封面" tabindex="-1"><a class="header-anchor" href="#_4-10-为音频添加封面" aria-hidden="true">#</a> 4.10 为音频添加封面</h3><p>有些视频网站只允许上传视频文件。如果要上传音频文件，必须为音频添加封面，将其转为视频，然后上传。</p><p>下面命令可以将音频文件，转为带封面的视频文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ffmpeg <span class="token punctuation">\\</span>
<span class="token parameter variable">-loop</span> <span class="token number">1</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-i</span> cover.jpg <span class="token parameter variable">-i</span> input.mp3 <span class="token punctuation">\\</span>
<span class="token parameter variable">-c:v</span> libx264 <span class="token parameter variable">-c:a</span> aac <span class="token parameter variable">-b:a</span> 192k <span class="token parameter variable">-shortest</span> <span class="token punctuation">\\</span>
output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令中，有两个输入文件，一个是封面图片<code>cover.jpg</code>，另一个是音频文件<code>input.mp3</code>。<code>-loop 1</code>参数表示图片无限循环，<code>-shortest</code>参数表示音频文件结束，输出视频就结束。</p><h3 id="_4-11-视频音频合并" tabindex="-1"><a class="header-anchor" href="#_4-11-视频音频合并" aria-hidden="true">#</a> 4.11 视频音频合并</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-i</span> ./office-copilot.mp4 <span class="token parameter variable">-i</span> ./office-copilot.aac <span class="token parameter variable">-c:v</span> copy <span class="token parameter variable">-c:a</span> aac <span class="token parameter variable">-strict</span> experimental out.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-12-视频音频字幕合并" tabindex="-1"><a class="header-anchor" href="#_4-12-视频音频字幕合并" aria-hidden="true">#</a> 4.12 视频音频字幕合并</h3><p>字幕软合并，需要播放器支持</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-i</span> ./office-copilot.mp4 <span class="token parameter variable">-i</span> ./office-copilot.aac <span class="token parameter variable">-i</span> ./office-copilot.srt <span class="token parameter variable">-c:v</span> copy <span class="token parameter variable">-c:a</span> aac <span class="token parameter variable">-c:s</span> mov_text <span class="token parameter variable">-strict</span> experimental outwithsrt.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,95),l=[p];function t(c,r){return s(),e("div",null,l)}const u=a(i,[["render",t],["__file","ffmpeg.html.vue"]]);export{u as default};

import{_ as e,W as t,X as o,Y as c}from"./framework-3ab8bde0.js";const p={},a=c('<h1 id="网络模型" tabindex="-1"><a class="header-anchor" href="#网络模型" aria-hidden="true">#</a> 网络模型</h1><p>Reactor 模型</p><p>Reactor 模式本质上指的是使用 <code>I/O 多路复用(I/O multiplexing) + 非阻塞 I/O(non-blocking I/O) </code>的模式</p><p>通常设置一个主线程负责做 event-loop 事件循环和 I/O 读写，通过 select/poll/epoll_wait 等系统调用监听 I/O 事件，业务逻辑提交给其他工作线程去做。而所谓『非阻塞 I/O』的核心思想是指避免阻塞在 read() 或者 write() 或者其他的 I/O 系统调用上，这样可以最大限度的复用 event-loop 线程，让一个线程能服务于多个 sockets。在 Reactor 模式中，I/O 线程只能阻塞在 I/O multiplexing 函数上（select/poll/epoll_wait）</p><p>![](/Users/zhou/Nutstore Files/我的坚果云/读书笔记/img/redis-one.png)</p><p>多进程模型</p><p>缺点在于线程同步的粒度太大，一旦 accept，后面的过程都要阻塞，所以 reactor 模式就是把这个一次连接处理的过程中的步骤分解，这样线程池数目翻倍，线程任务更加简单单一</p><p>网络请求的过程：连接-》读-》写</p><p>accept 阻塞，从 socket inputstream 读会阻塞，socket outstream 写会阻塞</p>',9),r=[a];function s(l,n){return t(),o("div",null,r)}const _=e(p,[["render",s],["__file","网络模型.html.vue"]]);export{_ as default};

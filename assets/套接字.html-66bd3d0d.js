const s=JSON.parse('{"key":"v-69328bde","path":"/apue/%E5%A5%97%E6%8E%A5%E5%AD%97.html","title":"套接字","lang":"zh-CN","frontmatter":{"description":"套接字 int socket(int domain,int type,int protocol); domain: AF_INET IPv4 AF_INET6 IPv6 AF_UNIX 别名 AF_LOCAL unix域 AF_UPSPEC type: SOCK_DGRAM 默认UDP 无连接 报文 SOCK_RAW 直接访问下面的网络层 应用程序负责构造自己的协议头部，这是因为传输协议（如 TCP 和 UDP） 被绕过了 SOCK_SEQPACKET 面向连接 报文 SOCK_STREAM 默认tcp 面向连接 字节流 protocol: //参数 protocol 通常是 0，表示为给定的域和套接字类型选择默认协议 IPPROTO_IP IPv4 IPPROTO_IPV6 IPv6 IPPROTO_ICMP IPPROTO_RAW IPPROTO_TCP tcp IPPROTO_UDP udp struct addrinfo{ int ai_flags;// 定义如何处理地址和名字 int ai_family;// domain 域 int ai_socktype;//类型 int ai_protocol;//协议 socklen_t ai_addrlen; struct sockaddr *ai_addr; char *ai_canonname; struct addrinfo *ai_next; ... } struct sockaddr{ sa_family_t sa_family; char sa_data[];//linux sa_data[14]; ... } 给一个接收客户端请求的服务器套接字关联上一个众所周知的地址，关联地址和套接字 int bind(int sockfd, const struct sockaddr *addr, socklen_t len); 建立连接 int connect(int sockfd,const struct sockaddr *addr,socket_t len); 服务器调用 listen 函数来宣告它愿意接受连接请求 int listen(int sockfd, int backlog); backlog 提示系统该进程所要入队的未完成连接请求数量 一旦队列满，系统就会拒绝多余的连接请求，所以 backlog 的值应该基于服务器期望负载和 处理量来选择，其中处理量是指接受连接请求与启动服务的数量 一旦服务器调用了 listen，所用的套接字就能接收连接请求。使用 accept 函数获得连接 请求并建立连接 accept(int sockefd,struct socketaddr *addr,socklen_t *restrict len); 函数 accept 所返回的文件描述符是套接字描述符，该描述符连接到调用 connect 的客户端 这个新的套接字描述符和原始套接字（sockfd）具有相同的套接字类型和地址族 传给 accept 的原始套接字没有关联到这个连接，而是继续保持可用状态并接收其他连接请求 返回时，accept 会在缓冲区填充客户端的地址，并且更新指向 len 的整数来反映该地址的大小 如果没有连接请求在等待，accept 会阻塞直到一个请求到来。如果 sockfd 处于非阻塞模式， accept 会返回−1，并将 errno 设置为 EAGAIN 或 EWOULDBLOCK 允许将一个主机名和一个服务名映射到一个地址 int getaddrinfo(const char *restrict host, \\t\\t\\t\\tconst char *restrict service, \\t\\t\\t\\tconst struct addrinfo *restrict hint, \\t\\t\\t\\tstruct addrinfo **restrict res); 面向连接的套接字 ssize_t send(int sockfd,const void *buf,size_t nbytes,int flags); ssize_t recv(int sockfd,void *buf,size_t nbytes,int flags); 面向无连接的套接字 ssize_t sendto(int sockfd, const void *buf, size_t nbytes, int flags,const struct sockaddr *destaddr, socklen_t destlen); ssize_t recvfrom(int sockfd, void *restrict buf, size_t len, int flags, struct sockaddr *restrict addr, socklen_t *restrict addrlen); 可以发送和接受fd ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags); ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags); int setsockopt(int sockfd, int level, int option, const void *val, socklen_t len);","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/apue/%E5%A5%97%E6%8E%A5%E5%AD%97.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"套接字"}],["meta",{"property":"og:description","content":"套接字 int socket(int domain,int type,int protocol); domain: AF_INET IPv4 AF_INET6 IPv6 AF_UNIX 别名 AF_LOCAL unix域 AF_UPSPEC type: SOCK_DGRAM 默认UDP 无连接 报文 SOCK_RAW 直接访问下面的网络层 应用程序负责构造自己的协议头部，这是因为传输协议（如 TCP 和 UDP） 被绕过了 SOCK_SEQPACKET 面向连接 报文 SOCK_STREAM 默认tcp 面向连接 字节流 protocol: //参数 protocol 通常是 0，表示为给定的域和套接字类型选择默认协议 IPPROTO_IP IPv4 IPPROTO_IPV6 IPv6 IPPROTO_ICMP IPPROTO_RAW IPPROTO_TCP tcp IPPROTO_UDP udp struct addrinfo{ int ai_flags;// 定义如何处理地址和名字 int ai_family;// domain 域 int ai_socktype;//类型 int ai_protocol;//协议 socklen_t ai_addrlen; struct sockaddr *ai_addr; char *ai_canonname; struct addrinfo *ai_next; ... } struct sockaddr{ sa_family_t sa_family; char sa_data[];//linux sa_data[14]; ... } 给一个接收客户端请求的服务器套接字关联上一个众所周知的地址，关联地址和套接字 int bind(int sockfd, const struct sockaddr *addr, socklen_t len); 建立连接 int connect(int sockfd,const struct sockaddr *addr,socket_t len); 服务器调用 listen 函数来宣告它愿意接受连接请求 int listen(int sockfd, int backlog); backlog 提示系统该进程所要入队的未完成连接请求数量 一旦队列满，系统就会拒绝多余的连接请求，所以 backlog 的值应该基于服务器期望负载和 处理量来选择，其中处理量是指接受连接请求与启动服务的数量 一旦服务器调用了 listen，所用的套接字就能接收连接请求。使用 accept 函数获得连接 请求并建立连接 accept(int sockefd,struct socketaddr *addr,socklen_t *restrict len); 函数 accept 所返回的文件描述符是套接字描述符，该描述符连接到调用 connect 的客户端 这个新的套接字描述符和原始套接字（sockfd）具有相同的套接字类型和地址族 传给 accept 的原始套接字没有关联到这个连接，而是继续保持可用状态并接收其他连接请求 返回时，accept 会在缓冲区填充客户端的地址，并且更新指向 len 的整数来反映该地址的大小 如果没有连接请求在等待，accept 会阻塞直到一个请求到来。如果 sockfd 处于非阻塞模式， accept 会返回−1，并将 errno 设置为 EAGAIN 或 EWOULDBLOCK 允许将一个主机名和一个服务名映射到一个地址 int getaddrinfo(const char *restrict host, \\t\\t\\t\\tconst char *restrict service, \\t\\t\\t\\tconst struct addrinfo *restrict hint, \\t\\t\\t\\tstruct addrinfo **restrict res); 面向连接的套接字 ssize_t send(int sockfd,const void *buf,size_t nbytes,int flags); ssize_t recv(int sockfd,void *buf,size_t nbytes,int flags); 面向无连接的套接字 ssize_t sendto(int sockfd, const void *buf, size_t nbytes, int flags,const struct sockaddr *destaddr, socklen_t destlen); ssize_t recvfrom(int sockfd, void *restrict buf, size_t len, int flags, struct sockaddr *restrict addr, socklen_t *restrict addrlen); 可以发送和接受fd ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags); ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags); int setsockopt(int sockfd, int level, int option, const void *val, socklen_t len);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"套接字\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":10.2,"words":3061},"filePathRelative":"apue/套接字.md","localizedDate":"2023年3月11日","excerpt":"<h1> 套接字</h1>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">socket</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> domain<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> type<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> protocol<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\ndomain<span class=\\"token operator\\">:</span>\\nAF_INET IPv4\\nAF_INET6 IPv6\\nAF_UNIX 别名 AF_LOCAL unix域\\nAF_UPSPEC\\n\\ntype<span class=\\"token operator\\">:</span>\\nSOCK_DGRAM 默认UDP 无连接 报文\\nSOCK_RAW 直接访问下面的网络层 应用程序负责构造自己的协议头部，这是因为传输协议（如 TCP 和 UDP） 被绕过了\\nSOCK_SEQPACKET 面向连接 报文\\nSOCK_STREAM 默认tcp 面向连接 字节流\\n\\nprotocol<span class=\\"token operator\\">:</span> <span class=\\"token comment\\">//参数 protocol 通常是 0，表示为给定的域和套接字类型选择默认协议</span>\\nIPPROTO_IP IPv4\\nIPPROTO_IPV6 IPv6\\nIPPROTO_ICMP\\nIPPROTO_RAW\\nIPPROTO_TCP tcp\\nIPPROTO_UDP udp\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">addrinfo</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> ai_flags<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 定义如何处理地址和名字</span>\\n    <span class=\\"token keyword\\">int</span> ai_family<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// domain 域</span>\\n    <span class=\\"token keyword\\">int</span> ai_socktype<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//类型</span>\\n    <span class=\\"token keyword\\">int</span> ai_protocol<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//协议</span>\\n    <span class=\\"token class-name\\">socklen_t</span> ai_addrlen<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span> <span class=\\"token operator\\">*</span>ai_addr<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>ai_canonname<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">addrinfo</span> <span class=\\"token operator\\">*</span>ai_next<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">sa_family_t</span> sa_family<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">char</span> sa_data<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//linux sa_data[14];</span>\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n<span class=\\"token punctuation\\">}</span>\\n给一个接收客户端请求的服务器套接字关联上一个众所周知的地址，关联地址和套接字\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">bind</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span> <span class=\\"token operator\\">*</span>addr<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">socklen_t</span> len<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n建立连接\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">connect</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span> <span class=\\"token operator\\">*</span>addr<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">socket_t</span> len<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n服务器调用 listen 函数来宣告它愿意接受连接请求\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">listen</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> backlog<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbacklog 提示系统该进程所要入队的未完成连接请求数量\\n一旦队列满，系统就会拒绝多余的连接请求，所以 backlog 的值应该基于服务器期望负载和 处理量来选择，其中处理量是指接受连接请求与启动服务的数量\\n\\n一旦服务器调用了 listen，所用的套接字就能接收连接请求。使用 accept 函数获得连接 请求并建立连接\\n<span class=\\"token function\\">accept</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockefd<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">socketaddr</span> <span class=\\"token operator\\">*</span>addr<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">socklen_t</span> <span class=\\"token operator\\">*</span>restrict len<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n函数 accept 所返回的文件描述符是套接字描述符，该描述符连接到调用 connect 的客户端\\n这个新的套接字描述符和原始套接字（sockfd）具有相同的套接字类型和地址族\\n传给 accept 的原始套接字没有关联到这个连接，而是继续保持可用状态并接收其他连接请求\\n返回时，accept 会在缓冲区填充客户端的地址，并且更新指向 len 的整数来反映该地址的大小\\n如果没有连接请求在等待，accept 会阻塞直到一个请求到来。如果 sockfd 处于非阻塞模式， accept 会返回−<span class=\\"token number\\">1</span>，并将 errno 设置为 EAGAIN 或 EWOULDBLOCK\\n\\n允许将一个主机名和一个服务名映射到一个地址\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getaddrinfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>restrict host<span class=\\"token punctuation\\">,</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>restrict service<span class=\\"token punctuation\\">,</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">addrinfo</span> <span class=\\"token operator\\">*</span>restrict hint<span class=\\"token punctuation\\">,</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">addrinfo</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span>restrict res<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n面向连接的套接字\\n<span class=\\"token class-name\\">ssize_t</span> <span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>buf<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">size_t</span> nbytes<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> flags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">ssize_t</span> <span class=\\"token function\\">recv</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>buf<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">size_t</span> nbytes<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> flags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n面向无连接的套接字\\n<span class=\\"token class-name\\">ssize_t</span> <span class=\\"token function\\">sendto</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>buf<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> nbytes<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> flags<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span> <span class=\\"token operator\\">*</span>destaddr<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">socklen_t</span> destlen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">ssize_t</span> <span class=\\"token function\\">recvfrom</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>restrict buf<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> len<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> flags<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span> <span class=\\"token operator\\">*</span>restrict addr<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">socklen_t</span> <span class=\\"token operator\\">*</span>restrict addrlen<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n可以发送和接受fd\\n<span class=\\"token class-name\\">ssize_t</span> <span class=\\"token function\\">sendmsg</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">msghdr</span> <span class=\\"token operator\\">*</span>msg<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> flags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">ssize_t</span> <span class=\\"token function\\">recvmsg</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">msghdr</span> <span class=\\"token operator\\">*</span>msg<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> flags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">setsockopt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sockfd<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> level<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> option<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>val<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">socklen_t</span> len<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};

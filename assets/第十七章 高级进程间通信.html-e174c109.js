import{_ as n,X as s,Y as a,Z as t}from"./framework-418c825b.js";const p={},e=t(`<h1 id="第十七章-高级进程间通信" tabindex="-1"><a class="header-anchor" href="#第十七章-高级进程间通信" aria-hidden="true">#</a> 第十七章 高级进程间通信</h1><h2 id="unix-域套接字" tabindex="-1"><a class="header-anchor" href="#unix-域套接字" aria-hidden="true">#</a> UNIX 域套接字</h2><p>UNIX 域套接字用于在同一台计算机上运行的进程之间的通信</p><p>虽然因特网域套接字可用于 同一目的，但 UNIX 域套接字的效率更高</p><p>UNIX 域套接字提供流和数据报两种接口</p><p>UNIX 域套接字就像是套接字和管道的混合</p><p>可以使用它们面向网络的域套接 字接口或者使用 socketpair 函数来创建一对无命名的、相互连接的 UNIX 域套接字</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/sock.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">socketpair</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span><span class="token keyword">int</span> type<span class="token punctuation">,</span><span class="token keyword">int</span> protocol<span class="token punctuation">,</span><span class="token keyword">int</span> sockfd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sockpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fd-pipe" tabindex="-1"><a class="header-anchor" href="#fd-pipe" aria-hidden="true">#</a> fd_pipe</h3><h3 id="借助-unix-域套接字轮询-xsi-消息队列" tabindex="-1"><a class="header-anchor" href="#借助-unix-域套接字轮询-xsi-消息队列" aria-hidden="true">#</a> 借助 UNIX 域套接字轮询 XSI 消息队列</h3><p>XSI 消息队列的使用存在一个问题，即不能将它们和 poll 或者 select 一起使用，这是因为它们不能关联到文件描述符</p><p>套接字是和文件描述符相关联的，消息到达时，可以用套接字来通知</p><ol><li>创建了一些消息队列和 UNIX 域套接字，并 为每个消息队列开启了一个新线程</li><li>然后它在一个无限循环中用 poll 来轮询选择一个套接字端点</li><li>当某个套接字可读时，程序可以从套接字中读取数据</li></ol><h2 id="命名-unix-域套接字" tabindex="-1"><a class="header-anchor" href="#命名-unix-域套接字" aria-hidden="true">#</a> 命名 UNIX 域套接字</h2><p>.sock 文件</p><p>将地址绑定到 UNIX 域套接字，系统会用该路径名创建一个 S_IFSOCK 类型的文件</p><p>UNIX 域套接字的地址由 sockaddr_un 结构 表示</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> fd<span class="token punctuation">,</span> size<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> un<span class="token punctuation">;</span>

	un<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_UNIX<span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>un<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;foo.socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;socket failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//确定绑定地址长度</span>
    <span class="token comment">//先计算 sun_path 成员在 sockaddr_un 结构中的偏移量</span>
    <span class="token comment">//然后将结果与路径名长度（不包括终止 null 字符）相加</span>
	size <span class="token operator">=</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span><span class="token punctuation">,</span> sun_path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>un<span class="token punctuation">.</span>sun_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>un<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;bind failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;UNIX domain socket bound\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="唯一连接" tabindex="-1"><a class="header-anchor" href="#唯一连接" aria-hidden="true">#</a> 唯一连接</h2><p>apue 种开发的三个函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token expression">“apue<span class="token punctuation">.</span>h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">serv_listen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">serv_accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> listenfd<span class="token punctuation">,</span><span class="token class-name">uid_t</span> <span class="token operator">*</span>uidptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cil_conn</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="传送文件描述符" tabindex="-1"><a class="header-anchor" href="#传送文件描述符" aria-hidden="true">#</a> 传送文件描述符</h2><p>在技术上，我们是将指向一个打开文件表项的指针从一个进程发送到另外一个进程。该指针 被分配存放在接收进程的第一个可用描述符项中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">send_fd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> fd_to_send<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">send_err</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> status<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">recv_fd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>userfunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="open-服务器进程-v1" tabindex="-1"><a class="header-anchor" href="#open-服务器进程-v1" aria-hidden="true">#</a> open 服务器进程 v1</h2><h2 id="open-服务器进程-v2" tabindex="-1"><a class="header-anchor" href="#open-服务器进程-v2" aria-hidden="true">#</a> open 服务器进程 v2</h2>`,26),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","第十七章 高级进程间通信.html.vue"]]);export{k as default};

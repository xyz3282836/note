const n=JSON.parse('{"key":"v-15658a77","path":"/apue/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A0%87%E5%87%86IO.html","title":"第五章 标准 IO","lang":"zh-CN","frontmatter":{"description":"第五章 标准 IO 标准 IO 不仅仅是 unix 实现了。 这个库是 ISO C 标准说明。 Single UNIX Specification 对 ISO C 进行了补充，定义了另外一些接口。 流和 FILE 对象 第三章围绕 fd，而这章函数围绕流 流的定向决定了读写字符是单字节还是多字节-宽 在未定义的流上使用单字节 IO 函数或者多字节 IO 函数，则流的定向将被设置单或者宽 只有两个函数可以改变流的定向：freopen 和 fwide #include &lt;stdio.h&gt; #include &lt;wchar.h&gt; int fwide(FILE *fp,int mode);//流宽定向返回正值，字节定向返回负值，为定向返回0 设定流的定向，前提条件是未被设定流的定向 流可能无效，那么需要前后检查errno macos的FILE定义 typedef\\tstruct __sFILE { \\tunsigned char *_p;\\t/* current position in (some) buffer */ \\tint\\t_r;\\t\\t/* read space left for getc() */ \\tint\\t_w;\\t\\t/* write space left for putc() */ \\tshort\\t_flags;\\t\\t/* flags, below; this FILE is free if 0 */ \\tshort\\t_file;\\t\\t/* fileno, if Unix descriptor, else -1 */ \\tstruct\\t__sbuf _bf;\\t/* the buffer (at least 1 byte, if !NULL) */ \\tint\\t_lbfsize;\\t/* 0 or -_bf._size, for inline putc */ \\t/* operations */ \\tvoid\\t*_cookie;\\t/* cookie passed to io functions */ \\tint\\t(* _Nullable _close)(void *); \\tint\\t(* _Nullable _read) (void *, char *, int); \\tfpos_t\\t(* _Nullable _seek) (void *, fpos_t, int); \\tint\\t(* _Nullable _write)(void *, const char *, int); \\t/* separate buffer for long sequences of ungetc() */ \\tstruct\\t__sbuf _ub;\\t/* ungetc buffer */ \\tstruct __sFILEX *_extra; /* additions to FILE to not break ABI */ \\tint\\t_ur;\\t\\t/* saved _r when _r is counting ungetc data */ \\t/* tricks to meet minimum requirements even when malloc() fails */ \\tunsigned char _ubuf[3];\\t/* guarantee an ungetc() buffer */ \\tunsigned char _nbuf[1];\\t/* guarantee a getc() buffer */ \\t/* separate buffer for fgetln() when line crosses buffer boundary */ \\tstruct\\t__sbuf _lb;\\t/* buffer for fgetln() */ \\t/* Unix stdio files get aligned to block boundaries on fseek() */ \\tint\\t_blksize;\\t/* stat.st_blksize (may be != _bf._size) */ \\tfpos_t\\t_offset;\\t/* current lseek offset (see WARNING) */ } FILE /* stdio buffers */ struct __sbuf { \\tunsigned char\\t*_base; \\tint\\t\\t_size; };","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/apue/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A0%87%E5%87%86IO.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"第五章 标准 IO"}],["meta",{"property":"og:description","content":"第五章 标准 IO 标准 IO 不仅仅是 unix 实现了。 这个库是 ISO C 标准说明。 Single UNIX Specification 对 ISO C 进行了补充，定义了另外一些接口。 流和 FILE 对象 第三章围绕 fd，而这章函数围绕流 流的定向决定了读写字符是单字节还是多字节-宽 在未定义的流上使用单字节 IO 函数或者多字节 IO 函数，则流的定向将被设置单或者宽 只有两个函数可以改变流的定向：freopen 和 fwide #include &lt;stdio.h&gt; #include &lt;wchar.h&gt; int fwide(FILE *fp,int mode);//流宽定向返回正值，字节定向返回负值，为定向返回0 设定流的定向，前提条件是未被设定流的定向 流可能无效，那么需要前后检查errno macos的FILE定义 typedef\\tstruct __sFILE { \\tunsigned char *_p;\\t/* current position in (some) buffer */ \\tint\\t_r;\\t\\t/* read space left for getc() */ \\tint\\t_w;\\t\\t/* write space left for putc() */ \\tshort\\t_flags;\\t\\t/* flags, below; this FILE is free if 0 */ \\tshort\\t_file;\\t\\t/* fileno, if Unix descriptor, else -1 */ \\tstruct\\t__sbuf _bf;\\t/* the buffer (at least 1 byte, if !NULL) */ \\tint\\t_lbfsize;\\t/* 0 or -_bf._size, for inline putc */ \\t/* operations */ \\tvoid\\t*_cookie;\\t/* cookie passed to io functions */ \\tint\\t(* _Nullable _close)(void *); \\tint\\t(* _Nullable _read) (void *, char *, int); \\tfpos_t\\t(* _Nullable _seek) (void *, fpos_t, int); \\tint\\t(* _Nullable _write)(void *, const char *, int); \\t/* separate buffer for long sequences of ungetc() */ \\tstruct\\t__sbuf _ub;\\t/* ungetc buffer */ \\tstruct __sFILEX *_extra; /* additions to FILE to not break ABI */ \\tint\\t_ur;\\t\\t/* saved _r when _r is counting ungetc data */ \\t/* tricks to meet minimum requirements even when malloc() fails */ \\tunsigned char _ubuf[3];\\t/* guarantee an ungetc() buffer */ \\tunsigned char _nbuf[1];\\t/* guarantee a getc() buffer */ \\t/* separate buffer for fgetln() when line crosses buffer boundary */ \\tstruct\\t__sbuf _lb;\\t/* buffer for fgetln() */ \\t/* Unix stdio files get aligned to block boundaries on fseek() */ \\tint\\t_blksize;\\t/* stat.st_blksize (may be != _bf._size) */ \\tfpos_t\\t_offset;\\t/* current lseek offset (see WARNING) */ } FILE /* stdio buffers */ struct __sbuf { \\tunsigned char\\t*_base; \\tint\\t\\t_size; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:author","content":"rz"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第五章 标准 IO\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"rz\\",\\"url\\":\\"https://github.com/xyz3282836/monodoc\\"}]}"]]},"headers":[{"level":2,"title":"流和 FILE 对象","slug":"流和-file-对象","link":"#流和-file-对象","children":[]},{"level":2,"title":"缓冲","slug":"缓冲","link":"#缓冲","children":[]},{"level":2,"title":"打开流","slug":"打开流","link":"#打开流","children":[]},{"level":2,"title":"读和写流","slug":"读和写流","link":"#读和写流","children":[]},{"level":2,"title":"行 IO","slug":"行-io","link":"#行-io","children":[]},{"level":2,"title":"二进制 IO","slug":"二进制-io","link":"#二进制-io","children":[]},{"level":2,"title":"定位流","slug":"定位流","link":"#定位流","children":[]},{"level":2,"title":"格式化 IO","slug":"格式化-io","link":"#格式化-io","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"临时文件","slug":"临时文件","link":"#临时文件","children":[]},{"level":2,"title":"内存流","slug":"内存流","link":"#内存流","children":[]},{"level":2,"title":"标准 IO 的替代软件","slug":"标准-io-的替代软件","link":"#标准-io-的替代软件","children":[]},{"level":2,"title":"习题","slug":"习题","link":"#习题","children":[]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":4.68,"words":1403},"filePathRelative":"apue/第五章 标准IO.md","localizedDate":"2023年3月11日","excerpt":"<h1> 第五章 标准 IO</h1>\\n<p>标准 IO 不仅仅是 unix 实现了。</p>\\n<p>这个库是 ISO C 标准说明。</p>\\n<p>Single UNIX Specification 对 ISO C 进行了补充，定义了另外一些接口。</p>\\n<h2> 流和 FILE 对象</h2>\\n<p>第三章围绕 fd，而这章函数围绕流</p>\\n<p>流的定向决定了读写字符是单字节还是多字节-宽</p>\\n<p>在未定义的流上使用单字节 IO 函数或者多字节 IO 函数，则流的定向将被设置单或者宽</p>\\n<p>只有两个函数可以改变流的定向：freopen 和 fwide</p>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;wchar.h&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">fwide</span><span class=\\"token punctuation\\">(</span>FILE <span class=\\"token operator\\">*</span>fp<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> mode<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//流宽定向返回正值，字节定向返回负值，为定向返回0</span>\\n设定流的定向，前提条件是未被设定流的定向\\n流可能无效，那么需要前后检查errno\\n\\nmacos的FILE定义\\n<span class=\\"token keyword\\">typedef</span>\\t<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">__sFILE</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>_p<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* current position in (some) buffer */</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t_r<span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">/* read space left for getc() */</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t_w<span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">/* write space left for putc() */</span>\\n\\t<span class=\\"token keyword\\">short</span>\\t_flags<span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">/* flags, below; this FILE is free if 0 */</span>\\n\\t<span class=\\"token keyword\\">short</span>\\t_file<span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">/* fileno, if Unix descriptor, else -1 */</span>\\n\\t<span class=\\"token keyword\\">struct</span>\\t<span class=\\"token class-name\\">__sbuf</span> _bf<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* the buffer (at least 1 byte, if !NULL) */</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t_lbfsize<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* 0 or -_bf._size, for inline putc */</span>\\n\\n\\t<span class=\\"token comment\\">/* operations */</span>\\n\\t<span class=\\"token keyword\\">void</span>\\t<span class=\\"token operator\\">*</span>_cookie<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* cookie passed to io functions */</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t<span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> _Nullable _close<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t<span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> _Nullable _read<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token class-name\\">fpos_t</span>\\t<span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> _Nullable _seek<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">fpos_t</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t<span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> _Nullable _write<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token comment\\">/* separate buffer for long sequences of ungetc() */</span>\\n\\t<span class=\\"token keyword\\">struct</span>\\t<span class=\\"token class-name\\">__sbuf</span> _ub<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* ungetc buffer */</span>\\n\\t<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">__sFILEX</span> <span class=\\"token operator\\">*</span>_extra<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">/* additions to FILE to not break ABI */</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t_ur<span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">/* saved _r when _r is counting ungetc data */</span>\\n\\n\\t<span class=\\"token comment\\">/* tricks to meet minimum requirements even when malloc() fails */</span>\\n\\t<span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">char</span> _ubuf<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* guarantee an ungetc() buffer */</span>\\n\\t<span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">char</span> _nbuf<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* guarantee a getc() buffer */</span>\\n\\n\\t<span class=\\"token comment\\">/* separate buffer for fgetln() when line crosses buffer boundary */</span>\\n\\t<span class=\\"token keyword\\">struct</span>\\t<span class=\\"token class-name\\">__sbuf</span> _lb<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* buffer for fgetln() */</span>\\n\\n\\t<span class=\\"token comment\\">/* Unix stdio files get aligned to block boundaries on fseek() */</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t_blksize<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* stat.st_blksize (may be != _bf._size) */</span>\\n\\t<span class=\\"token class-name\\">fpos_t</span>\\t_offset<span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">/* current lseek offset (see WARNING) */</span>\\n<span class=\\"token punctuation\\">}</span> FILE\\n\\n\\n<span class=\\"token comment\\">/* stdio buffers */</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">__sbuf</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">char</span>\\t<span class=\\"token operator\\">*</span>_base<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span>\\t\\t_size<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

const n=JSON.parse('{"key":"v-6e55db14","path":"/source-code/bilibili-kratos/library/cache/memcache/pool_conn.html","title":"pool_conn","lang":"zh-CN","frontmatter":{"description":"pool_conn // Pool memcache connection pool struct. type Pool struct { \\tp pool.Pool // 连接池的interface \\tc *Config } // poolConn实现了memcache.go 的 Conn type poolConn struct { \\tc Conn \\tp *Pool \\tctx context.Context } // Pool提供get方法返回poolConn也就是Conn interface的实现，返回了一个链接 func (p *Pool) Get(ctx context.Context) Conn { \\tc, err := p.p.Get(ctx) \\tp.connStat(err) \\tif err != nil { \\t\\treturn errConn{err} \\t} \\tc1, _ := c.(Conn) \\treturn &amp;poolConn{p: p, c: c1, ctx: ctx} } // 连接池的实现pool.NewList，其中 conn.go中的Dial也就是连接池的New func NewPool(cfg *Config) (p *Pool) { \\tif cfg.DialTimeout &lt;= 0 || cfg.ReadTimeout &lt;= 0 || cfg.WriteTimeout &lt;= 0 { \\t\\tpanic(\\"must config memcache timeout\\") \\t} \\tp1 := pool.NewList(cfg.Config) \\tcnop := DialConnectTimeout(time.Duration(cfg.DialTimeout)) \\trdop := DialReadTimeout(time.Duration(cfg.ReadTimeout)) \\twrop := DialWriteTimeout(time.Duration(cfg.WriteTimeout)) \\tp1.New = func(ctx context.Context) (io.Closer, error) { \\t\\tconn, err := Dial(cfg.Proto, cfg.Addr, cnop, rdop, wrop) \\t\\treturn newTraceConn(conn, fmt.Sprintf(\\"%s://%s\\", cfg.Proto, cfg.Addr)), err \\t} \\tp = &amp;Pool{p: p1, c: cfg} \\treturn }","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/source-code/bilibili-kratos/library/cache/memcache/pool_conn.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"pool_conn"}],["meta",{"property":"og:description","content":"pool_conn // Pool memcache connection pool struct. type Pool struct { \\tp pool.Pool // 连接池的interface \\tc *Config } // poolConn实现了memcache.go 的 Conn type poolConn struct { \\tc Conn \\tp *Pool \\tctx context.Context } // Pool提供get方法返回poolConn也就是Conn interface的实现，返回了一个链接 func (p *Pool) Get(ctx context.Context) Conn { \\tc, err := p.p.Get(ctx) \\tp.connStat(err) \\tif err != nil { \\t\\treturn errConn{err} \\t} \\tc1, _ := c.(Conn) \\treturn &amp;poolConn{p: p, c: c1, ctx: ctx} } // 连接池的实现pool.NewList，其中 conn.go中的Dial也就是连接池的New func NewPool(cfg *Config) (p *Pool) { \\tif cfg.DialTimeout &lt;= 0 || cfg.ReadTimeout &lt;= 0 || cfg.WriteTimeout &lt;= 0 { \\t\\tpanic(\\"must config memcache timeout\\") \\t} \\tp1 := pool.NewList(cfg.Config) \\tcnop := DialConnectTimeout(time.Duration(cfg.DialTimeout)) \\trdop := DialReadTimeout(time.Duration(cfg.ReadTimeout)) \\twrop := DialWriteTimeout(time.Duration(cfg.WriteTimeout)) \\tp1.New = func(ctx context.Context) (io.Closer, error) { \\t\\tconn, err := Dial(cfg.Proto, cfg.Addr, cnop, rdop, wrop) \\t\\treturn newTraceConn(conn, fmt.Sprintf(\\"%s://%s\\", cfg.Proto, cfg.Addr)), err \\t} \\tp = &amp;Pool{p: p1, c: cfg} \\treturn }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pool_conn\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":0.59,"words":176},"filePathRelative":"source-code/bilibili-kratos/library/cache/memcache/pool_conn.md","localizedDate":"2023年3月11日","excerpt":"<h1> pool_conn</h1>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// Pool memcache connection pool struct.</span>\\n<span class=\\"token keyword\\">type</span> Pool <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tp pool<span class=\\"token punctuation\\">.</span>Pool <span class=\\"token comment\\">// 连接池的interface</span>\\n\\tc <span class=\\"token operator\\">*</span>Config\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// poolConn实现了memcache.go 的 Conn</span>\\n<span class=\\"token keyword\\">type</span> poolConn <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tc   Conn\\n\\tp   <span class=\\"token operator\\">*</span>Pool\\n\\tctx context<span class=\\"token punctuation\\">.</span>Context\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// Pool提供get方法返回poolConn也就是Conn interface的实现，返回了一个链接</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">*</span>Pool<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Get</span><span class=\\"token punctuation\\">(</span>ctx context<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">)</span> Conn <span class=\\"token punctuation\\">{</span>\\n\\tc<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> p<span class=\\"token punctuation\\">.</span>p<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Get</span><span class=\\"token punctuation\\">(</span>ctx<span class=\\"token punctuation\\">)</span>\\n\\tp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">connStat</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> errConn<span class=\\"token punctuation\\">{</span>err<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tc1<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">_</span> <span class=\\"token operator\\">:=</span> c<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">(</span>Conn<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&amp;</span>poolConn<span class=\\"token punctuation\\">{</span>p<span class=\\"token punctuation\\">:</span> p<span class=\\"token punctuation\\">,</span> c<span class=\\"token punctuation\\">:</span> c1<span class=\\"token punctuation\\">,</span> ctx<span class=\\"token punctuation\\">:</span> ctx<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 连接池的实现pool.NewList，其中 conn.go中的Dial也就是连接池的New</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">NewPool</span><span class=\\"token punctuation\\">(</span>cfg <span class=\\"token operator\\">*</span>Config<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">*</span>Pool<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> cfg<span class=\\"token punctuation\\">.</span>DialTimeout <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> cfg<span class=\\"token punctuation\\">.</span>ReadTimeout <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> cfg<span class=\\"token punctuation\\">.</span>WriteTimeout <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token function\\">panic</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"must config memcache timeout\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tp1 <span class=\\"token operator\\">:=</span> pool<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewList</span><span class=\\"token punctuation\\">(</span>cfg<span class=\\"token punctuation\\">.</span>Config<span class=\\"token punctuation\\">)</span>\\n\\tcnop <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">DialConnectTimeout</span><span class=\\"token punctuation\\">(</span>time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Duration</span><span class=\\"token punctuation\\">(</span>cfg<span class=\\"token punctuation\\">.</span>DialTimeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\trdop <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">DialReadTimeout</span><span class=\\"token punctuation\\">(</span>time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Duration</span><span class=\\"token punctuation\\">(</span>cfg<span class=\\"token punctuation\\">.</span>ReadTimeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\twrop <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">DialWriteTimeout</span><span class=\\"token punctuation\\">(</span>time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Duration</span><span class=\\"token punctuation\\">(</span>cfg<span class=\\"token punctuation\\">.</span>WriteTimeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\tp1<span class=\\"token punctuation\\">.</span>New <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span>ctx context<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span>io<span class=\\"token punctuation\\">.</span>Closer<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">error</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tconn<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">Dial</span><span class=\\"token punctuation\\">(</span>cfg<span class=\\"token punctuation\\">.</span>Proto<span class=\\"token punctuation\\">,</span> cfg<span class=\\"token punctuation\\">.</span>Addr<span class=\\"token punctuation\\">,</span> cnop<span class=\\"token punctuation\\">,</span> rdop<span class=\\"token punctuation\\">,</span> wrop<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">newTraceConn</span><span class=\\"token punctuation\\">(</span>conn<span class=\\"token punctuation\\">,</span> fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%s://%s\\"</span><span class=\\"token punctuation\\">,</span> cfg<span class=\\"token punctuation\\">.</span>Proto<span class=\\"token punctuation\\">,</span> cfg<span class=\\"token punctuation\\">.</span>Addr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> err\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tp <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>Pool<span class=\\"token punctuation\\">{</span>p<span class=\\"token punctuation\\">:</span> p1<span class=\\"token punctuation\\">,</span> c<span class=\\"token punctuation\\">:</span> cfg<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

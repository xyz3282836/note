const n=JSON.parse('{"key":"v-7db669ff","path":"/go/asm/monkey%20patch.html","title":"主要思路","lang":"zh-CN","frontmatter":{"description":"主要思路 注意，plan9 和 intel 汇编指令不同 replacefunc 替换 rawfunc 全局 先不区分协程，全局生效，虽然会有很多问题 先找到 replacefunc 和 rawfunc 内存地址， replacefuncReflectValue = reflect.ValueOf(replacefunc) // 获取reflect.Value replacefuncPtr := uintprt(unsate.Pointer(&amp;replacefuncReflectValue))//?? // replacefunc 内存地址做处理， func jmp(to uintptr) []byte { return []byte{ 0x48, 0xBA, // movabs rdx byte(to), byte(to &gt;&gt; 8), byte(to &gt;&gt; 16), byte(to &gt;&gt; 24), byte(to &gt;&gt; 32), byte(to &gt;&gt; 40), byte(to &gt;&gt; 48), byte(to &gt;&gt; 56), // movabs rdx,to 0xFF, 0xE2, // jmp rdx } }","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/go/asm/monkey%20patch.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"主要思路"}],["meta",{"property":"og:description","content":"主要思路 注意，plan9 和 intel 汇编指令不同 replacefunc 替换 rawfunc 全局 先不区分协程，全局生效，虽然会有很多问题 先找到 replacefunc 和 rawfunc 内存地址， replacefuncReflectValue = reflect.ValueOf(replacefunc) // 获取reflect.Value replacefuncPtr := uintprt(unsate.Pointer(&amp;replacefuncReflectValue))//?? // replacefunc 内存地址做处理， func jmp(to uintptr) []byte { return []byte{ 0x48, 0xBA, // movabs rdx byte(to), byte(to &gt;&gt; 8), byte(to &gt;&gt; 16), byte(to &gt;&gt; 24), byte(to &gt;&gt; 32), byte(to &gt;&gt; 40), byte(to &gt;&gt; 48), byte(to &gt;&gt; 56), // movabs rdx,to 0xFF, 0xE2, // jmp rdx } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"主要思路\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"全局","slug":"全局","link":"#全局","children":[]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":0.39,"words":116},"filePathRelative":"go/asm/monkey patch.md","localizedDate":"2023年3月11日","excerpt":"<h1> 主要思路</h1>\\n<blockquote>\\n<p>注意，plan9 和 intel 汇编指令不同</p>\\n</blockquote>\\n<p>replacefunc 替换 rawfunc</p>\\n<h2> 全局</h2>\\n<p>先不区分协程，全局生效，虽然会有很多问题</p>\\n<p>先找到 replacefunc 和 rawfunc 内存地址，</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>replacefuncReflectValue <span class=\\"token operator\\">=</span> reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ValueOf</span><span class=\\"token punctuation\\">(</span>replacefunc<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 获取reflect.Value</span>\\nreplacefuncPtr <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">uintprt</span><span class=\\"token punctuation\\">(</span>unsate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Pointer</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>replacefuncReflectValue<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//??</span>\\n<span class=\\"token comment\\">// replacefunc 内存地址做处理，</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">jmp</span><span class=\\"token punctuation\\">(</span>to <span class=\\"token builtin\\">uintptr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">byte</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">byte</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token number\\">0x48</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0xBA</span><span class=\\"token punctuation\\">,</span>     <span class=\\"token comment\\">// movabs rdx</span>\\n    <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>to<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>to <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>to <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">16</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>to <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">24</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>to <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">32</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>to <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">40</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>to <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">48</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>to <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">56</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// movabs rdx,to</span>\\n    <span class=\\"token number\\">0xFF</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0xE2</span><span class=\\"token punctuation\\">,</span>     <span class=\\"token comment\\">// jmp rdx</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

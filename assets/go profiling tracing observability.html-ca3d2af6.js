import{_ as n,V as s,W as a,$ as e}from"./framework-7d796c00.js";const t={},o=e(`<h1 id="go-profiling-tracing-observability" tabindex="-1"><a class="header-anchor" href="#go-profiling-tracing-observability" aria-hidden="true">#</a> go profiling tracing observability</h1><p>Goroutine scheduler</p><p>Garbage Collection</p><p>The stack</p><p>The heap</p><h2 id="go-profilers" tabindex="-1"><a class="header-anchor" href="#go-profilers" aria-hidden="true">#</a> Go profilers</h2><h3 id="cpu-profiler" tabindex="-1"><a class="header-anchor" href="#cpu-profiler" aria-hidden="true">#</a> cpu profiler</h3><p>两种方式：</p><p>1.写文件</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	file<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;./cpu.pprof&quot;</span><span class="token punctuation">)</span>
	pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// go tool pprof [--http=:8080] cpu.pprof|http://127.0.0.1:xxx/debug/pprof/profile [web浏览器]本地命令 打开 [文件采集或者web采集]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.import net/http/pprof</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">&quot;net/http/pprof&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="memory-profiler" tabindex="-1"><a class="header-anchor" href="#memory-profiler" aria-hidden="true">#</a> Memory profiler</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>file<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;./mem.pprof&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// allocs or heap</span>
<span class="token comment">// Both profiles contain the same data, the only difference is that the allocs profile has alloc_space/bytes set as the default sample type, whereas the heap profile defaults to inuse_space/bytes. This is used by the pprof tool to decide which sample type to show by default.</span>
pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">&quot;allocs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">&quot;allocs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// go tool pprof [--http=:8080] cpu.pprof|http://127.0.0.1:xxx/debug/pprof/profile [web浏览器]本地命令 打开 [文件采集或者web采集]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.import net/http/pprof</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">&quot;net/http/pprof&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="block-profiler" tabindex="-1"><a class="header-anchor" href="#block-profiler" aria-hidden="true">#</a> Block profiler</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>runtime<span class="token punctuation">.</span><span class="token function">SetBlockProfileRate</span><span class="token punctuation">(</span><span class="token number">100_000_000</span><span class="token punctuation">)</span> <span class="token comment">// WARNING: Can cause some CPU overhead</span>
file<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;./block.pprof&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">&quot;block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// go tool pprof [--http=:8080] cpu.pprof|http://127.0.0.1:xxx/debug/pprof/profile [web浏览器]本地命令 打开 [文件采集或者web采集]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.import net/http/pprof</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">&quot;net/http/pprof&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="mutex-profiler" tabindex="-1"><a class="header-anchor" href="#mutex-profiler" aria-hidden="true">#</a> Mutex profiler</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>runtime.SetMutexProfileFraction(100)
file, _ := os.Create(&quot;./mutex.pprof&quot;)
defer pprof.Lookup(&quot;mutex&quot;).WriteTo(file, 0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.import net/http/pprof</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">&quot;net/http/pprof&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3>`,25),p=[o];function i(l,c){return s(),a("div",null,p)}const u=n(t,[["render",i],["__file","go profiling tracing observability.html.vue"]]);export{u as default};

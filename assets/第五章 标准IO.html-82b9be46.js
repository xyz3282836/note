import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-6f5bc1f7.js";const t={},p=e(`<h1 id="第五章-标准-io" tabindex="-1"><a class="header-anchor" href="#第五章-标准-io" aria-hidden="true">#</a> 第五章 标准 IO</h1><p>标准 IO 不仅仅是 unix 实现了。</p><p>这个库是 ISO C 标准说明。</p><p>Single UNIX Specification 对 ISO C 进行了补充，定义了另外一些接口。</p><h2 id="流和-file-对象" tabindex="-1"><a class="header-anchor" href="#流和-file-对象" aria-hidden="true">#</a> 流和 FILE 对象</h2><p>第三章围绕 fd，而这章函数围绕流</p><p>流的定向决定了读写字符是单字节还是多字节-宽</p><p>在未定义的流上使用单字节 IO 函数或者多字节 IO 函数，则流的定向将被设置单或者宽</p><p>只有两个函数可以改变流的定向：freopen 和 fwide</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wchar.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">fwide</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span><span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//流宽定向返回正值，字节定向返回负值，为定向返回0</span>
设定流的定向，前提条件是未被设定流的定向
流可能无效，那么需要前后检查errno

macos的FILE定义
<span class="token keyword">typedef</span>	<span class="token keyword">struct</span> <span class="token class-name">__sFILE</span> <span class="token punctuation">{</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>_p<span class="token punctuation">;</span>	<span class="token comment">/* current position in (some) buffer */</span>
	<span class="token keyword">int</span>	_r<span class="token punctuation">;</span>		<span class="token comment">/* read space left for getc() */</span>
	<span class="token keyword">int</span>	_w<span class="token punctuation">;</span>		<span class="token comment">/* write space left for putc() */</span>
	<span class="token keyword">short</span>	_flags<span class="token punctuation">;</span>		<span class="token comment">/* flags, below; this FILE is free if 0 */</span>
	<span class="token keyword">short</span>	_file<span class="token punctuation">;</span>		<span class="token comment">/* fileno, if Unix descriptor, else -1 */</span>
	<span class="token keyword">struct</span>	<span class="token class-name">__sbuf</span> _bf<span class="token punctuation">;</span>	<span class="token comment">/* the buffer (at least 1 byte, if !NULL) */</span>
	<span class="token keyword">int</span>	_lbfsize<span class="token punctuation">;</span>	<span class="token comment">/* 0 or -_bf._size, for inline putc */</span>

	<span class="token comment">/* operations */</span>
	<span class="token keyword">void</span>	<span class="token operator">*</span>_cookie<span class="token punctuation">;</span>	<span class="token comment">/* cookie passed to io functions */</span>
	<span class="token keyword">int</span>	<span class="token punctuation">(</span><span class="token operator">*</span> _Nullable _close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	<span class="token punctuation">(</span><span class="token operator">*</span> _Nullable _read<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">fpos_t</span>	<span class="token punctuation">(</span><span class="token operator">*</span> _Nullable _seek<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">fpos_t</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	<span class="token punctuation">(</span><span class="token operator">*</span> _Nullable _write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* separate buffer for long sequences of ungetc() */</span>
	<span class="token keyword">struct</span>	<span class="token class-name">__sbuf</span> _ub<span class="token punctuation">;</span>	<span class="token comment">/* ungetc buffer */</span>
	<span class="token keyword">struct</span> <span class="token class-name">__sFILEX</span> <span class="token operator">*</span>_extra<span class="token punctuation">;</span> <span class="token comment">/* additions to FILE to not break ABI */</span>
	<span class="token keyword">int</span>	_ur<span class="token punctuation">;</span>		<span class="token comment">/* saved _r when _r is counting ungetc data */</span>

	<span class="token comment">/* tricks to meet minimum requirements even when malloc() fails */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> _ubuf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">/* guarantee an ungetc() buffer */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> _nbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">/* guarantee a getc() buffer */</span>

	<span class="token comment">/* separate buffer for fgetln() when line crosses buffer boundary */</span>
	<span class="token keyword">struct</span>	<span class="token class-name">__sbuf</span> _lb<span class="token punctuation">;</span>	<span class="token comment">/* buffer for fgetln() */</span>

	<span class="token comment">/* Unix stdio files get aligned to block boundaries on fseek() */</span>
	<span class="token keyword">int</span>	_blksize<span class="token punctuation">;</span>	<span class="token comment">/* stat.st_blksize (may be != _bf._size) */</span>
	<span class="token class-name">fpos_t</span>	_offset<span class="token punctuation">;</span>	<span class="token comment">/* current lseek offset (see WARNING) */</span>
<span class="token punctuation">}</span> FILE


<span class="token comment">/* stdio buffers */</span>
<span class="token keyword">struct</span> <span class="token class-name">__sbuf</span> <span class="token punctuation">{</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>	<span class="token operator">*</span>_base<span class="token punctuation">;</span>
	<span class="token keyword">int</span>		_size<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缓冲" tabindex="-1"><a class="header-anchor" href="#缓冲" aria-hidden="true">#</a> 缓冲</h2><p>全缓冲</p><p>满了才 flush</p><p>行缓冲</p><p>遇到换行符就 flush，终端是行缓冲</p><p>不带缓冲</p><p>一般标准错误就是不带缓冲的</p><p>更改系统缓冲类型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">setbuf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>restrict fp<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通常全缓冲</span>
<span class="token keyword">int</span> <span class="token function">setvbuf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>restrict fp<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">,</span><span class="token keyword">int</span> mode<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setvbuf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>_IOFBF<span class="token punctuation">,</span>BUFSIZE<span class="token punctuation">)</span> 相当于 <span class="token function">setbuf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span>buf<span class="token punctuation">)</span>
<span class="token comment">/*
mode:
_IOFBF
_IOLBF
_IONBF
*/</span>
使该流所有未写的数据都被传送至内核
<span class="token keyword">int</span> <span class="token function">fflush</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出错返回EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打开流" tabindex="-1"><a class="header-anchor" href="#打开流" aria-hidden="true">#</a> 打开流</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
FILE <span class="token operator">*</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict pathname<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict type<span class="token punctuation">)</span><span class="token punctuation">;</span>
FILE <span class="token operator">*</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict pathname<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict type<span class="token punctuation">,</span>FILE <span class="token operator">*</span>restrict stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
FILE <span class="token operator">*</span><span class="token function">fdopen</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
type<span class="token operator">:</span><span class="token number">15</span>种不同的值
<span class="token comment">/*

*/</span>
<span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fopen：文件名打开</p><p>freopen：指定一个流上打开文件</p><p>fdopen：fd 打开，一般用于管道和网络通信</p><p>ps：ISO C 并不涉及文件描述符 fd，而 POSIX.1 具有</p><h2 id="读和写流" tabindex="-1"><a class="header-anchor" href="#读和写流" aria-hidden="true">#</a> 读和写流</h2><p>打开流有三种不同类型的非格式化 IO</p><ol><li>每次一个字符的 IO</li><li>每次一行的 IO，可用 fgets 和 fputs</li><li>直接 IO(别称：二进制 IO)，可用 fread 和 fwrite</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
输入函数
<span class="token keyword">int</span> <span class="token function">getc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
getchar等同于getc(stdin)
getc和fgetc：
*/</span>
输出函数
<span class="token keyword">int</span> <span class="token function">putc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3 个函数出错和到达文件尾端都是返回相同值，需要下面两个函数做区分</p><p>大多数每个流在 FILE 对象中维护两个标志</p><p>出错标志</p><p>文件结束标志</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">ferror</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">feof</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">clearerr</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">ungets</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实质也是写到缓冲区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>clearerr 可以清除上面两个标志</p><p>从流中读取数据，可以用 ungetc 将字符再压回流中</p><h2 id="行-io" tabindex="-1"><a class="header-anchor" href="#行-io" aria-hidden="true">#</a> 行 IO</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>FILE <span class="token operator">*</span>restrict fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从指定流读到缓冲区</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从标准输入读，不推荐用了</span>

<span class="token keyword">int</span> <span class="token function">fput</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict str<span class="token punctuation">,</span>FILE <span class="token operator">*</span>restrict fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写到指定流</span>
<span class="token keyword">int</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//还是不用用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二进制-io" tabindex="-1"><a class="header-anchor" href="#二进制-io" aria-hidden="true">#</a> 二进制 IO</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>restrict ptr<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span><span class="token class-name">size_t</span> nobj<span class="token punctuation">,</span>FILE <span class="token operator">*</span>restrict fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>restrict ptr<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span><span class="token class-name">size_t</span> nobj<span class="token punctuation">,</span>FILE <span class="token operator">*</span>restrict fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定位流" tabindex="-1"><a class="header-anchor" href="#定位流" aria-hidden="true">#</a> 定位流</h2><p>ftell,fseek 文件位置放在一个长整型中</p><p>ftello,fseeko 使用 off_t</p><p>fgetpos,fsetpos 使用抽象数据类型 fpos_t，非 UNIX 系统可以使用</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">long</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//success:当前文件位置指示 fail:-1L</span>
<span class="token keyword">int</span> <span class="token function">fseek</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span><span class="token keyword">long</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将流设置到文件其实位置</span>

<span class="token class-name">off_t</span> <span class="token function">ftello</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与ftell大致相同</span>
<span class="token keyword">int</span> <span class="token function">fseeko</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span><span class="token class-name">off_t</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与fseek相同</span>

<span class="token keyword">int</span> <span class="token function">fgetpos</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>restrict fp<span class="token punctuation">,</span><span class="token class-name">fpos_t</span> <span class="token operator">*</span>restrict pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fsetpos</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">fpos_t</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="格式化-io" tabindex="-1"><a class="header-anchor" href="#格式化-io" aria-hidden="true">#</a> 格式化 IO</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> printf
<span class="token keyword">int</span> fprintf
<span class="token keyword">int</span> dprintf
<span class="token keyword">int</span> sprintf
<span class="token keyword">int</span> snprintf

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>
printf变体
<span class="token keyword">int</span> vprintf
<span class="token keyword">int</span> vfprintf
<span class="token keyword">int</span> vdprintf
<span class="token keyword">int</span> vsprintf
<span class="token keyword">int</span> vsnprintf

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> scanf
<span class="token keyword">int</span> fscanf
<span class="token keyword">int</span> sscanf

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>
<span class="token keyword">int</span> vscanf
<span class="token keyword">int</span> vfscanf
<span class="token keyword">int</span> vsscanf

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">fileno</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对一个流使用，获取这个流的fd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>标准 IO 库最终都要调用第三章的 IO 历程</p><h2 id="临时文件" tabindex="-1"><a class="header-anchor" href="#临时文件" aria-hidden="true">#</a> 临时文件</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">inlucde</span> <span class="token expression"><span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">tmpnam</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//产生一个有效路径名字符串</span>
FILE <span class="token operator">*</span><span class="token function">tmpfile</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先产生一个唯一路径名，然后，用此创建一个文件，并立即unlink</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">mkdtemp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建目录</span>

<span class="token keyword">int</span> <span class="token function">mkstemp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建名字 返回fd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应该使用 tmpfile 和 mkstemp</p><h2 id="内存流" tabindex="-1"><a class="header-anchor" href="#内存流" aria-hidden="true">#</a> 内存流</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
FILE <span class="token operator">*</span><span class="token function">fmemopen</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
FILE <span class="token operator">*</span><span class="token function">open_memstream</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>bufp<span class="token punctuation">,</span><span class="token class-name">size_t</span> <span class="token operator">*</span>sizep<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wchar.h&gt;</span></span>
FILE <span class="token operator">*</span><span class="token function">open_wmemstream</span><span class="token punctuation">(</span><span class="token class-name">wchar_t</span> <span class="token operator">*</span><span class="token operator">*</span>bufp<span class="token punctuation">,</span><span class="token class-name">size_t</span> <span class="token operator">*</span>sizep<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准-io-的替代软件" tabindex="-1"><a class="header-anchor" href="#标准-io-的替代软件" aria-hidden="true">#</a> 标准 IO 的替代软件</h2><p>快速 IO 库 fio</p><p>sfio</p><p>mmap</p><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题" aria-hidden="true">#</a> 习题</h2><p>标准 IO 流怎么使用 fsync</p><p>先调用 fflush( 全都送到内核)，再调用 fsync(内核写到缓冲区，然后才能写入磁盘，fd 可以通过 fileno 获取)</p><p>fgets 通常处理行缓冲，自动冲洗的</p>`,63),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","第五章 标准IO.html.vue"]]);export{d as default};

import{_ as n,X as s,Y as a,Z as t}from"./framework-418c825b.js";const p={},o=t(`<h1 id="套接字" tabindex="-1"><a class="header-anchor" href="#套接字" aria-hidden="true">#</a> 套接字</h1><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span><span class="token keyword">int</span> type<span class="token punctuation">,</span><span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
domain<span class="token operator">:</span>
AF_INET IPv4
AF_INET6 IPv6
AF_UNIX 别名 AF_LOCAL unix域
AF_UPSPEC

type<span class="token operator">:</span>
SOCK_DGRAM 默认UDP 无连接 报文
SOCK_RAW 直接访问下面的网络层 应用程序负责构造自己的协议头部，这是因为传输协议（如 TCP 和 UDP） 被绕过了
SOCK_SEQPACKET 面向连接 报文
SOCK_STREAM 默认tcp 面向连接 字节流

protocol<span class="token operator">:</span> <span class="token comment">//参数 protocol 通常是 0，表示为给定的域和套接字类型选择默认协议</span>
IPPROTO_IP IPv4
IPPROTO_IPV6 IPv6
IPPROTO_ICMP
IPPROTO_RAW
IPPROTO_TCP tcp
IPPROTO_UDP udp

<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ai_flags<span class="token punctuation">;</span><span class="token comment">// 定义如何处理地址和名字</span>
    <span class="token keyword">int</span> ai_family<span class="token punctuation">;</span><span class="token comment">// domain 域</span>
    <span class="token keyword">int</span> ai_socktype<span class="token punctuation">;</span><span class="token comment">//类型</span>
    <span class="token keyword">int</span> ai_protocol<span class="token punctuation">;</span><span class="token comment">//协议</span>
    <span class="token class-name">socklen_t</span> ai_addrlen<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>ai_addr<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ai_canonname<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>ai_next<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">{</span>
    <span class="token class-name">sa_family_t</span> sa_family<span class="token punctuation">;</span>
    <span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//linux sa_data[14];</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
给一个接收客户端请求的服务器套接字关联上一个众所周知的地址，关联地址和套接字
<span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

建立连接
<span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token class-name">socket_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

服务器调用 listen 函数来宣告它愿意接受连接请求
<span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
backlog 提示系统该进程所要入队的未完成连接请求数量
一旦队列满，系统就会拒绝多余的连接请求，所以 backlog 的值应该基于服务器期望负载和 处理量来选择，其中处理量是指接受连接请求与启动服务的数量

一旦服务器调用了 listen，所用的套接字就能接收连接请求。使用 accept 函数获得连接 请求并建立连接
<span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockefd<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">socketaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token class-name">socklen_t</span> <span class="token operator">*</span>restrict len<span class="token punctuation">)</span><span class="token punctuation">;</span>
函数 accept 所返回的文件描述符是套接字描述符，该描述符连接到调用 connect 的客户端
这个新的套接字描述符和原始套接字（sockfd）具有相同的套接字类型和地址族
传给 accept 的原始套接字没有关联到这个连接，而是继续保持可用状态并接收其他连接请求
返回时，accept 会在缓冲区填充客户端的地址，并且更新指向 len 的整数来反映该地址的大小
如果没有连接请求在等待，accept 会阻塞直到一个请求到来。如果 sockfd 处于非阻塞模式， accept 会返回−<span class="token number">1</span>，并将 errno 设置为 EAGAIN 或 EWOULDBLOCK

允许将一个主机名和一个服务名映射到一个地址
<span class="token keyword">int</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict host<span class="token punctuation">,</span>
				<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict service<span class="token punctuation">,</span>
				<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>restrict hint<span class="token punctuation">,</span>
				<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span><span class="token operator">*</span>restrict res<span class="token punctuation">)</span><span class="token punctuation">;</span>

面向连接的套接字
<span class="token class-name">ssize_t</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> nbytes<span class="token punctuation">,</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">recv</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> nbytes<span class="token punctuation">,</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

面向无连接的套接字
<span class="token class-name">ssize_t</span> <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>destaddr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> destlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>restrict addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>restrict addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

可以发送和接受fd
<span class="token class-name">ssize_t</span> <span class="token function">sendmsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">recvmsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> option<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际例子 -- 面向有连接 tcp</p><p>与服务器通信的客户端从系统的 uptime 命令获得输出 server</p><p>gethostname =&gt; host getaddrinfo(host,&quot;sername&quot;) =&gt; addrinfo socket(addrinfo-&gt;ai_addr-&gt;sa_family)-&gt;bind(addrinfo-&gt;ai_addr)-&gt;listen =&gt; sockfd set_cloexec(sockfd) accept(sockfd,NULL,NULL) =&gt; clfd 多个连接就会有多个 函数 accept 所返回的文件描述符是<strong>套接字描述符</strong>，该描述符连接到调用 connect 的客户端 这个新的套接字描述符和原始套接字（sockfd）具有相同的套接字类型和地址族 传给 accept 的原始套接字没有关联到这个连接，而是继续保持可用状态并接收其他连接请求 set_cloexec(clfd) popen(&quot;cmd&quot;,&quot;r&quot;) =&gt; fp fget(buf,BUFSIZE,fp) -&gt; send(clfd,buf,strlen(buf),0) -&gt;pclose(fp)-&gt;close(clfd)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syslog.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFLEN</span> <span class="token expression"><span class="token number">128</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QLEN</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HOST_NAME_MAX</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOST_NAME_MAX</span> <span class="token expression"><span class="token number">256</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">int</span> <span class="token function">initserver</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> alen<span class="token punctuation">,</span> <span class="token keyword">int</span> qlen<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> fd<span class="token punctuation">;</span>
	<span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>addr<span class="token operator">-&gt;</span>sa_family<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> alen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> errout<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> SOCK_STREAM <span class="token operator">||</span> type <span class="token operator">==</span> SOCK_SEQPACKET<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> qlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">goto</span> errout<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
errout<span class="token operator">:</span>
	err <span class="token operator">=</span> errno<span class="token punctuation">;</span>
	<span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
	errno <span class="token operator">=</span> err<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> clfd<span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token function">set_cloexec</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
        <span class="token comment">//accept返回的是文件描述符，也就是套接字描述符，是套接字和fd关联</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>clfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">syslog</span><span class="token punctuation">(</span>LOG_ERR<span class="token punctuation">,</span> <span class="token string">&quot;ruptimed: accept error: %s&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">set_cloexec</span><span class="token punctuation">(</span>clfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span><span class="token string">&quot;/usr/bin/uptime&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;error: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">send</span><span class="token punctuation">(</span>clfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> BUFLEN<span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
				<span class="token function">send</span><span class="token punctuation">(</span>clfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">pclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">close</span><span class="token punctuation">(</span>clfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>ailist<span class="token punctuation">,</span> <span class="token operator">*</span>aip<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hint<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> err<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>host<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">err_quit</span><span class="token punctuation">(</span><span class="token string">&quot;usage: ruptimed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">sysconf</span><span class="token punctuation">(</span>_SC_HOST_NAME_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		n <span class="token operator">=</span> HOST_NAME_MAX<span class="token punctuation">;</span> <span class="token comment">/* best guess */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>host <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;malloc error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gethostname</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;gethostname error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token string">&quot;ruptimed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hint<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_flags <span class="token operator">=</span> AI_CANONNAME<span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_canonname <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_addr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> <span class="token string">&quot;ruptime&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hint<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ailist<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">syslog</span><span class="token punctuation">(</span>LOG_ERR<span class="token punctuation">,</span> <span class="token string">&quot;ruptimed: getaddrinfo error: %s&quot;</span><span class="token punctuation">,</span> <span class="token function">gai_strerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>aip <span class="token operator">=</span> ailist<span class="token punctuation">;</span> aip <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> aip <span class="token operator">=</span> aip<span class="token operator">-&gt;</span>ai_next<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">initserver</span><span class="token punctuation">(</span>SOCK_STREAM<span class="token punctuation">,</span> aip<span class="token operator">-&gt;</span>ai_addr<span class="token punctuation">,</span> aip<span class="token operator">-&gt;</span>ai_addrlen<span class="token punctuation">,</span> QLEN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">serve</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>client -- 面向有连接 tcp</p><p>socke-&gt;connect =&gt; sockfd recv(sockfd,buf,BUFSIZE,0) -&gt; write(STDOUT_FIFENO,buf,n)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFLEN</span> <span class="token expression"><span class="token number">128</span></span></span>
<span class="token keyword">int</span> <span class="token function">connect_retry</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> alen<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> numsec<span class="token punctuation">,</span> fd<span class="token punctuation">;</span>
	<span class="token comment">//Try to connect with exponential backoff.</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>numsec <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> numsec <span class="token operator">&lt;=</span> MAXSLEEP<span class="token punctuation">;</span> numsec <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> type<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> alen<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//Connection accepted.</span>
			<span class="token keyword">return</span> <span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//Delay before trying again.</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>numsec <span class="token operator">&lt;=</span> MAXSLEEP <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
			<span class="token function">sleep</span><span class="token punctuation">(</span>numsec<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">print_uptime</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFLEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;recv error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>ailist<span class="token punctuation">,</span> <span class="token operator">*</span>aip<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hint<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> err<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token function">err_quit</span><span class="token punctuation">(</span><span class="token string">&quot;usage: ruptime hostname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hint<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空指针或者数组</span>
	hint<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_canonname <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_addr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//getaddrinfo 函数允许将一个主机名和一个服务名映射到一个地址</span>
    <span class="token comment">//hint 是一个用于过滤地址的模板，包 括 ai_family、ai_flags、ai_protocol 和 ai_socktype 字段</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;ruptime&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hint<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ailist<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_quit</span><span class="token punctuation">(</span><span class="token string">&quot;getaddrinfo error: %s&quot;</span><span class="token punctuation">,</span> <span class="token function">gai_strerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>aip <span class="token operator">=</span> ailist<span class="token punctuation">;</span> aip <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> aip <span class="token operator">=</span> aip<span class="token operator">-&gt;</span>ai_next<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">connect_retry</span><span class="token punctuation">(</span>aip<span class="token operator">-&gt;</span>ai_family<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> aip<span class="token operator">-&gt;</span>ai_addr<span class="token punctuation">,</span> aip<span class="token operator">-&gt;</span>ai_addrlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			err <span class="token operator">=</span> errno<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token function">print_uptime</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">err_exit</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;can&#39;t connect to %s&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子</p><p>server -- 面向无连接 udp</p><p>accept 之前一样 =&gt; sockfd 不用 accept，用 recvfrom 阻塞，recvfrom 通常用于无连接的套接字 recvfrom(sockfd,buf,BUFSIZE,0,addr,&amp;alen) popen(&quot;cmd&quot;,&quot;r&quot;) =&gt; fp fget(buf,BUFSIZE,fp) -&gt; sendto(clfd,buf,strlen(buf),0,addr,alen) -&gt;pclose(fp)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syslog.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFLEN</span> <span class="token expression"><span class="token number">128</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXADDRLEN</span> <span class="token expression"><span class="token number">256</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HOST_NAME_MAX</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOST_NAME_MAX</span> <span class="token expression"><span class="token number">256</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">initserver</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">socklen_t</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	<span class="token class-name">socklen_t</span> alen<span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> abuf<span class="token punctuation">[</span>MAXADDRLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span>abuf<span class="token punctuation">;</span>
	<span class="token function">set_cloexec</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		alen <span class="token operator">=</span> MAXADDRLEN<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFLEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>alen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">syslog</span><span class="token punctuation">(</span>LOG_ERR<span class="token punctuation">,</span> <span class="token string">&quot;ruptimed: recvfrom error: %s&quot;</span><span class="token punctuation">,</span>
				   <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span><span class="token string">&quot;/usr/bin/uptime&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;error: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> alen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> BUFLEN<span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
				<span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> alen<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">pclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>ailist<span class="token punctuation">,</span> <span class="token operator">*</span>aip<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hint<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> err<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>host<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">err_quit</span><span class="token punctuation">(</span><span class="token string">&quot;usage: ruptimed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">sysconf</span><span class="token punctuation">(</span>_SC_HOST_NAME_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		n <span class="token operator">=</span> HOST_NAME_MAX<span class="token punctuation">;</span> <span class="token comment">/* best guess */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>host <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;malloc error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gethostname</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;gethostname error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token string">&quot;ruptimed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hint<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_flags <span class="token operator">=</span> AI_CANONNAME<span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_DGRAM<span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_canonname <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_addr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> <span class="token string">&quot;ruptime&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hint<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ailist<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">syslog</span><span class="token punctuation">(</span>LOG_ERR<span class="token punctuation">,</span> <span class="token string">&quot;ruptimed: getaddrinfo error: %s&quot;</span><span class="token punctuation">,</span> <span class="token function">gai_strerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>aip <span class="token operator">=</span> ailist<span class="token punctuation">;</span> aip <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> aip <span class="token operator">=</span> aip<span class="token operator">-&gt;</span>ai_next<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">initserver</span><span class="token punctuation">(</span>SOCK_DGRAM<span class="token punctuation">,</span> aip<span class="token operator">-&gt;</span>ai_addr<span class="token punctuation">,</span> aip<span class="token operator">-&gt;</span>ai_addrlen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">serve</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>client -- 面向无连接 udp</p><p>socke=&gt; sockfd sendto(sockfd,buf,1,0,addr,addrlen) 对于基于数据报的协议， 需要有一种 方法通知服务器来执行服务，简单地向服务器发送了 1 字节的数据。 服务器将 接收它， 从数据包中得到地址，并使用这个地址来传送它的响应 alarm(TIMEOUT) recvfrom(sockfd,buf,BUFSIZE,0,NULL,NULL) 阻塞 alarm(0) alarm(0) write(STDOUT_FIFENO,buf,n)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFLEN</span> <span class="token expression"><span class="token number">128</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIMEOUT</span> <span class="token expression"><span class="token number">20</span></span></span>
<span class="token keyword">void</span> <span class="token function">sigalrm</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">print_uptime</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>aip<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> aip<span class="token operator">-&gt;</span>ai_addr<span class="token punctuation">,</span> aip<span class="token operator">-&gt;</span>ai_addrlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;sendto error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">alarm</span><span class="token punctuation">(</span>TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFLEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EINTR<span class="token punctuation">)</span>
			<span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;recv error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>ailist<span class="token punctuation">,</span> <span class="token operator">*</span>aip<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hint<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> err<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">sigaction</span> sa<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token function">err_quit</span><span class="token punctuation">(</span><span class="token string">&quot;usage: ruptime hostname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	sa<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> sigalrm<span class="token punctuation">;</span>
	sa<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sa<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sigaction</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sa<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;sigaction error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hint<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_DGRAM<span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_canonname <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_addr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	hint<span class="token punctuation">.</span>ai_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;ruptime&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hint<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ailist<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_quit</span><span class="token punctuation">(</span><span class="token string">&quot;getaddrinfo error: %s&quot;</span><span class="token punctuation">,</span> <span class="token function">gai_strerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>aip <span class="token operator">=</span> ailist<span class="token punctuation">;</span> aip <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> aip <span class="token operator">=</span> aip<span class="token operator">-&gt;</span>ai_next<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>aip<span class="token operator">-&gt;</span>ai_family<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			err <span class="token operator">=</span> errno<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token function">print_uptime</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> aip<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;can&#39;t contact %s: %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UNIX 域套接字</p><p>UNIX 域套接字提供流和数据报两种接口</p><p>UNIX 域数据报服务是可靠的，既不会丢失报文 也不会传递出错</p><p>UNIX 域套接字就像是套接字和管道的混合</p><p>可以使用它们面向网络的域套接 字接口或者使用 socketpair 函数来创建一对无命名的、相互连接的 UNIX 域套接字</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">socketpair</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">,</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

封装fd_pipe 函数，它使用 socketpair 函数来创建一对相互连接的 UNIX 域流套接字
<span class="token keyword">int</span> <span class="token function">fd_pipe</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一对相互连接的 UNIX 域套接字可以起到全双工管道的作用</p><p>我们将其称为 fd 管道（fd-pipe），以便与普通 的半双工管道区分开来</p><p>XSI 消息队列的使用存在一个问题，即不能将它们和 poll 或者 select 一起使用，这是因为它们不能关联到文件描述符。然而，套接字是和文件描述符相关联的，消息 到达时，可以用套接字来通知。对每个消息队列使用一个线程。每个线程都会在 msgrcv 调用中 阻塞。当消息到达时，线程会把它写入一个 UNIX 域套接字的一端。当 poll 指示套接字可以读 取数据时，应用程序会使用这个套接字的另外一端来接收这个消息</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NQ</span> <span class="token expression"><span class="token number">3</span>	   </span><span class="token comment">/* number of queues */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXMSZ</span> <span class="token expression"><span class="token number">512</span> </span><span class="token comment">/* maximum message size */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY</span> <span class="token expression"><span class="token number">0x123</span>  </span><span class="token comment">/* key for first message queue */</span></span>
<span class="token keyword">struct</span> <span class="token class-name">threadinfo</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> qid<span class="token punctuation">;</span>
	<span class="token keyword">int</span> fd<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">mymesg</span>
<span class="token punctuation">{</span>
	<span class="token keyword">long</span> mtype<span class="token punctuation">;</span>
	<span class="token keyword">char</span> mtext<span class="token punctuation">[</span>MAXMSZ<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">mymesg</span> m<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">threadinfo</span> <span class="token operator">*</span>tip <span class="token operator">=</span> arg<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//从队列中取用消息，每个线程都会在 msgrcv 调用中阻塞</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span>tip<span class="token operator">-&gt;</span>qid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> MAXMSZ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MSG_NOERROR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;msgrcv error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//当消息到达时，线程会把它写入一个 UNIX 域套接字的一端</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>tip<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> m<span class="token punctuation">.</span>mtext<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;write error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> n<span class="token punctuation">,</span> err<span class="token punctuation">;</span>
	<span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//一对无命名的、相互连接的 UNIX 域套接字</span>
	<span class="token keyword">int</span> qid<span class="token punctuation">[</span>NQ<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//消息队列</span>
	<span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pfd<span class="token punctuation">[</span>NQ<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//pollfd.fd是poll关心的fd</span>
	<span class="token keyword">struct</span> <span class="token class-name">threadinfo</span> ti<span class="token punctuation">[</span>NQ<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线程</span>
	<span class="token class-name">pthread_t</span> tid<span class="token punctuation">[</span>NQ<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存放线程id</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXMSZ<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NQ<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
        <span class="token comment">//打开一个现有队列或创建一个新队列</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>qid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span><span class="token punctuation">(</span>KEY <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;msgget error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;queue ID %d is %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> qid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//我们使用的是数据报（SOCK_DGRAM）套接字而不是流套接字。</span>
		<span class="token comment">//这样做可以保持消息 边界，以保证从套接字里一次只读取一条消息</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;socketpair error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//read</span>
		pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>

		ti<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>qid <span class="token operator">=</span> qid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//msgrcv</span>
		ti<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//write(tip-&gt;fd,msg.mtext,n)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> helper<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ti<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token function">err_exit</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;pthread_create error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
        <span class="token comment">//当 poll 指示套接字可以读取数据时，应用程序会使用这个套接字的另外一端来接收这个消息</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">poll</span><span class="token punctuation">(</span>pfd<span class="token punctuation">,</span> NQ<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;poll error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NQ<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>pfd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
					<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;read error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				buf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;queue id %d, message %s\\n&quot;</span><span class="token punctuation">,</span> qid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然 socketpair 函数能创建一对相互连接的套接字，但是每一个套接字都没有名字。这意味着无关进程不能使用它们</p><p>命名 UNIX 套接字</p><p>本质就是 bind 绑定参数结构体中的 sun_path 是一个.sock 文件路径，与网络 ipc 中绑定网络地址不同</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>将一个地址绑定到一个因特网域套接字上
<span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

将地址绑定到 UNIX 域套接字
<span class="token function">bind</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>un<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
sockaddr中sun_path是个文件 <span class="token punctuation">.</span>sock

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;apue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> fd<span class="token punctuation">,</span> size<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> un<span class="token punctuation">;</span>
	un<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_UNIX<span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>un<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;foo.socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;socket failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	size <span class="token operator">=</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span><span class="token punctuation">,</span> sun_path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>un<span class="token punctuation">.</span>sun_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>un<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">&quot;bind failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;UNIX domain socket bound\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在两个进程之间传送打开文件描述符的技术是非常有用的，就是使用 sendmsg 和 recvmsg 函数支持 fd 发送接受</p>`,31),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","套接字.html.vue"]]);export{k as default};

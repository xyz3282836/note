const t=JSON.parse('{"key":"v-29de861a","path":"/apue/%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%20%E7%BB%88%E7%AB%AFIO.html","title":"第十八章 终端 IO","lang":"zh-CN","frontmatter":{"description":"第十八章 终端 IO 终端 I/O 处理分立为两种不同的风格：一种是系统 Ⅲ 的风格，由 System V 沿续下来，另一种是 V7 的风格，它成为 BSD 派生的系统终端 I/O 处理的标准 终端 I/O 有两种不同的工作模式：规范模式输入处理；非规范模式输入处理 比如通常的 shell 就是规范模式，而 vim 编辑器就是非规范模式 特殊输入字符 posix.1 获得和设置终端属性 struct termios { tcflag_t c_iflag;/* input flags */ tcflag_t c_oflag;/* output flags */ tcflag_t c_cflag;/* control flags */ tcflag_t c_lflag;/* local flags */ cc_t c_cc[NCCS];/* control characters */ }; 所有选项都可以被检查和更改 #include &lt;termios.h&gt; int tcgetattr(int fd,struct *termptr); int tcsetattr(int fd,int opt,const struct termios *termptr);","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/apue/%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%20%E7%BB%88%E7%AB%AFIO.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"第十八章 终端 IO"}],["meta",{"property":"og:description","content":"第十八章 终端 IO 终端 I/O 处理分立为两种不同的风格：一种是系统 Ⅲ 的风格，由 System V 沿续下来，另一种是 V7 的风格，它成为 BSD 派生的系统终端 I/O 处理的标准 终端 I/O 有两种不同的工作模式：规范模式输入处理；非规范模式输入处理 比如通常的 shell 就是规范模式，而 vim 编辑器就是非规范模式 特殊输入字符 posix.1 获得和设置终端属性 struct termios { tcflag_t c_iflag;/* input flags */ tcflag_t c_oflag;/* output flags */ tcflag_t c_cflag;/* control flags */ tcflag_t c_lflag;/* local flags */ cc_t c_cc[NCCS];/* control characters */ }; 所有选项都可以被检查和更改 #include &lt;termios.h&gt; int tcgetattr(int fd,struct *termptr); int tcsetattr(int fd,int opt,const struct termios *termptr);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:author","content":"rz"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十八章 终端 IO\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"rz\\",\\"url\\":\\"https://github.com/xyz3282836/monodoc\\"}]}"]]},"headers":[{"level":2,"title":"特殊输入字符","slug":"特殊输入字符","link":"#特殊输入字符","children":[]},{"level":2,"title":"获得和设置终端属性","slug":"获得和设置终端属性","link":"#获得和设置终端属性","children":[]},{"level":2,"title":"stty 命令","slug":"stty-命令","link":"#stty-命令","children":[]},{"level":2,"title":"波特率函数","slug":"波特率函数","link":"#波特率函数","children":[]},{"level":2,"title":"行为控制函数","slug":"行为控制函数","link":"#行为控制函数","children":[]},{"level":2,"title":"终端标志","slug":"终端标志","link":"#终端标志","children":[]},{"level":2,"title":"规范模式","slug":"规范模式","link":"#规范模式","children":[]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"apue/第十八章 终端IO.md","localizedDate":"2023年3月11日","excerpt":"<h1> 第十八章 终端 IO</h1>\\n<p>终端 I/O 处理分立为两种不同的风格：一种是系统 Ⅲ 的风格，由 System V 沿续下来，另一种是 V7 的风格，它成为 BSD 派生的系统终端 I/O 处理的标准</p>\\n<p>终端 I/O 有两种不同的工作模式：规范模式输入处理；非规范模式输入处理</p>\\n<p>比如通常的 shell 就是规范模式，而 vim 编辑器就是非规范模式</p>\\n<h2> 特殊输入字符</h2>\\n<p>posix.1</p>\\n<h2> 获得和设置终端属性</h2>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">termios</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">tcflag_t</span> c_iflag<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">/* input flags */</span>\\n    <span class=\\"token class-name\\">tcflag_t</span> c_oflag<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">/* output flags */</span>\\n    <span class=\\"token class-name\\">tcflag_t</span> c_cflag<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">/* control flags */</span>\\n    <span class=\\"token class-name\\">tcflag_t</span> c_lflag<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">/* local flags */</span>\\n    <span class=\\"token class-name\\">cc_t</span>  c_cc<span class=\\"token punctuation\\">[</span>NCCS<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">/* control characters */</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n所有选项都可以被检查和更改\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;termios.h&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">tcgetattr</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> fd<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">struct</span> <span class=\\"token operator\\">*</span>termptr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">tcsetattr</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> fd<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> opt<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">termios</span> <span class=\\"token operator\\">*</span>termptr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};

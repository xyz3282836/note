const n=JSON.parse('{"key":"v-05e9d15d","path":"/apue/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E4%BF%A1%E5%8F%B7.html","title":"第十章 信号","lang":"zh-CN","frontmatter":{"description":"第十章 信号 介绍信号机制，说明每种信号的一般用法 分析早期实现，分析存在问题并且解决 信号 V7 15 BSD 31 FreeBSD 32 Mac OS Linux 31 Solaris 40 两个不能被捕捉或忽略的信号：SIGKILL 和 SIGSTOP 中断 退出 挂起 #include &lt;signal.h&gt; void (*signal(int signo,void(*func)(int)))(int); //表达式最上层是signal返回函数指针的函数的定义 //分开看，signal的返回值定义，signal函数本身定义 void(*)(int);//signal返回一个函数指针，这是描述该函数定义的，该函数有个参数int，无返回值void *signal(int signo,void(*func)(int)); //signal函数两个参数，返回值是个指针，关于这个指针所指向的函数定义见上方 //两个参数一：signo,int //两个参数二：*func，函数指针，该函数有参数一int，无返回值 --------------------------------------------------------- #include &lt;stdio.h&gt; #include &lt;signal.h&gt; typedef void (*signal_handler)(int);//void(*func)(int) void signal_handler_fun(int signal_no) { printf(\\"catch signal no is %d\\\\n\\", signal_no); } int main(void) { signal_handler signal_fun = signal_handler_fun; signal(SIGINT, signal_fun); int lnum = 0; for (;;) { printf(\\"num is %d\\\\n\\", lnum); lnum++; sleep(1); } return 0; } //上面太复杂 typedef void Sigfunc(int); Sigfunc *signal(int, Sigfunc *);","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/apue/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E4%BF%A1%E5%8F%B7.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"第十章 信号"}],["meta",{"property":"og:description","content":"第十章 信号 介绍信号机制，说明每种信号的一般用法 分析早期实现，分析存在问题并且解决 信号 V7 15 BSD 31 FreeBSD 32 Mac OS Linux 31 Solaris 40 两个不能被捕捉或忽略的信号：SIGKILL 和 SIGSTOP 中断 退出 挂起 #include &lt;signal.h&gt; void (*signal(int signo,void(*func)(int)))(int); //表达式最上层是signal返回函数指针的函数的定义 //分开看，signal的返回值定义，signal函数本身定义 void(*)(int);//signal返回一个函数指针，这是描述该函数定义的，该函数有个参数int，无返回值void *signal(int signo,void(*func)(int)); //signal函数两个参数，返回值是个指针，关于这个指针所指向的函数定义见上方 //两个参数一：signo,int //两个参数二：*func，函数指针，该函数有参数一int，无返回值 --------------------------------------------------------- #include &lt;stdio.h&gt; #include &lt;signal.h&gt; typedef void (*signal_handler)(int);//void(*func)(int) void signal_handler_fun(int signal_no) { printf(\\"catch signal no is %d\\\\n\\", signal_no); } int main(void) { signal_handler signal_fun = signal_handler_fun; signal(SIGINT, signal_fun); int lnum = 0; for (;;) { printf(\\"num is %d\\\\n\\", lnum); lnum++; sleep(1); } return 0; } //上面太复杂 typedef void Sigfunc(int); Sigfunc *signal(int, Sigfunc *);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十章 信号\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"信号","slug":"信号","link":"#信号","children":[]},{"level":2,"title":"不可靠的信号","slug":"不可靠的信号","link":"#不可靠的信号","children":[]},{"level":2,"title":"中断的系统调用","slug":"中断的系统调用","link":"#中断的系统调用","children":[]},{"level":2,"title":"可重入函数","slug":"可重入函数","link":"#可重入函数","children":[]},{"level":2,"title":"kill 和 raise","slug":"kill-和-raise","link":"#kill-和-raise","children":[]},{"level":2,"title":"alarm 和 pause","slug":"alarm-和-pause","link":"#alarm-和-pause","children":[]},{"level":2,"title":"信号集合","slug":"信号集合","link":"#信号集合","children":[]},{"level":2,"title":"sigprocmask","slug":"sigprocmask","link":"#sigprocmask","children":[]},{"level":2,"title":"sigpending","slug":"sigpending","link":"#sigpending","children":[]},{"level":2,"title":"sigaction","slug":"sigaction","link":"#sigaction","children":[]},{"level":2,"title":"sigsetjump 和 siglongjmp","slug":"sigsetjump-和-siglongjmp","link":"#sigsetjump-和-siglongjmp","children":[]},{"level":2,"title":"sigsuspend","slug":"sigsuspend","link":"#sigsuspend","children":[]},{"level":2,"title":"abort","slug":"abort","link":"#abort","children":[]},{"level":2,"title":"system","slug":"system","link":"#system","children":[]},{"level":2,"title":"sleep,nanosleep,clock_nanosleep","slug":"sleep-nanosleep-clock-nanosleep","link":"#sleep-nanosleep-clock-nanosleep","children":[]},{"level":2,"title":"sigqueue","slug":"sigqueue","link":"#sigqueue","children":[]},{"level":2,"title":"作业控制信号","slug":"作业控制信号","link":"#作业控制信号","children":[]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":4.3,"words":1291},"filePathRelative":"apue/第十章 信号.md","localizedDate":"2023年3月11日","excerpt":"<h1> 第十章 信号</h1>\\n<p>介绍信号机制，说明每种信号的一般用法\\n分析早期实现，分析存在问题并且解决</p>\\n<h2> 信号</h2>\\n<p>V7 15</p>\\n<p>BSD 31</p>\\n<p>FreeBSD 32</p>\\n<p>Mac OS Linux 31</p>\\n<p>Solaris 40</p>\\n<p>两个不能被捕捉或忽略的信号：SIGKILL 和 SIGSTOP</p>\\n<p>中断</p>\\n<p>退出</p>\\n<p>挂起</p>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;signal.h&gt;</span></span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token function\\">signal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> signo<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>func<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//表达式最上层是signal返回函数指针的函数的定义</span>\\n<span class=\\"token comment\\">//分开看，signal的返回值定义，signal函数本身定义</span>\\n<span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//signal返回一个函数指针，这是描述该函数定义的，该函数有个参数int，无返回值void</span>\\n<span class=\\"token operator\\">*</span><span class=\\"token function\\">signal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> signo<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>func<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//signal函数两个参数，返回值是个指针，关于这个指针所指向的函数定义见上方</span>\\n<span class=\\"token comment\\">//两个参数一：signo,int</span>\\n<span class=\\"token comment\\">//两个参数二：*func，函数指针，该函数有参数一int，无返回值</span>\\n<span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;signal.h&gt;</span></span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>signal_handler<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//void(*func)(int)</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">signal_handler_fun</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> signal_no<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"catch signal no is %d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> signal_no<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    signal_handler signal_fun <span class=\\"token operator\\">=</span> signal_handler_fun<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">signal</span><span class=\\"token punctuation\\">(</span>SIGINT<span class=\\"token punctuation\\">,</span> signal_fun<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> lnum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"num is %d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> lnum<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        lnum<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//上面太复杂</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Sigfunc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nSigfunc <span class=\\"token operator\\">*</span><span class=\\"token function\\">signal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> Sigfunc <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

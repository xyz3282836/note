import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,b as s,d as n,e as i,a}from"./app-5693ca20.js";const l={},d=a(`<h1 id="第四章-文件目录" tabindex="-1"><a class="header-anchor" href="#第四章-文件目录" aria-hidden="true">#</a> 第四章 文件目录</h1><h2 id="stat-fstat-fstatat-lstat" tabindex="-1"><a class="header-anchor" href="#stat-fstat-fstatat-lstat" aria-hidden="true">#</a> stat,fstat,fstatat,lstat</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict pathname<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//文件有关信息</span>
<span class="token keyword">int</span> <span class="token function">fstat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件有关信息</span>
<span class="token keyword">int</span> <span class="token function">lstat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict pathname<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//link有关信息，比stat多检测link文件</span>
<span class="token keyword">int</span> <span class="token function">fstatat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict pathname<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>restrict buf<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>

<span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">{</span>
    <span class="token class-name">mode_t</span>          st_mode<span class="token punctuation">;</span>i节点 中文件访问权限
    <span class="token class-name">ino_t</span>           st_ino<span class="token punctuation">;</span>目录项中 i节点编号  文件系统中的每个目录项都有一个唯一的i节点编号
    <span class="token class-name">dev_t</span>           st_dev<span class="token punctuation">;</span>每个文件系统都有一个唯一的设备号
    <span class="token class-name">dev_t</span>           st_rdev<span class="token punctuation">;</span>
    <span class="token class-name">nlink_t</span>         st_nlink<span class="token punctuation">;</span>有链接计数
    <span class="token class-name">uid_t</span>           st_uid<span class="token punctuation">;</span>
    <span class="token class-name">gid_t</span>           st_gid<span class="token punctuation">;</span>
    <span class="token class-name">off_t</span>           st_size<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> st_atime<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> st_mtime<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> st_ctime<span class="token punctuation">;</span>
    <span class="token class-name">blksize_t</span>       st_blksize<span class="token punctuation">;</span>
    <span class="token class-name">blkcnt_t</span>        st_blocks<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">timespec</span><span class="token punctuation">{</span>
    <span class="token class-name">time_t</span> tv_sec<span class="token punctuation">;</span>
    <span class="token keyword">long</span>   tv_nsec<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">//附一份macos 10.13.4</span>
truct stat <span class="token punctuation">{</span>
	<span class="token class-name">dev_t</span>	 	st_dev<span class="token punctuation">;</span>		<span class="token comment">/* [XSI] ID of device containing file */</span>
	<span class="token class-name">ino_t</span>	  	st_ino<span class="token punctuation">;</span>		<span class="token comment">/* [XSI] File serial number */</span>
	<span class="token class-name">mode_t</span>	 	st_mode<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] Mode of file (see below) */</span>
	<span class="token class-name">nlink_t</span>		st_nlink<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] Number of hard links */</span>
	<span class="token class-name">uid_t</span>		st_uid<span class="token punctuation">;</span>		<span class="token comment">/* [XSI] User ID of the file */</span>
	<span class="token class-name">gid_t</span>		st_gid<span class="token punctuation">;</span>		<span class="token comment">/* [XSI] Group ID of the file */</span>
	<span class="token class-name">dev_t</span>		st_rdev<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] Device ID */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>_POSIX_C_SOURCE<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>_DARWIN_C_SOURCE<span class="token punctuation">)</span></span></span>
	<span class="token keyword">struct</span>	<span class="token class-name">timespec</span> st_atimespec<span class="token punctuation">;</span>	<span class="token comment">/* time of last access */</span>
	<span class="token keyword">struct</span>	<span class="token class-name">timespec</span> st_mtimespec<span class="token punctuation">;</span>	<span class="token comment">/* time of last data modification */</span>
	<span class="token keyword">struct</span>	<span class="token class-name">timespec</span> st_ctimespec<span class="token punctuation">;</span>	<span class="token comment">/* time of last status change */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
	<span class="token class-name">time_t</span>		st_atime<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] Time of last access */</span>
	<span class="token keyword">long</span>		st_atimensec<span class="token punctuation">;</span>	<span class="token comment">/* nsec of last access */</span>
	<span class="token class-name">time_t</span>		st_mtime<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] Last data modification time */</span>
	<span class="token keyword">long</span>		st_mtimensec<span class="token punctuation">;</span>	<span class="token comment">/* last data modification nsec */</span>
	<span class="token class-name">time_t</span>		st_ctime<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] Time of last status change */</span>
	<span class="token keyword">long</span>		st_ctimensec<span class="token punctuation">;</span>	<span class="token comment">/* nsec of last status change */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	<span class="token class-name">off_t</span>		st_size<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] file size, in bytes */</span>
	<span class="token class-name">blkcnt_t</span>	st_blocks<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] blocks allocated for file */</span>
	<span class="token class-name">blksize_t</span>	st_blksize<span class="token punctuation">;</span>	<span class="token comment">/* [XSI] optimal blocksize for I/O */</span>
	__uint32_t	st_flags<span class="token punctuation">;</span>	<span class="token comment">/* user defined flags for file */</span>
	__uint32_t	st_gen<span class="token punctuation">;</span>		<span class="token comment">/* file generation number */</span>
	__int32_t	st_lspare<span class="token punctuation">;</span>	<span class="token comment">/* RESERVED: DO NOT USE! */</span>
	__int64_t	st_qspare<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">/* RESERVED: DO NOT USE! */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件类型" tabindex="-1"><a class="header-anchor" href="#文件类型" aria-hidden="true">#</a> 文件类型</h2><ol><li>普通文件</li><li>目录文件</li><li>块特殊文件 FreeBSD 不再支持</li><li>字符特殊文件</li><li>FIFO 命令管道，用于进程间通信，第十五章会说明</li><li>套接字 socket，用于进程间的网络通信</li><li>符号链接</li></ol><p>文件类型信息包含在 stat 结构的 st_mode 成员中，上面有定义</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//文件类型宏  st_mode 对应上面七种文件
S_ISREG()
S_ISDIR()
S_ISBLK()
S_ISCHR()
S_ISFIFO()
S_ISSOCK()
S_ISLNK()
//POSIX.1 允许实现将IPC对象说明为文件，但是有四种unix系统不将这些对象表示为文件，蛋疼，标准不遵守
S_TYPEISMQ()  消息队列
S_TYPEISSEM() 信号量
S_TYPEISSHM() 共享存储对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置用户-id-和设置组-id" tabindex="-1"><a class="header-anchor" href="#设置用户-id-和设置组-id" aria-hidden="true">#</a> 设置用户 ID 和设置组 ID</h2><p>一个进程关联的 ID 有 6 种</p><p>实际用户 id，组 id 就是有效用户 id，组 id</p><p>执行一个程序文件的时候，如果该文件设置了下面的 S_ISUID 权限，那么进程执行这个文件的时候就会将进程有效用户 id 设置成文件所有者用户 id，类似 S_ISGID，<strong>下面有 chmod 的条件二的特例</strong></p><h4 id="s-权限位" tabindex="-1"><a class="header-anchor" href="#s-权限位" aria-hidden="true">#</a> s 权限位</h4><p>典型场景，普通用户可以修改密码，而密码记录文件/etc/passwd 和/etc/shadow 普通用户都是无法修改的，没有权限，但是 passwd 命令的权限是-rwsr-xr-x，这就以为着，普通用户使用这个命令时，在执行的进程中，实际就以属主 root 身份执行，当然前提是要有相应的执行权限 x</p><p>安全问题，第八章讨论</p><h2 id="文件访问权限" tabindex="-1"><a class="header-anchor" href="#文件访问权限" aria-hidden="true">#</a> 文件访问权限</h2><p>st_mode 值包含了这些权限。</p><p>用户(拥有者)读写执行，同组读写执行，其他组读写执行</p><p>0400 0200 0100 0040 0020 0010 0004 0002 0001</p><p>S_IRUSR S_IWUSR S_IXUSR S_IRGRP S_IWGRP S_IXGRP S_IROTH S_IWOTH S_IXOTH</p><p><strong>进程中操作文件，其实开这个进程的实际用户 id，组 id 就是进程的有效用户 id，组 id</strong></p><ol><li>打开一个文件就拥有了上目录的执行权限，对目录执行权限位被称为搜索位。<strong>这就是为什么对于目录其执行权限位常被称为搜索位的原因。</strong></li><li>读权限</li><li>写权限</li><li>open 中指定 O_TRUNC，必须要有写权限</li><li>创建新文件，必须要有<strong>当前目录的写和执行权限</strong></li><li>删除文件，必须要有<strong>当前目录的写和执行权限</strong>，对<strong>该文件本身不需要读、写权限</strong>，如果设置 t 权限那么要检测是否是文件或者目录拥有者或者 root</li><li>7 个 exec 函数任何执行某个文件，都需要具有该文件的执行权限，而且必须是普通文件</li></ol><h2 id="新文件和目录的所有权" tabindex="-1"><a class="header-anchor" href="#新文件和目录的所有权" aria-hidden="true">#</a> 新文件和目录的所有权</h2><p>新文件和新目录所有权规则相同</p><p>用户 ID 为进程有效用户 ID；组 ID 实现两种：进程有效组 ID，所在目录的组 ID</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">faccessat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token keyword">int</span> mode<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成功0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mode 值</p><p>R_OK W_OK X_OK</p><h2 id="umask" tabindex="-1"><a class="header-anchor" href="#umask" aria-hidden="true">#</a> umask</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token class-name">mode_t</span> <span class="token function">umask</span><span class="token punctuation">(</span><span class="token class-name">mode_t</span> cmask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值是之前文件模式创建屏蔽字，少数几个没有出错返回</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>作用就是无法设置权限<br> 常用 002(其他用户写),022(),027()<br> 2018-4-10 23:31</p><h2 id="chmod-fchmod-fchmodat" tabindex="-1"><a class="header-anchor" href="#chmod-fchmod-fchmodat" aria-hidden="true">#</a> chmod,fchmod,fchmodat</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">chmod</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fchmod</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fchmodat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token class-name">mode_t</span> mode<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改文件权限必须是拥有者或者超管</p><p>mode:上面 9 中再加下面六种</p><p>组合权限：S_IRWXU S_IRWXG S_IRWXO</p><p>特殊权限三种：</p><p>s 权限：<strong>S_ISUID</strong>(执行时设置用户 ID) <strong>S_ISGID</strong>(执行时设置组 ID)</p>`,37),r={href:"http://blog.163.com/muyutc@126/blog/static/1342772072009119104421207/",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>chmod(&quot;file&quot;,(buf.st_mode &amp; ~S_IXGRP) | S_ISGID)</p><p>s 权限配合执行权限（用户和组必须设置 x 权限）可以以 root 身份权限执行</p><p>vtx 权限也就是 t 权限：给目录和文件设置 t 权限是完全不同目的，目录拥有 t 权限，那么目录下的文件只有<strong>该目录拥有者</strong>或者<strong>文件拥有</strong>者和<strong>root</strong>才能删除和更名</p><p>chmod 会自动清除两个权限位的条件</p><ol><li>一些 unix 系统，不允许除 root 用户以外的用户设置文件 S_ISVTX，防止用户恶意设置，影响系统性能(linux 系统没有这种限制)</li><li>新文件的组 ID 不等于进程有效组 ID，而且没有 root 权限，那么设置组 ID 会被关闭</li></ol><h2 id="chown-fchown-fchownat-lchown" tabindex="-1"><a class="header-anchor" href="#chown-fchown-fchownat-lchown" aria-hidden="true">#</a> chown,fchown,fchownat,lchown</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">chown</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token class-name">uid_t</span> owner<span class="token punctuation">,</span><span class="token class-name">gid_t</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fchown</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token class-name">uid_t</span> owner<span class="token punctuation">,</span><span class="token class-name">gid_t</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fchownat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token class-name">uid_t</span> owner<span class="token punctuation">,</span><span class="token class-name">gid_t</span> group<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">lchown</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token class-name">uid_t</span> owner<span class="token punctuation">,</span><span class="token class-name">gid_t</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>
AT_FDCWD 相对path <span class="token operator">=</span> 绝对path 很多函数用到
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于 BSD 系统规定只有 root 用户可以更改一个文件的所有者</p><p>System V 则允许任一用户更改他们所拥有文件的所有者</p><h2 id="文件长度" tabindex="-1"><a class="header-anchor" href="#文件长度" aria-hidden="true">#</a> 文件长度</h2><p>st_size</p><p>st_blksize</p><p>st_blocks</p><h2 id="文件空洞" tabindex="-1"><a class="header-anchor" href="#文件空洞" aria-hidden="true">#</a> 文件空洞</h2><p>原因是偏移量超过文件尾端，并写入数据造成的</p><h2 id="文件截断" tabindex="-1"><a class="header-anchor" href="#文件截断" aria-hidden="true">#</a> 文件截断</h2><p>第三章 open 函数第二个参数中有个 O_TRUNC</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token class-name">off_t</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">ftruncate</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token class-name">off_t</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统" aria-hidden="true">#</a> 文件系统</h2><p>solaris 支持多种不同类型的磁盘文件系统</p><p>基于传统 bsd 的 ufs，读写 dos 的 pcfs，cd 的 hsfs</p><p>macos 大小写不敏感</p><p>2018-4-12 23:55</p><p>文件系统的构成，下面</p><ul><li>磁盘：各个分区</li><li>文件系统：自举块，超级块，柱面 0...</li><li>柱面：超级块的副本，配置信息，i 节点图，块位图，i 节点，数据块</li><li>i 节点：各个 i 节点...</li></ul><p>目录和文件块：<strong>i 节点数组</strong>，<strong>数据块</strong>，<strong>目录块</strong></p><p>目录块(项)中有<strong>文件名</strong>，<strong>i 节点编号</strong>(数据类型是 ino_t)，其中 i 节点指向数据块</p><p>每个 i 节点有个链接计数，就是指向该节点的目录项数，只有减少至 0，才可以删除文件，就是解除对一个文件的链接并不是释放该文件占用的磁盘块，就是删除一个目录项是 unlink 而不是 delete</p><ol><li><p>这个链接计数在 stat 结构中是 st_nlink 的成员，其基本系统数据类型是 nlink_t，这是硬链接，这个计数初始文件 1，叶目录 2(本身+./)，创建一个硬链接就+1，无法给目录创建或者条件很苛刻</p></li><li><p>软链接 S_IFLINK，符号链接 symbolic link，它的实际类容：在数据块中包含了该符号链接指向的文件名字，比如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ls lib
lib -&gt; usr/lib
实际类容就是 usr/lib 这7个字节
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>i 节点，stat 大多信息来自 i 节点：文件类型、文件访问权限、文件长度、指向文件数据块的指针</p><p>目录项，一个目录项不能指向另一个文件系统</p><h2 id="link-linkat-unlink-unlinkat-remove" tabindex="-1"><a class="header-anchor" href="#link-linkat-unlink-unlinkat-remove" aria-hidden="true">#</a> link,linkat,unlink,unlinkat,remove</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">link</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>existingpath<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">linkat</span><span class="token punctuation">(</span><span class="token keyword">int</span> efd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>existingpath<span class="token punctuation">,</span><span class="token keyword">int</span> nfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建新目录项和添加链接计数是一个原子操作</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>existingpath<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">unlinkat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rename-renameat" tabindex="-1"><a class="header-anchor" href="#rename-renameat" aria-hidden="true">#</a> rename,renameat</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldname<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">renameat</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldname<span class="token punctuation">,</span><span class="token keyword">int</span> newfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="符号链接" tabindex="-1"><a class="header-anchor" href="#符号链接" aria-hidden="true">#</a> 符号链接</h2><p>符号链接是一个文件的间接指针，硬链接直接指向文件的 i 节点</p><p>引入符号链接是因为劈开硬链接的一些限制</p><ol><li>不要求链接和文件位于同一个文件系统中</li><li>root 才能创建（底层文件系统支持的情况下，因为很多还是不支持，mac 和 linux）</li></ol><p>必须考虑函数是否可以处理符号链接</p><p>Mkdir,mkinfo,mknod,rmdir</p><p>避免子目录指向父目录造成死循环，而且软链接可以 unlink，但是硬链接很难消除，这就是为什么硬链接有限制</p><h2 id="创建和读取符号链接" tabindex="-1"><a class="header-anchor" href="#创建和读取符号链接" aria-hidden="true">#</a> 创建和读取符号链接</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">symlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>actualpath<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sympath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">symlinkat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>actualpath<span class="token punctuation">,</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sympath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//open函数跟随符号链接，所有下面方法可以打开链接本身</span>
<span class="token class-name">ssize_t</span> <span class="token function">readlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> restrict pathname<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> restrict buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> bufsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token function">readlinkat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span>cosnt <span class="token keyword">char</span><span class="token operator">*</span> restrict pathname<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> restrict buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> bufsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个函数组合了 open、read、close 的所有操作</p><h2 id="文件的时间" tabindex="-1"><a class="header-anchor" href="#文件的时间" aria-hidden="true">#</a> 文件的时间</h2><p>每个文件会维护三个时间</p><table><thead><tr><th></th><th></th><th></th><th>ls 命令选项</th></tr></thead><tbody><tr><td>st_atime</td><td>最后访问时间-文件内容</td><td>read</td><td>-u</td></tr><tr><td>st_mtime</td><td>最后修改时间-文件内容</td><td>write</td><td>默认</td></tr><tr><td>st_ctime</td><td>i 节点最后更改时间</td><td>chown,chmod</td><td>-c</td></tr></tbody></table><p>i 节点所有信息都是与文件的实际内容分开存放的</p><p>st_ctime 系统不会维护，没有函数可以去<strong>自定义</strong>修改这个</p><p>access、stat 函数并不更改这 3 个时间中的任何一个</p><p>ps 创建一个新文件影响到包含次新文件的目录，页影响该文件的 i 节点，但是读或写只影响该文件的 i 节点</p><h2 id="futimens-utimensat-utimes" tabindex="-1"><a class="header-anchor" href="#futimens-utimensat-utimes" aria-hidden="true">#</a> futimens,utimensat,utimes</h2><p>POSIX.1 中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">futimens</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> times<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">utimensat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> times<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tv_nsec 字段:UTIME_NOW,UTIME_OMIT</p><p>times[2]：第一个包含访问时间 st_atime，第二个包含修改时间 st_mtime</p><p>Single UNIX Specification 的 XSI 扩展中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">utimes</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> times<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">timeval</span><span class="token punctuation">{</span>
    <span class="token class-name">time_t</span> tv_sec<span class="token punctuation">;</span><span class="token comment">//s</span>
    <span class="token keyword">long</span> tv_usec<span class="token punctuation">;</span><span class="token comment">//ms</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景：touch 命令使用这些函数的某一个，tar 和 cpio 也会可选地调用这些函数</p><p>Ps: macos 中有些问题</p><h2 id="mkdir-mkdirat-rmdir" tabindex="-1"><a class="header-anchor" href="#mkdir-mkdirat-rmdir" aria-hidden="true">#</a> mkdir,mkdirat,rmdir</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">mkdirat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应目录来说，通常至少要设置一个 x 权限位，允许访问该目录中的文件名</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读目录" tabindex="-1"><a class="header-anchor" href="#读目录" aria-hidden="true">#</a> 读目录</h2><p>一个目录的 w 和 x 权限决定能否在目录下 new 和 del 文件（当然前提是该目录的 t 权限位没有设置），但是这并不代表<strong>能否写目录本身</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h&gt;</span></span>
DIR <span class="token operator">*</span><span class="token function">opendir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//success:返回指针 fail:返回NULL</span>
DIR <span class="token operator">*</span><span class="token function">fdopendir</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//success:返回指针 fail:返回NULL</span>
以上两个函数返回的指针由下面<span class="token number">5</span>个函数使用
<span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span><span class="token function">readdir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//success:返回指针 fail:返回NULL。返回下一个目录的指针</span>

<span class="token keyword">void</span> <span class="token function">rewinddir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将偏移量放在最开始</span>
<span class="token keyword">int</span> <span class="token function">closedir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭目录</span>

<span class="token keyword">long</span> <span class="token function">telldir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值与dp关联的目录中的当前位置。查询偏移量</span>

<span class="token keyword">void</span> <span class="token function">seekdir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>dp<span class="token punctuation">,</span><span class="token keyword">long</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置偏移量</span>
DIR是一个内部结构
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fig4.22 实现了遍历目录</p><h2 id="chdir-fchdir-getcwd" tabindex="-1"><a class="header-anchor" href="#chdir-fchdir-getcwd" aria-hidden="true">#</a> chdir,fchdir,getcwd</h2><p>chdir，fchdir 可以更改当前工作目录</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fchdir</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//success：返回buf，fail：返回NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设备特殊文件" tabindex="-1"><a class="header-anchor" href="#设备特殊文件" aria-hidden="true">#</a> 设备特殊文件</h2><p>st_dev,st_rdev</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>S_ISUID S_ISGID</p><p>设置用户 ID 设置组 ID</p><p>执行时设置有效用户 ID</p><p>若组执行位设置，则执行时设置有效 组 ID;否则使强制性锁起作用(若支持)</p><p>(未使用)</p><p>将在目录中创建的新文件的组 ID 设置为目录的组 ID</p><p>S_ISVTX</p><p>粘着位</p><p>在交换区缓存程序正文(若支持)</p><p>限止在目录中删除和重命名文件</p><p>S_IRUSR S_IWUSR S_IXUSR</p><p>用户读 用户写 用户执行</p><p>许可用户读文件</p><p>许可用户写文件</p><p>许可用户执行文件</p><p>许可用户读目录项 许可用户在目录中删除和创建文件 许可用户在目录中搜索给定路径名</p><p>S_IRGRP S_IWGRP S_IXGRP</p><p>组读 组写 组执行</p><p>许可组读文件</p><p>许可组写文件</p><p>许可组执行文件</p><p>许可组读目录项</p><p>许可组在目录中删除和创建文件</p><p>许可组在目录中搜索给定路径名</p><p>S_IROTH S_IWOTH S_IXOTH</p><p>其他读 其他写 其他执行</p><p>许可其他读文件</p><p>许可其他写文件</p><p>许可其他执行文件</p><p>许可其他读目录项 许可其他在目录中删除和创建文件 许可其他在目录中搜索给定路径名</p>`,109);function u(m,v){const t=p("ExternalLinkIcon");return c(),o("div",null,[d,s("p",null,[n("t 权限：粘着位，"),s("strong",null,[s("a",r,[n("S_ISVTX"),i(t)])]),n("(保存正文 saved-text) ，现在只针对目录，删除文件的权限")]),k])}const w=e(l,[["render",u],["__file","第四章 文件目录.html.vue"]]);export{w as default};

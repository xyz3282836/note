import{_ as e,W as p,X as t,Y as n,Z as o,$ as c,a0 as s,C as i}from"./framework-52f8fb67.js";const l={},u=s(`<h1 id="第十章-信号" tabindex="-1"><a class="header-anchor" href="#第十章-信号" aria-hidden="true">#</a> 第十章 信号</h1><p>介绍信号机制，说明每种信号的一般用法 分析早期实现，分析存在问题并且解决</p><h2 id="信号" tabindex="-1"><a class="header-anchor" href="#信号" aria-hidden="true">#</a> 信号</h2><p>V7 15</p><p>BSD 31</p><p>FreeBSD 32</p><p>Mac OS Linux 31</p><p>Solaris 40</p><p>两个不能被捕捉或忽略的信号：SIGKILL 和 SIGSTOP</p><p>中断</p><p>退出</p><p>挂起</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//表达式最上层是signal返回函数指针的函数的定义</span>
<span class="token comment">//分开看，signal的返回值定义，signal函数本身定义</span>
<span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//signal返回一个函数指针，这是描述该函数定义的，该函数有个参数int，无返回值void</span>
<span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//signal函数两个参数，返回值是个指针，关于这个指针所指向的函数定义见上方</span>
<span class="token comment">//两个参数一：signo,int</span>
<span class="token comment">//两个参数二：*func，函数指针，该函数有参数一int，无返回值</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>signal_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//void(*func)(int)</span>
<span class="token keyword">void</span> <span class="token function">signal_handler_fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> signal_no<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;catch signal no is %d\\n&quot;</span><span class="token punctuation">,</span> signal_no<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    signal_handler signal_fun <span class="token operator">=</span> signal_handler_fun<span class="token punctuation">;</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> signal_fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num is %d\\n&quot;</span><span class="token punctuation">,</span> lnum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lnum<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//上面太复杂</span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">Sigfunc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Sigfunc <span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> Sigfunc <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>signal不改变信号的处理方式就不能确定 信号的当前处理方式 sigaction可以确定一个信号的 处理方式，而无需改变它</p><h2 id="不可靠的信号" tabindex="-1"><a class="header-anchor" href="#不可靠的信号" aria-hidden="true">#</a> 不可靠的信号</h2><h2 id="中断的系统调用" tabindex="-1"><a class="header-anchor" href="#中断的系统调用" aria-hidden="true">#</a> 中断的系统调用</h2><h2 id="可重入函数" tabindex="-1"><a class="header-anchor" href="#可重入函数" aria-hidden="true">#</a> 可重入函数</h2><p>如果有多个信号要递送给一个进程，那将如何呢？POSIX.1 并没有规定这些信号的递送顺序。但 是 POSIX.1 基础部分建议：在其他信号之前递送与进程当前状态有关的信号，如 SIGSEGV</p><h2 id="kill和raise" tabindex="-1"><a class="header-anchor" href="#kill和raise" aria-hidden="true">#</a> kill和raise</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">raise</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">raise</span><span class="token punctuation">(</span>signo<span class="token punctuation">)</span> 等价于 <span class="token function">kill</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进程将信号发送给其他进程需要权限 发送者的实际用户 ID 或有效用户 ID 必须等于接收者的实际用户 ID 或有效用户 ID</p><p>在对权限进行测试时也有一个特例：如果被发送的 信号是 SIGCONT，则进程可将它发送给属于同一会话的任一其他进程</p><h2 id="alarm和pause" tabindex="-1"><a class="header-anchor" href="#alarm和pause" aria-hidden="true">#</a> alarm和pause</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;unistd.h&gt;
unsigned int alarm(unsigned int seconds);

int pause(void);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="信号集合" tabindex="-1"><a class="header-anchor" href="#信号集合" aria-hidden="true">#</a> 信号集合</h2><p>能表示多个信号——信号集</p>`,26),r={href:"https://www.cnblogs.com/lienhua34/p/4072417.html",target:"_blank",rel:"noopener noreferrer"},d=s(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
函数 sigemptyset 初始化由 set 指向的信号集<span class="token punctuation">,</span>清除其中所有信号

<span class="token keyword">int</span> <span class="token function">sigfillset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
函数 sigfillset 初始化由 set 指向的信号集<span class="token punctuation">,</span>使其包含所有信号。

<span class="token keyword">int</span> <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
函数 sigaddset 将一个信号 signo 添加到现有信号集 set 中。

<span class="token keyword">int</span> <span class="token function">sigdelset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span> set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
函数 sigdelset 将一个信号 signo 从信号集 set 中删除。

<span class="token number">4</span> 个函数返回值：若成功，返回 <span class="token number">0</span>；若出错，返回−<span class="token number">1</span>

<span class="token keyword">int</span> <span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
函数 sigismember 判断指定信号 signo 是否在信号集 set 中。

返回值：若真，返回 <span class="token number">1</span>；若假，返回 <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sigprocmask" tabindex="-1"><a class="header-anchor" href="#sigprocmask" aria-hidden="true">#</a> sigprocmask</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;signal.h&gt;
int sigprocmask(int how,const sigset_t *restrict set,sigset_t *restric oset);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>sigprocmask 设置阻塞信号</p><h2 id="sigpending" tabindex="-1"><a class="header-anchor" href="#sigpending" aria-hidden="true">#</a> sigpending</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sigpending</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在信号产生到信号传递给目标进程之间的时间间隔内,我们称该信号为未决的(pending)</p><p>sigpending 获取当前进程所有未决的信号，和上面函数的阻塞信号集不同</p><h2 id="sigaction" tabindex="-1"><a class="header-anchor" href="#sigaction" aria-hidden="true">#</a> sigaction</h2><p>代替早期的signal函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>restrict act<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>restrict oact<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//信号处理函数的指针</span>
    <span class="token class-name">sigset_t</span> sa_mask<span class="token punctuation">;</span><span class="token comment">//在调用该信号的处理函数期间进程要阻塞的信号集</span>
    <span class="token keyword">int</span> sa_flags<span class="token punctuation">;</span><span class="token comment">//指定信号进行处理的各个选项</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_sigaction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token class-name">siginfo_t</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替代的信号处理函数,如果sa_flags 设置了SA_SIGINFO,则会调用该信号处理函数;否则调用sa_handler</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sact<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> sig_alrm<span class="token punctuation">;</span>
sact<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sact<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sact<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sigaction</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sact<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sigaction error: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>alram信号产生之前，sigaction设置的block信号，使用sigismember是查不到的，和sigprocmask不同，只有在信号alram信号产生并且处理完成之前这个block才生效</p><h2 id="sigsetjump和siglongjmp" tabindex="-1"><a class="header-anchor" href="#sigsetjump和siglongjmp" aria-hidden="true">#</a> sigsetjump和siglongjmp</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;setjmp.h&gt;
int sigsetjmp(sigjmp_buf env,int savemask);
void siglongjmp(sigjmp_buf env,int val);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>savemask 非0那么env会记录信号屏蔽字</p><h2 id="sigsuspend" tabindex="-1"><a class="header-anchor" href="#sigsuspend" aria-hidden="true">#</a> sigsuspend</h2><p>解决早期解除阻塞信号和挂起等待之间产生信号永远挂起的问题，其实就是需要原子操作</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sigsuspend</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>sigmask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个原子操作中先恢复信号屏蔽字，然后使进程休眠</p><h2 id="abort" tabindex="-1"><a class="header-anchor" href="#abort" aria-hidden="true">#</a> abort</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>发送SIGABRT</p><p>让进程捕捉 SIGABRT 的意图是：在进程终止之前由其执行所需的清理操作。如果进程并不 在信号处理程序中终止自己，POSIX.1 声明当信号处理程序返回时，abort 终止该进程。</p><h2 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> system</h2><p>POSIX.1 要 求 system 忽略 SIGINT 和 SIGQUIT，阻塞 SIGCHLD</p><h2 id="sleep-nanosleep-clock-nanosleep" tabindex="-1"><a class="header-anchor" href="#sleep-nanosleep-clock-nanosleep" aria-hidden="true">#</a> sleep,nanosleep,clock_nanosleep</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">nanosleep</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>reqtp<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>remtp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">clock_nanosleep</span><span class="token punctuation">(</span><span class="token class-name">clockid_t</span> clock_id<span class="token punctuation">,</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>reqtp<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>remtp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sigqueue" tabindex="-1"><a class="header-anchor" href="#sigqueue" aria-hidden="true">#</a> sigqueue</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">sigqueue</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">union</span> sigval value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>sigqueue 函数只能把信号发送给单个进程</p><h2 id="作业控制信号" tabindex="-1"><a class="header-anchor" href="#作业控制信号" aria-hidden="true">#</a> 作业控制信号</h2><p>ttou</p><p>ttin</p><p>cont</p><p>tstp</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">psignal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">psigninfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">siginfo_t</span> <span class="token operator">*</span>info<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sig2str</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">str4sig</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>signo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strsignal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function k(v,m){const a=i("ExternalLinkIcon");return p(),t("div",null,[u,n("p",null,[n("a",r,[o("https://www.cnblogs.com/lienhua34/p/4072417.html"),c(a)])]),d])}const h=e(l,[["render",k],["__file","第十章 信号.html.vue"]]);export{h as default};

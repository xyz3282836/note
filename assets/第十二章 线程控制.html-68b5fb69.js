import{_ as t,W as e,X as p,Y as n,Z as o,$ as c,a0 as s,E as i}from"./framework-1046fca1.js";const l={},r=s(`<h1 id="第十二章-线程控制" tabindex="-1"><a class="header-anchor" href="#第十二章-线程控制" aria-hidden="true">#</a> 第十二章 线程控制</h1><h2 id="线程限制" tabindex="-1"><a class="header-anchor" href="#线程限制" aria-hidden="true">#</a> 线程限制</h2><h2 id="线程属性" tabindex="-1"><a class="header-anchor" href="#线程属性" aria-hidden="true">#</a> 线程属性</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
in <span class="token function">pthread_attr_destory</span><span class="token punctuation">(</span><span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//分离状态</span>
<span class="token keyword">int</span> <span class="token function">pthread_attr_getdetachstate</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>detachstate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>detachstate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//栈的最低地址</span>
<span class="token keyword">int</span> <span class="token function">pthread_attr_getstack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>restrict stackaddr<span class="token punctuation">,</span><span class="token class-name">size_t</span> <span class="token operator">*</span>restrict stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_attr_setstack</span><span class="token punctuation">(</span><span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>stackaddr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">pthread_attr_getstacksize</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span><span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token class-name">size_t</span> <span class="token operator">*</span>restrict stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_attr_setstacksize</span> <span class="token punctuation">(</span><span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//线程栈末尾之后用以避免栈溢出的扩展内存的大小</span>
iint <span class="token function">pthread_attr_getguardsize</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token class-name">size_t</span> <span class="token operator">*</span>restrict guardsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_attr_setguardsize</span><span class="token punctuation">(</span><span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> guardsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k={href:"http://www.cnblogs.com/mydomain/archive/2011/08/14/2138454.htm",target:"_blank",rel:"noopener noreferrer"},u=s(`<p>线程的分离状态决定一个线程以什么样的方式来终止自己。在上面的例子中，我们采用了线程<strong>的默认属性，即为非分离状态（即可结合的，joinable，需要回收）</strong>，这种情况下，原有的线程等待创建的线程结束；只有当pthread_join()函数返回时，创建的线程才算终止，才能释放自己占用的系统资源。而分离线程不是这样子的，它没有被其他的线程所等待，自己运行结束了，线程也就终止了，马上释放系统资源。程序员应该根据自己的需要，选择适当的分离状态。</p><h2 id="同步属性" tabindex="-1"><a class="header-anchor" href="#同步属性" aria-hidden="true">#</a> 同步属性</h2><h3 id="互斥量" tabindex="-1"><a class="header-anchor" href="#互斥量" aria-hidden="true">#</a> 互斥量</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_mutexattr_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutexattr_destroy</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//进程共享属性</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutexattr_getpshared</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>restrict pshared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutexattr_setpshared</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span><span class="token keyword">int</span> pshared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//健壮的互斥量属性</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutexattr_getrobust</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>restrict robust<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutexattr_setrobust</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span><span class="token keyword">int</span> robust<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//指明与该互斥量相关的 状态在互斥量解锁之前是一致                             </span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_consistent</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">//互斥量类型属性                                </span>
<span class="token keyword">int</span> <span class="token function">pthread_mutexattr_gettype</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>restrict type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutexattr_settype</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读写锁" tabindex="-1"><a class="header-anchor" href="#读写锁" aria-hidden="true">#</a> 读写锁</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_rwlockattr_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlockattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_rwlockattr_destroy</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlockattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//进程共享属性</span>
<span class="token keyword">int</span> <span class="token function">pthread_rwlockattr_getpshared</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_rwlockattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>restrict pshared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_rwlockattr_setpshared</span><span class="token punctuation">(</span><span class="token class-name">pthread_rwlockattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span><span class="token keyword">int</span> pshared<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件变量" tabindex="-1"><a class="header-anchor" href="#条件变量" aria-hidden="true">#</a> 条件变量</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_condattr_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_condattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_condattr_destroy</span><span class="token punctuation">(</span><span class="token class-name">pthread_condattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//进程共享属性</span>
<span class="token keyword">int</span> <span class="token function">pthread_condattr_getpshared</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_condattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>restrict pshared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_condattr_setpshared</span><span class="token punctuation">(</span><span class="token class-name">pthread_condattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span><span class="token keyword">int</span> pshared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//时钟属性</span>
<span class="token keyword">int</span> <span class="token function">pthread_condattr_getclock</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_condattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token class-name">clockid_t</span> <span class="token operator">*</span>restrict clock_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_condattr_setclock</span><span class="token punctuation">(</span><span class="token class-name">pthread_condattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span><span class="token class-name">clockid_t</span> clock_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="屏障" tabindex="-1"><a class="header-anchor" href="#屏障" aria-hidden="true">#</a> 屏障</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_barrierattr_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_barrierattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_barrierattr_destroy</span><span class="token punctuation">(</span><span class="token class-name">pthread_barrierattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//进程共享属性</span>
<span class="token keyword">int</span> <span class="token function">pthread_barrierattr_getpshared</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">pthread_barrierattr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>restrict pshared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_barrierattr_setpshared</span><span class="token punctuation">(</span><span class="token class-name">pthread_barrierattr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span><span class="token keyword">int</span> pshared<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重入" tabindex="-1"><a class="header-anchor" href="#重入" aria-hidden="true">#</a> 重入</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">ftrylockfile</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">flockfile</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">funlockfile</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程特定数据" tabindex="-1"><a class="header-anchor" href="#线程特定数据" aria-hidden="true">#</a> 线程特定数据</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_key_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_key_t</span> <span class="token operator">*</span>keyp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>destruct<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_key_delete</span><span class="token punctuation">(</span><span class="token class-name">pthread_key_t</span> keyp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">pthread_once_t</span> initflag <span class="token operator">=</span> PTHREAD_ONCE_INIT<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_once</span><span class="token punctuation">(</span><span class="token class-name">pthread_once_t</span> <span class="token operator">*</span>initflag<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>initfn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">destructor</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">pthread_key_t</span> key<span class="token punctuation">;</span>
<span class="token class-name">pthread_once_t</span> init_done <span class="token operator">=</span> PTHREAD_ONCE_INIT<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">thread_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    err <span class="token operator">=</span> <span class="token function">pthread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> destructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">threadfunc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">pthread_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>init_done<span class="token punctuation">,</span> thread_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">pthread_getspecific</span><span class="token punctuation">(</span><span class="token class-name">pthread_key_t</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_setspecific</span><span class="token punctuation">(</span><span class="token class-name">pthread_key_t</span> key<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取消选项" tabindex="-1"><a class="header-anchor" href="#取消选项" aria-hidden="true">#</a> 取消选项</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_setcancelstate</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>oldstate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">pthread_testcancel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_setcanceltype</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>oldtype<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程和信号" tabindex="-1"><a class="header-anchor" href="#线程和信号" aria-hidden="true">#</a> 线程和信号</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_sigmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> how<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>restrict set<span class="token punctuation">,</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>restrict oset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sigwait</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>restrict set<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>restrict signop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pthread_kill</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程可以通过调用 sigwait 等待一个或多个信号的出现</p><h2 id="线程和fork" tabindex="-1"><a class="header-anchor" href="#线程和fork" aria-hidden="true">#</a> 线程和fork</h2><p>子进程通过继承整个地址空间的副本，还从父进程那儿继承了每个互斥量、读写锁和条件变 量的状态</p><p>如果父进程包含一个以上的线程，子进程在 fork 返回以后，如果紧接着不是马上调 用 exec 的话，就需要清理锁状态</p><p>POSIX.1 声明，在 fork 返回和子进程调 用其中一个 exec 函数之间，子进程只能调用异步信号安全的函数，这就限制了在调用 exec 之 前子进程能做什么，但不涉及子进程中锁状态的问题</p><p>要清除锁状态，可以通过调用 pthread_atfork 函数建立 fork 处理程序</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_atfork</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>parent<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>child<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>prepare fork 处理程序由父进程 在 fork 创建子进程前调用。这个 fork 处理程序的任务是获取父进程定义的所有锁</li><li>parent fork 处理 程序是在 fork 创建子进程以后、<strong>返回之前在父进程上下文中调用的</strong>。这个 fork 处理程序的任务是对 prepare fork 处理程序获取的所有锁进行解锁</li><li>child fork 处理程序在 fork <strong>返回之前在子进程上下文中调用</strong>。与 parent fork 处理程序一样，child fork 处理程序也必须释放 prepare fork 处理程序获取的所有锁。</li></ol><h2 id="线程和io" tabindex="-1"><a class="header-anchor" href="#线程和io" aria-hidden="true">#</a> 线程和IO</h2>`,27);function d(h,v){const a=i("ExternalLinkIcon");return e(),p("div",null,[r,n("p",null,[n("a",k,[o("http://www.cnblogs.com/mydomain/archive/2011/08/14/2138454.htm"),c(a)])]),u])}const _=t(l,[["render",d],["__file","第十二章 线程控制.html.vue"]]);export{_ as default};

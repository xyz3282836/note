const e=JSON.parse('{"key":"v-45b37b7c","path":"/go/%E6%A6%82%E5%BF%B5.html","title":"基础概念","lang":"zh-CN","frontmatter":{"description":"基础概念 memory order 本身就是一个高层的语义，比如 CPP、Rust 这样语言提供了这些选项。 memory order 是编译器+平台提供的最低保证，除非有平台完全不支持 SeqCst 的约束，否则正确使用 memory order 是不会有逻辑错误的风险的。 部分平台没有实现所有语义（比如主流的 X86，用 Acquire 和 Release，其实等价于 SeqCst），但是只会用更强的语义实现代替 x86 的 relaxed 等价于 release 和 acquire，但是 seqcst 还是不一样的哦，会加上 xchg 面试时候，可以问一下关于 CPU Cache 一致性，Data race 中的可见性、原子性，也可以问一下 Go 里面 关于 sync.Once/Sync.Mutex 为何可以利用 XCHG 来保证 可见性传递；","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/go/%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"基础概念"}],["meta",{"property":"og:description","content":"基础概念 memory order 本身就是一个高层的语义，比如 CPP、Rust 这样语言提供了这些选项。 memory order 是编译器+平台提供的最低保证，除非有平台完全不支持 SeqCst 的约束，否则正确使用 memory order 是不会有逻辑错误的风险的。 部分平台没有实现所有语义（比如主流的 X86，用 Acquire 和 Release，其实等价于 SeqCst），但是只会用更强的语义实现代替 x86 的 relaxed 等价于 release 和 acquire，但是 seqcst 还是不一样的哦，会加上 xchg 面试时候，可以问一下关于 CPU Cache 一致性，Data race 中的可见性、原子性，也可以问一下 Go 里面 关于 sync.Once/Sync.Mutex 为何可以利用 XCHG 来保证 可见性传递；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:author","content":"rz"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"rz\\",\\"url\\":\\"https://github.com/xyz3282836/monodoc\\"}]}"]]},"headers":[],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":0.76,"words":229},"filePathRelative":"go/概念.md","localizedDate":"2023年3月11日","excerpt":"<h1> 基础概念</h1>\\n<p>memory order 本身就是一个高层的语义，比如 CPP、Rust 这样语言提供了这些选项。\\nmemory order 是编译器+平台提供的最低保证，除非有平台完全不支持 SeqCst 的约束，否则正确使用 memory order 是不会有逻辑错误的风险的。\\n部分平台没有实现所有语义（比如主流的 X86，用 Acquire 和 Release，其实等价于 SeqCst），但是只会用更强的语义实现代替</p>\\n<p>x86 的 relaxed 等价于 release 和 acquire，但是 seqcst 还是不一样的哦，会加上 xchg</p>\\n<p>面试时候，可以问一下关于 CPU Cache 一致性，Data race 中的可见性、原子性，也可以问一下 Go 里面 关于 sync.Once/Sync.Mutex 为何可以利用 XCHG 来保证 可见性传递；</p>","autoDesc":true}');export{e as data};

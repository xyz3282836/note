import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-5693ca20.js";const t={},p=e(`<h1 id="第七章-进程环境" tabindex="-1"><a class="header-anchor" href="#第七章-进程环境" aria-hidden="true">#</a> 第七章 进程环境</h1><p>main 函数调用</p><p>命令行传参给程序</p><p>典型的存储空间布局</p><p>分配另外的存储空间</p><p>进程使用环境变量</p><p>进程的不同终止方式</p><p>longjmp 和 setjmp</p><h2 id="main-函数" tabindex="-1"><a class="header-anchor" href="#main-函数" aria-hidden="true">#</a> main 函数</h2><p>内核执行 C 程序过程：</p><ol><li>调用 main 前先调用特殊的启动例程</li><li>将此例程指定为程序起始地址</li><li>2 由连接编辑器设置</li><li>3 由 C 编译器调用</li><li>启动例程从内核获取命令行参数和环境变量</li><li>调用 main</li></ol><h2 id="进程终止" tabindex="-1"><a class="header-anchor" href="#进程终止" aria-hidden="true">#</a> 进程终止</h2><p>5 种正常终止</p><ol><li>main 返回--return(0)</li><li>exit</li><li>_exit 或者 _Exit</li><li>最后一个线程从启动例程返回</li><li>最后一个线程调用 pthread_exit</li></ol><p>3 种异常终止</p><ol><li>abort</li><li>接到一个信号</li><li>最后一个线程对取消请求做出响应</li></ol><p>启动例程 exit(main(argc,argc))</p><p>退出函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">eixt</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ISO C 历史原因会调用fclose 先执行清理，再返回内核</span>
<span class="token keyword">void</span> <span class="token function">_Exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ISO C 立刻进入内核</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//POSIX.1 立刻进入内核</span>

<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 等于 <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
ps<span class="token operator">:</span> exit函数再退出进程的时候，回会反向调用atexit注册的函数，_Exit，_exit两个都没有这个操作，直接进入内核
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Before termination, exit() performs the following functions in the order listed:</p><ol><li>Call the functions registered with the atexit(3) function, in the reverse order of their registration.</li><li>Flush all open output streams.</li><li>Close all open streams.</li><li>Unlink all files created with the tmpfile(3) function.</li></ol></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">atexit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
改写
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">Exitfunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">atexit</span><span class="token punctuation">(</span>Exitfunc <span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>
参数是函数地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>atexit 用来登记最多 32 个函数，这些函数等级后将会称为终止吃了程序，会被 exit 自动调用</p><h2 id="环境表" tabindex="-1"><a class="header-anchor" href="#环境表" aria-hidden="true">#</a> 环境表</h2><p>getenv 和 putenv</p><h2 id="c-程序的存储空间布局" tabindex="-1"><a class="header-anchor" href="#c-程序的存储空间布局" aria-hidden="true">#</a> C 程序的存储空间布局</h2><ol><li>正文段--低地址 如：cpu 执行的机器指令部分</li><li>初始化数据段 显式初始化的全局变量和静态变量 如：int maxcount = 99;</li><li>未初始化数据段 bss 未进行显式初始化的全局变量和静态变量 如：long sum[1000]</li><li>堆 如：</li><li>栈--高地址 如：</li></ol><p>栈之上存放环境表(指针数组)，和环境字符串</p><h2 id="共享库" tabindex="-1"><a class="header-anchor" href="#共享库" aria-hidden="true">#</a> 共享库</h2><p>动态库</p><p>静态库</p><h2 id="存储空间分配" tabindex="-1"><a class="header-anchor" href="#存储空间分配" aria-hidden="true">#</a> 存储空间分配</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定字节数</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> nobj<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token class-name">size_t</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增减分配区长度</span>

<span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>替代：</p><p>libmalloc</p><p>vmalloc</p><p>Quick-fit</p><p>jemalloc</p><p>TCMalloc</p><p>alloca</p><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>value<span class="token punctuation">,</span><span class="token keyword">int</span> rewrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>environ-&gt;环境表-&gt;环境字符串</p><h2 id="setjmp-和-longjmp" tabindex="-1"><a class="header-anchor" href="#setjmp-和-longjmp" aria-hidden="true">#</a> setjmp 和 longjmp</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;setjmp.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">setjmp</span><span class="token punctuation">(</span>jmp_buf env<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//env 通常位全局变量 直接调用返回0，从longjmp返回为非0</span>
<span class="token keyword">void</span> <span class="token function">longjmp</span><span class="token punctuation">(</span>jmp_buf env<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>setjmp 记录函数的上下文，以此来供 longjmp 恢复</p><p>main 中 setjmp 返回 0，在后续执行中 longjmp 返回则返回非 0</p><h2 id="getrlimit-setrlimit" tabindex="-1"><a class="header-anchor" href="#getrlimit-setrlimit" aria-hidden="true">#</a> getrlimit setrlimit</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/resource.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">getrlimit</span><span class="token punctuation">(</span><span class="token keyword">int</span> resource<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">rlimit</span> <span class="token operator">*</span>rlptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">setrlimit</span><span class="token punctuation">(</span><span class="token keyword">int</span> resource<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">rlimit</span> <span class="token operator">*</span>rlptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">rlimit</span><span class="token punctuation">{</span>
    <span class="token comment">//hard limit &gt;= soft limit</span>
    <span class="token class-name">rlim_t</span> rlim_cur<span class="token punctuation">;</span><span class="token comment">//soft limit</span>
    <span class="token class-name">rlim_t</span> rlim_max<span class="token punctuation">;</span><span class="token comment">//hard limit</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>strip 命令去除用于调试的文件的符号表信息</p>`,49),i=[p];function o(c,l){return s(),a("div",null,i)}const u=n(t,[["render",o],["__file","第七章 进程环境.html.vue"]]);export{u as default};

import{_ as o,W as a,X as n,Y as e,Z as t}from"./framework-52f8fb67.js";const l={},r=e("h1",{id:"锁",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#锁","aria-hidden":"true"},"#"),t(" 锁")],-1),d=e("ul",null,[e("li",null,"for update 仅适用于InnoDB，并且必须开启事务，在begin与commit之间才生效。"),e("li",null,[t("要测试for update的锁表情况，可以利用MySQL的Command Mode，开启二个视窗来做测试。 "),e("strong",null,"for update的疑问点:")]),e("li",null,"当开启一个事务进行for update的时候，另一个事务也有for update的时候会一直等着，直到第一个事务结束吗？ 答：会的。除非第一个事务commit或者rollback或者断开连接，第二个事务会立马拿到锁进行后面操作。不过也可以设置锁等待超时参数innodb_lock_wait_timeout来解决。"),e("li",null,"如果没查到记录会加锁吗？ 答：会的。有主键/索引产生间隙锁，无主键/索引产生表锁表级锁。"),e("li",null,"for update 和 for update nowait区别（前者阻塞其他事务，后者拒绝其他事务） for update锁住表或者锁住行，只允许当前事务进行操作（读写），其他事务被阻塞，直到当前事务提交或者回滚，被阻塞的事务自动执行 for update nowait 锁住表或者锁住行，只允许当前事务进行操作（读写），其他事务被拒绝，事务占据的statement连接也会被断开")],-1),i=[r,d];function u(c,s){return a(),n("div",null,i)}const f=o(l,[["render",u],["__file","锁.html.vue"]]);export{f as default};

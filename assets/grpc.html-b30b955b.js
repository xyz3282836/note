import{_ as n,W as s,X as a,a0 as t}from"./framework-52f8fb67.js";const e={},p=t(`<h1 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc" aria-hidden="true">#</a> GRPC</h1><h2 id="grpc官方库" tabindex="-1"><a class="header-anchor" href="#grpc官方库" aria-hidden="true">#</a> grpc官方库</h2><p>定义了两个interface：Resolver和Builder</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Resolver watches for the updates on the specified target.</span>
<span class="token comment">// Updates include address updates and service config updates.</span>
<span class="token keyword">type</span> Resolver <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// ResolveNow will be called by gRPC to try to resolve the target name</span>
	<span class="token comment">// again. It&#39;s just a hint, resolver can ignore this if it&#39;s not necessary.</span>
	<span class="token comment">//</span>
	<span class="token comment">// It could be called multiple times concurrently.</span>
	<span class="token function">ResolveNow</span><span class="token punctuation">(</span>ResolveNowOptions<span class="token punctuation">)</span>
	<span class="token comment">// Close closes the resolver.</span>
	<span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Builder creates a resolver that will be used to watch name resolution updates.</span>
<span class="token keyword">type</span> Builder <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Build creates a new resolver for the given target.</span>
	<span class="token comment">//</span>
	<span class="token comment">// gRPC dial calls Build synchronously, and fails if the returned error is</span>
	<span class="token comment">// not nil.</span>
	<span class="token function">Build</span><span class="token punctuation">(</span>target Target<span class="token punctuation">,</span> cc ClientConn<span class="token punctuation">,</span> opts BuildOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>Resolver<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token comment">// Scheme returns the scheme supported by this resolver.</span>
	<span class="token comment">// Scheme is defined at https://github.com/grpc/grpc/blob/master/doc/naming.md.</span>
	<span class="token function">Scheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b站实现" tabindex="-1"><a class="header-anchor" href="#b站实现" aria-hidden="true">#</a> B站实现</h2><h3 id="warden目录" tabindex="-1"><a class="header-anchor" href="#warden目录" aria-hidden="true">#</a> warden目录</h3><p>定义了warden.Resolver，warden.Builder两个结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 实现了grpc.Resolver接口</span>
<span class="token keyword">type</span> Resolver <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  nr   naming<span class="token punctuation">.</span>Resolver <span class="token comment">// 实现有 name/discovery Resolver结构，包含了Discovery结构</span>
	cc   resolver<span class="token punctuation">.</span>ClientConn <span class="token comment">// grpc的interface</span>
	quit <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	zone <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现了GRPC.Builder.Build方法</span>
<span class="token keyword">type</span> Builder <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	naming<span class="token punctuation">.</span>Builder <span class="token comment">// 实现有 name/discovery Discovery结构</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>warden.Resolver实现了<code>GRPC.Resolver</code>，也包含name.Resolver接口，这里可以传递name.Resolver的实现，比如name/discovery里Discovery对象</p><p>warden.Builder实现了<code>GRPC.Builder.Build</code>，唯一包含naming.Builder接口，这里可以传递naming.Builder的实现，比如name/discovery里Discovery对象</p><p>warden中NewClient传递的就是Discovery对象，并且调用了grpc.resolver.Register注册了Discovery对象；然后grpc中在DialContext会最终调用<code>Build(target Target, cc ClientConn, opts BuildOptions) (Resolver, error)</code>方法（调用链路详见后面分析），如下Build方法实现中创建warden.Resolver对象，其中warden.Resolver.nr就是Discovery对象，调用<code>Build(appid string, opts ...naming.BuildOpt) naming.Resolver</code>创建的name/discovery Resolver对象（包含了Discovery对象），然后在方法中会最终调用name/discovery Discovery的polls和Fetch方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Build returns itself for Resolver, because it&#39;s both a builder and a resolver.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Builder<span class="token punctuation">)</span> <span class="token function">Build</span><span class="token punctuation">(</span>target resolver<span class="token punctuation">.</span>Target<span class="token punctuation">,</span> cc resolver<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> opts resolver<span class="token punctuation">.</span>BuildOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>resolver<span class="token punctuation">.</span>Resolver<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> zone <span class="token operator">=</span> env<span class="token punctuation">.</span>Zone
	ss <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
	clusters <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	str <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>Endpoint<span class="token punctuation">,</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;resolver: parse target.Endpoint(%s) failed!err:=endpoint is empty&quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>Endpoint<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		m<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">ParseQuery</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> m<span class="token punctuation">[</span>naming<span class="token punctuation">.</span>MetaCluster<span class="token punctuation">]</span> <span class="token punctuation">{</span>
				clusters<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			zones <span class="token operator">:=</span> m<span class="token punctuation">[</span>naming<span class="token punctuation">.</span>MetaZone<span class="token punctuation">]</span>
			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>zones<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				zone <span class="token operator">=</span> zones<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> sub<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">&quot;subset&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
				<span class="token keyword">if</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>sub<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					ss <span class="token operator">=</span> t
				<span class="token punctuation">}</span>

			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	r <span class="token operator">:=</span> <span class="token operator">&amp;</span>Resolver<span class="token punctuation">{</span>
		nr<span class="token punctuation">:</span>   b<span class="token punctuation">.</span>Builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> naming<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>Scheme<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">,</span> naming<span class="token punctuation">.</span><span class="token function">ScheduleNode</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">,</span> naming<span class="token punctuation">.</span><span class="token function">Subset</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		cc<span class="token punctuation">:</span>   cc<span class="token punctuation">,</span>
		quit<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		zone<span class="token punctuation">:</span> zone<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">go</span> r<span class="token punctuation">.</span><span class="token function">updateproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> r<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这里的 b.Builder.Build =&gt; Discovery.serverproc =&gt; Discovery.poll =&gt; http 请求 http://%s/discovery/polls grpc服务实例节点信息</span>

<span class="token comment">// 这里的 r.updateproc =&gt; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个链路：</p><p>client 端</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">// 客户端 new 目标grpc服务的client</span>
	<span class="token keyword">if</span> cfg <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		cfg <span class="token operator">=</span> <span class="token operator">&amp;</span>warden<span class="token punctuation">.</span>ClientConfig<span class="token punctuation">{</span>NonBlock<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		cfg<span class="token punctuation">.</span>NonBlock <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	client <span class="token operator">:=</span> warden<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;discovery://default/&quot;</span><span class="token operator">+</span><span class="token string">&quot;live.live.online-allliving&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	cli <span class="token operator">=</span> <span class="token operator">&amp;</span>Client<span class="token punctuation">{</span>
		AllLivingClient<span class="token punctuation">:</span> v1<span class="token punctuation">.</span><span class="token function">NewAllLivingClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span>
		MaxIdClient<span class="token punctuation">:</span> v1<span class="token punctuation">.</span><span class="token function">NewMaxIdClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两点，第一</p><p>往grpc注册discovery实现实例</p><p>warden.NewClient =&gt; warden.resolver.Register(discovery.Builder()) =&gt; grpc.resolver.Register(name/discovery Discovery) =&gt; grpc.resolver.m[discovery.Scheme()]=name/discovery Discovery</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>client <span class="token operator">:=</span> warden<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token comment">// 这里 warden.NewClient调用</span>

<span class="token keyword">func</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>conf <span class="token operator">*</span>ClientConfig<span class="token punctuation">,</span> opt <span class="token operator">...</span>grpc<span class="token punctuation">.</span>DialOption<span class="token punctuation">)</span> <span class="token operator">*</span>Client <span class="token punctuation">{</span>
  <span class="token comment">// 这里就是new name.discovery 的实现</span>
	resolver<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>discovery<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Client<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">SetConfig</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	c<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>abtest<span class="token punctuation">.</span><span class="token function">UnaryClientInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// TODO(luhao02): move to component</span>
	c<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>auroragrpc<span class="token punctuation">.</span><span class="token function">UnaryClientInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">UseOpt</span><span class="token punctuation">(</span>grpc<span class="token punctuation">.</span><span class="token function">WithDefaultServiceConfig</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">\`{&quot;loadBalancingPolicy&quot;:&quot;%s&quot;}\`</span><span class="token punctuation">,</span> p2c<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">UseOpt</span><span class="token punctuation">(</span>opt<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二</p><p>target格式</p><p>client.Dial =&gt; warden.Dial =&gt; warden.dial =&gt; grpc.DialContext =&gt; grpc.newCCResolverWrapper 此处会拿到 resolverBuilder，就是从上一步grpc.resolver.m通过grpc.ClientConn.target，格式为[scheme]😕/[authority]/endpoint，解析出scheme为&quot;discovery&quot; =&gt; grpc.resolver.Builder.Build =&gt; name/discovery Discovery.Build =&gt; name/discovery Discovery.serverproc(=&gt;name/discovery Discovery.polls) &amp;&amp; 创建了name/discovery Resolver对象(=&gt;name/discovery Resolver.updateproc =&gt; name/discovery Resolver.nr也就是name/discovery Discovery.Fetch)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;discovery://default/&quot;</span><span class="token operator">+</span><span class="token string">&quot;live.live.online-allliving&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 这里 client.Dial 调用</span>

<span class="token comment">// Dial creates a client connection to the given target.</span>
<span class="token comment">// Target format is scheme://authority/endpoint?query_arg=value</span>
<span class="token comment">// example: discovery://default/account.account.service?cluster=shfy01&amp;cluster=shfy02</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Dial</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> target <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>DialOption<span class="token punctuation">)</span> <span class="token punctuation">(</span>conn <span class="token operator">*</span>grpc<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	opts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithInsecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">dial</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> target<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这里 c.dial 调用</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">dial</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> target <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>DialOption<span class="token punctuation">)</span> <span class="token punctuation">(</span>conn <span class="token operator">*</span>grpc<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token operator">...</span>
  <span class="token keyword">if</span> conn<span class="token punctuation">,</span> err <span class="token operator">=</span> grpc<span class="token punctuation">.</span><span class="token function">DialContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> target<span class="token punctuation">,</span> dialOptions<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;warden client: dial %s error %v!&quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这里 grpc.DialContext 调用了grpc 官方库</span>

<span class="token keyword">func</span> <span class="token function">DialContext</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> target <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>DialOption<span class="token punctuation">)</span> <span class="token punctuation">(</span>conn <span class="token operator">*</span>ClientConn<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
  <span class="token comment">// Build the resolver.</span>
	rWrapper<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newCCResolverWrapper</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> resolverBuilder<span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这里 newCCResolverWrapper 调用</span>

<span class="token keyword">func</span> <span class="token function">newCCResolverWrapper</span><span class="token punctuation">(</span>cc <span class="token operator">*</span>ClientConn<span class="token punctuation">,</span> rb resolver<span class="token punctuation">.</span>Builder<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ccResolverWrapper<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
  ccr<span class="token punctuation">.</span>resolver<span class="token punctuation">,</span> err <span class="token operator">=</span> rb<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>parsedTarget<span class="token punctuation">,</span> ccr<span class="token punctuation">,</span> rbo<span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="naming" tabindex="-1"><a class="header-anchor" href="#naming" aria-hidden="true">#</a> naming</h3><p>定义了三个接口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Resolver resolve naming service</span>
<span class="token keyword">type</span> Resolver <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Fetch</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Instance<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token comment">//Unwatch(id string)</span>
	<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// Registry Register an instance and renew automatically</span>
<span class="token keyword">type</span> Registry <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Register</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>Instance<span class="token punctuation">)</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>CancelFunc<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// Builder resolver builder.</span>
<span class="token keyword">type</span> Builder <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Build</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">,</span> options <span class="token operator">...</span>BuildOpt<span class="token punctuation">)</span> Resolver
	<span class="token function">Scheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>name.Discovery 实现了 name.Registry 和 name.Builder</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Discovery is discovery client.</span>
<span class="token keyword">type</span> Discovery <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	once       sync<span class="token punctuation">.</span>Once
	conf       <span class="token operator">*</span>Config
	ctx        context<span class="token punctuation">.</span>Context
	cancelFunc context<span class="token punctuation">.</span>CancelFunc
	httpClient <span class="token operator">*</span>bm<span class="token punctuation">.</span>Client

	mutex       sync<span class="token punctuation">.</span>RWMutex
	apps        <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>appInfo
	registry    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	lastHost    <span class="token builtin">string</span>
	cancelPolls context<span class="token punctuation">.</span>CancelFunc
	idx         <span class="token builtin">uint64</span>
	node        atomic<span class="token punctuation">.</span>Value
	<span class="token builtin">delete</span>      <span class="token keyword">chan</span> <span class="token operator">*</span>appInfo
	<span class="token builtin">close</span>       <span class="token builtin">int64</span>
<span class="token punctuation">}</span>

<span class="token comment">// Resolver discveory resolver.</span>
<span class="token keyword">type</span> Resolver <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	id    <span class="token builtin">string</span>
	event <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	d     <span class="token operator">*</span>Discovery
	opt   <span class="token operator">*</span>naming<span class="token punctuation">.</span>BuildOptions
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>name.Discovery.Resolver 实现了 name.Resolver</p><p>所以 name.Discovery 调用Build 方法可以创建name.Discovery.Resolver</p>`,30),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","grpc.html.vue"]]);export{r as default};

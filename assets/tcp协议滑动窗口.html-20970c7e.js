import{_ as a,V as e,W as d,$ as p}from"./framework-7d796c00.js";const r="/assets/拥塞控制-慢启动-70f34504.jpg",i="/assets/拥塞控制-拥塞避免-0d3c6f95.jpg",h="/assets/拥塞控制-拥塞发生-超时重传-337cf62c.jpg",t="/assets/拥塞控制-快速恢复-da063d56.jpg",c={},s=p('<h1 id="tcp协议滑动窗口" tabindex="-1"><a class="header-anchor" href="#tcp协议滑动窗口" aria-hidden="true">#</a> tcp协议滑动窗口</h1><h4 id="发送方" tabindex="-1"><a class="header-anchor" href="#发送方" aria-hidden="true">#</a> 发送方</h4><p>SND.WND</p><p>SND.UNA</p><p>SND.NXT</p><p>可用窗口= SND.WND-(SND.NXT-SND.UNA)</p><h4 id="接收方" tabindex="-1"><a class="header-anchor" href="#接收方" aria-hidden="true">#</a> 接收方</h4><p>rcv.wnd</p><p>rcv.nxt</p><p>操作系统缓冲区和滑动窗口</p><p>接收方，缓冲区有t1数据没读那么滑动窗口就有减去t1</p><p>糊涂窗口综合症</p><h4 id="接收方-1" tabindex="-1"><a class="header-anchor" href="#接收方-1" aria-hidden="true">#</a> 接收方</h4><p>窗口小于min(mss,缓存空间1/2)，就会发送窗口为0，等处理一些数据后，使得窗口&gt;=mss，或者缓存空间有一般可用</p><h4 id="发送方-1" tabindex="-1"><a class="header-anchor" href="#发送方-1" aria-hidden="true">#</a> 发送方</h4><p>Negle算法</p><p>原则就是延迟处理</p><p>(窗口&gt;=mss || 数据大小&gt;=mss) || ack</p><h3 id="拥塞控制" tabindex="-1"><a class="header-anchor" href="#拥塞控制" aria-hidden="true">#</a> 拥塞控制</h3><p>网络环境差的时候，发送发不能无休止的重发数据包，需有有一定控制，所以有了<code>拥塞控制</code></p><h4 id="拥塞窗口" tabindex="-1"><a class="header-anchor" href="#拥塞窗口" aria-hidden="true">#</a> 拥塞窗口</h4><p>为了调节发送方发送数据，就有了拥塞窗口，也就是具体实现拥塞控制的实现，所以发送窗口是综合后的一个窗口</p><p>发送方维护一个拥塞窗口swnd=min(cwnd,rwnd)，<code>发送窗口</code>为拥塞窗口和接受窗口的最小值</p><p>如何知道当前是否拥塞：没有在规定时间接受方没有ack</p><p>拥塞控制主要有四个算法，本质就是控制拥塞窗口的值</p><h5 id="慢启动" tabindex="-1"><a class="header-anchor" href="#慢启动" aria-hidden="true">#</a> 慢启动</h5><p>原则：发送方没收到一个ack，拥塞窗口就+1</p><p>每次可以发送原有基础上指数增长，有个上限 ssthresh （slow start threshold），一般65535字节</p><p>小于ssthresh就是慢启动，大于等于就会使用下一个拥塞避免算法</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="拥塞避免" tabindex="-1"><a class="header-anchor" href="#拥塞避免" aria-hidden="true">#</a> 拥塞避免</h5><p>原则：没收到一个ack，cwnd增加1/cwnd，本质就是从慢启动的指数增长变成线性增长，虽然还是增长，但是速度变缓了</p><p>当8个ack，增加了1/8*8=1，所以swnd是9，从而变成了线性增长</p><p>如果一直这么增长上去，会慢慢进入拥塞状态，出现丢包，会发生重传？为啥</p><p>当触发了重传，就进入下一个拥塞发生算法了</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="拥塞发生" tabindex="-1"><a class="header-anchor" href="#拥塞发生" aria-hidden="true">#</a> 拥塞发生</h5><p>重传有两种：超时重传和快速重传</p><h6 id="超时重传" tabindex="-1"><a class="header-anchor" href="#超时重传" aria-hidden="true">#</a> 超时重传</h6><p>当出现丢包时，发送方接受不到ack是，ssthresh设置为cwnd/2</p><p>cwnd重设为1</p><p>并且重新进入慢启动了，这种方式太激进</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h6 id="快速重传" tabindex="-1"><a class="header-anchor" href="#快速重传" aria-hidden="true">#</a> 快速重传</h6><p>比超时重传更好的方式，当接受方发现丢了一个中间包，就发送三次前一个包的ack给发送方，发送方就会重新快速重传</p><p>此时这种情况不严重，只是小部分数据包收到影响，所以</p><p>cwnd=cwnd/2</p><p>ssthresh=cwnd</p><p>并且进入下一个快速恢复</p><h5 id="快速恢复" tabindex="-1"><a class="header-anchor" href="#快速恢复" aria-hidden="true">#</a> 快速恢复</h5><p>一般和拥塞发生的快速重传一起使用</p><p>cwnd=ssthresh+3</p><p>重新传丢失的包</p><p>​ 如果再受到重复的ack，cwnd+1</p><p>​ 如果收到新数据ack，那么说明恢复正常了，cwnd就恢复到拥塞避免的水平</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',56),n=[s];function o(f,l){return e(),d("div",null,n)}const _=a(c,[["render",o],["__file","tcp协议滑动窗口.html.vue"]]);export{_ as default};

import{_ as e,X as i,Y as s,Z as o}from"./framework-5a8052d6.js";const p={},r=o('<h1 id="gossip-协议" tabindex="-1"><a class="header-anchor" href="#gossip-协议" aria-hidden="true">#</a> gossip 协议</h1><p>&quot;epidemic protocol&quot;可以当作&quot;gossip protocol&quot;的同义词，gossip（流言），传播模型和自然界的病毒传播类似。</p><p>最早提出 gossip 术语的是 Alan Demers 的论文；在该论文中，在分布式数据库系统中的信息传播问题被两个主要的手段解决了，被称作反熵（anti-entropy）与谣言传播（rumor mongering）。</p><p>我们使用受传染病的启发得到的术语。对于最近一个更新操作来说，一个节点可能会在以下三种状态中：</p><ul><li>Susceptible(S)（未感染）：这个节点还不知道这个更新操作；</li><li>Infected(I)（已感染）：这个节点已经知晓了这个更新操作，并且也在传播它；</li><li>Removed(R)（已免疫）：这个节点知晓了这个更新操作，但是不再传播它了。</li></ul><p>主要的模型两个：SI 模型（仅考虑未感染与已感染的情况）与 SIR 模型（包括所有情况）。</p><h2 id="si-模型" tabindex="-1"><a class="header-anchor" href="#si-模型" aria-hidden="true">#</a> SI 模型</h2><p>SI 模型也被称作简单传染模型或反熵(anti-entropy)。反熵是个不太恰当的名字，因为它仅仅描述了这个模型的目标，在于降低所有节点间整体的无序性(total disorder)，或者熵。</p><p>有三种反熵模型被提出：</p><ul><li>在 push 模式中，节点间周期性地把 value 的当前内容推送到从集合 P 中随机选择的节点；</li><li>在 pull 模式中，节点间周期性地请求从随机选择的节点处获取新的更新操作；</li><li>在 push-pull 模式中，push 和 pull 被同时应用。</li></ul><h2 id="sir-模型" tabindex="-1"><a class="header-anchor" href="#sir-模型" aria-hidden="true">#</a> SIR 模型</h2><p>称作复杂的传染模型</p><p>SI 模型要求无止境地运行，因此适用于那些在持续不断地发生变更的系统。在许多场景中，变更操作很不频繁。为了专门适应这些场景，SIR 模型，也被称作复杂传染模式或者谣言扩散(rumor mongering)，被提出了。这种模式包含第三类状态：停止传播（removed），用来表示一个节点已经收到了一个更新操作但是不再传播它了。</p><p>SIR 模型是基于 push 模式的，尽管用 pull 模式也可行。当一个更新操作在一个节点发生后，它被推送到随机选择的其他节点。接收到该更新的未感染的节点变成已感染状态，并且也开始推送这个更新。最终，当所有节点进入停止传播状态之后，这整个活动会停止。</p>',14),l=[r];function a(t,n){return i(),s("div",null,l)}const u=e(p,[["render",a],["__file","gossip.html.vue"]]);export{u as default};

import{_ as n,W as s,X as a,a0 as e}from"./framework-52f8fb67.js";const t={},p=e(`<h1 id="第八章-进程控制" tabindex="-1"><a class="header-anchor" href="#第八章-进程控制" aria-hidden="true">#</a> 第八章 进程控制</h1><h2 id="fork进程标识" tabindex="-1"><a class="header-anchor" href="#fork进程标识" aria-hidden="true">#</a> fork进程标识</h2><p>id为0的是调度进程，被称为交换进程swapper，是内核的一部分</p><p>id为1的是init进程，是所以孤儿进程的父进程，不是内核一部分，只是个普通进程，但是拥有root权限，</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token class-name">pid_t</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">pid_t</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">uid_t</span> <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实际用户 ID</span>
<span class="token class-name">uid_t</span> <span class="token function">geteuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有效用户 ID</span>

<span class="token class-name">gid_t</span> <span class="token function">getgid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">gid_t</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fork" tabindex="-1"><a class="header-anchor" href="#fork" aria-hidden="true">#</a> fork</h2><p>fork后，fd会被复制到子进程，好像执行了dup函数，父子进程相同文件的fd都共享一个文件表，dup的特性</p><p>每个进程表项中fd公用相同文件表</p><p>共享当前打开文件的偏移量</p><h3 id="fork后处理fd有两种常见操作模式" tabindex="-1"><a class="header-anchor" href="#fork后处理fd有两种常见操作模式" aria-hidden="true">#</a> fork后处理fd有两种常见操作模式</h3><ol><li>父进程等待子进程文件，防止读写相互混合</li><li>各自分工，执行不同程序段</li></ol><p>子进程不继承父进程设置的文件锁</p><p>fork失败的两个主要原因</p><ol><li>系统中有太多进程</li><li>该实际用户的进程总数超过了系统限制，CHILD_MAX</li></ol><h3 id="fork的两种方法" tabindex="-1"><a class="header-anchor" href="#fork的两种方法" aria-hidden="true">#</a> fork的两种方法</h3><ol><li>父进程复制自己，父子进程执行不同代码段，比如网络服务进程，父进程等待客户端请求，当有请求时父进程fork使子进程处理请求，而父进程继续等待下一个服务请求</li><li>fork后执行exec，也就是spawn，当然unix是fork和exec组合就是spawn</li></ol><h2 id="vfork" tabindex="-1"><a class="header-anchor" href="#vfork" aria-hidden="true">#</a> vfork</h2><p>创建一个新进程，然后exec，如同上面2</p><p>不完全拷贝父进程的地址空间，vfork保证子进程先运行</p><h2 id="exit" tabindex="-1"><a class="header-anchor" href="#exit" aria-hidden="true">#</a> exit</h2><p>大多数unix系统中，exit是标准C库中的一个函数，_exit是系统调用</p><p>_exit 和 _Exit 同义，为进程提供一种无需运行终止处理程序或信号处理程序而终止的方法，unix中并不冲洗标准IO流</p><p>exit调用_exit</p><p>5种正常终止，3种异常终止</p><p>ps 退出状态和终止状态</p><p>父进程在子进程前终止，那么子进程会被init进程(进程id是1)收养</p><p>子进程终止了，但是父进程没有获取子进程的终止状态(调用wait或者waitpid)，那么这些子进程称为zombie僵死进程</p><h2 id="wait和waitpid" tabindex="-1"><a class="header-anchor" href="#wait和waitpid" aria-hidden="true">#</a> wait和waitpid</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token class-name">pid_t</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>statlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">pid_t</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>statlog<span class="token punctuation">,</span><span class="token keyword">int</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//statlog 是终止状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用wait</p><ol><li>子进程还在运行，则阻塞</li><li>子进程已经终止，会理解返回终止状态</li><li>没有子进程会出错返回</li></ol><h2 id="waitid" tabindex="-1"><a class="header-anchor" href="#waitid" aria-hidden="true">#</a> waitid</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">waitid</span><span class="token punctuation">(</span><span class="token class-name">idtype_t</span> idtype<span class="token punctuation">,</span><span class="token class-name">id_t</span> id<span class="token punctuation">,</span><span class="token class-name">siginfo_t</span> <span class="token operator">*</span>infop<span class="token punctuation">,</span><span class="token keyword">int</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
idtype
P_PID
P_PGID
P_ALL
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似waitpid，但是更加灵活</p><h2 id="wait3-wait4" tabindex="-1"><a class="header-anchor" href="#wait3-wait4" aria-hidden="true">#</a> wait3,wait4</h2><blockquote><p>The wait4() call provides a more general interface for programs that need to wait for certain child processes, that need resource utilization statistics accumulated by child processes, or that require options. The other wait functions are implemented using wait4(). The waitpid() call is identical to wait4() with an rusage value of zero. The older wait3() call is the same as wait4() with a pid value of -1.</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/resource.h&gt;</span></span>
<span class="token class-name">pid_t</span> <span class="token function">wait3</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>statlog<span class="token punctuation">,</span><span class="token keyword">int</span> options<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">rusage</span> <span class="token operator">*</span>rusage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">pid_t</span> <span class="token function">wait4</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>statlog<span class="token punctuation">,</span><span class="token keyword">int</span> options<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">rusage</span> <span class="token operator">*</span>rusage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="竞争条件" tabindex="-1"><a class="header-anchor" href="#竞争条件" aria-hidden="true">#</a> 竞争条件</h2><p>第十章，信号机制</p><p>第十五章和第十七章，进程间通信 IPC</p><h2 id="exec函数" tabindex="-1"><a class="header-anchor" href="#exec函数" aria-hidden="true">#</a> exec函数</h2><p>fork后，进程调用一种exec函数时，会替换为新程序</p><p>7种exec</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">execl</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>agg0<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">execv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//多了envp</span>
<span class="token keyword">int</span> <span class="token function">execle</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg0<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//系统调用</span>
<span class="token comment">//pathname变filename</span>
<span class="token keyword">int</span> <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg0<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//pathname变fd</span>
<span class="token keyword">int</span> <span class="token function">fexecve</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FD_CLOEXEC，进程中每个打开的fd都有一个执行时关闭标志，也就是exec后fd是否关闭的控制</p><p>系统默认是在exec后仍然保持fd的打开</p><p>POSIX.1明确要求exec时关闭目录流，opendir实现，通过调用fcntl设置了关闭标志</p><p>很多unix实现中，execve是内核的系统调用，其余6个是库函数</p><h2 id="更改用户id和组id" tabindex="-1"><a class="header-anchor" href="#更改用户id和组id" aria-hidden="true">#</a> 更改用户id和组id</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token comment">//更改实际用户id和组id 和 有效用户id和组id</span>
<span class="token comment">//实际+有效</span>
<span class="token keyword">int</span> <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token class-name">uid_t</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token class-name">gid_t</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//更改有效用户id和组id</span>
<span class="token comment">//有效</span>
<span class="token keyword">int</span> <span class="token function">seteuid</span><span class="token punctuation">(</span><span class="token class-name">uid_t</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">setegid</span><span class="token punctuation">(</span><span class="token class-name">gid_t</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//切换实际用户id和有效用户id</span>
<span class="token keyword">int</span> <span class="token function">setreuid</span><span class="token punctuation">(</span><span class="token class-name">uid_t</span> ruid<span class="token punctuation">,</span><span class="token class-name">uid_t</span> euid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">setregid</span><span class="token punctuation">(</span><span class="token class-name">gid_t</span> rgid<span class="token punctuation">,</span><span class="token class-name">gid_t</span> egid<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>谁可以更改用户id(实际用户id，有效用户id，保存设置用户id)，下面三点也适用与组id</p><ol><li>进程有超级用户特权，三者都设置为uid</li><li>不是root，但是uid等于用户id或者保存设置的用户id，setuid只将有效用户id设置为uid</li><li>1和2都不满足，那么返回-1</li></ol><p>应用场景at程序</p><h2 id="解释器文件" tabindex="-1"><a class="header-anchor" href="#解释器文件" aria-hidden="true">#</a> 解释器文件</h2><h2 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> system</h2><p>system的实现中调用了fork，exec，waitpid，有三种返回值</p><ol><li>fork失败，-1</li><li>exec失败，127</li><li></li></ol><h2 id="进程会计" tabindex="-1"><a class="header-anchor" href="#进程会计" aria-hidden="true">#</a> 进程会计</h2><p>每当进程结束时内核就写一个会计记录</p><p>一个新进程创建时会初始化，进程结束会写一个会计记录，但是init进程和守护进程不会有会计记录</p><p>每个平台实现不一</p><h2 id="用户标志" tabindex="-1"><a class="header-anchor" href="#用户标志" aria-hidden="true">#</a> 用户标志</h2><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>#include &lt;unistd.h&gt;
char *getlogin(void);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进程调度" tabindex="-1"><a class="header-anchor" href="#进程调度" aria-hidden="true">#</a> 进程调度</h2><p>nice值</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">nice</span><span class="token punctuation">(</span><span class="token keyword">int</span> incr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/resource.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">getpriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">,</span><span class="token class-name">id_t</span> who<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
which:
PRIO_PROCESS
PRIO_PGRP
PRIO_USER
*/</span>
<span class="token keyword">int</span> <span class="token function">setpriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">,</span><span class="token class-name">id_t</span> who<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进程时间" tabindex="-1"><a class="header-anchor" href="#进程时间" aria-hidden="true">#</a> 进程时间</h2><p>墙上时钟时间，用户cpu时间，系统cpu时间</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token class-name">clock_t</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tms</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回墙上时钟时间</span>
<span class="token keyword">struct</span> <span class="token class-name">tms</span> <span class="token punctuation">{</span> 
    <span class="token class-name">clock_t</span> tms_utime<span class="token punctuation">;</span> <span class="token comment">/* user CPU time */</span> 
    <span class="token class-name">clock_t</span> tms_stime<span class="token punctuation">;</span> <span class="token comment">/* system CPU time */</span> 
    <span class="token class-name">clock_t</span> tms_cutime<span class="token punctuation">;</span> <span class="token comment">/* user CPU time,terminated children */</span> 
    <span class="token class-name">clock_t</span> tms_cstime<span class="token punctuation">;</span> <span class="token comment">/* system CPU time,terminated children */</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),c=[p];function i(o,l){return s(),a("div",null,c)}const r=n(t,[["render",i],["__file","第八章 进程控制.html.vue"]]);export{r as default};

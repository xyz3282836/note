const t=JSON.parse('{"key":"v-09bdfe36","path":"/apue/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%20%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6.html","title":"第十二章 线程控制","lang":"zh-CN","frontmatter":{"description":"第十二章 线程控制 线程限制 线程属性 #include &lt;pthread.h&gt; int pthread_attr_init(pthread_attr_t *attr); in pthread_attr_destory(pthread_attr_t *attr); //分离状态 int pthread_attr_getdetachstate(const pthread_attr_t *restrict attr,int *detachstate); int pthread_attr_setdetachstate(pthread_attr_t *attr, int *detachstate); //栈的最低地址 int pthread_attr_getstack(const pthread_attr_t *restrict attr,void **restrict stackaddr,size_t *restrict stacksize); int pthread_attr_setstack(pthread_attr_t *attr,void *stackaddr, size_t stacksize); //栈的大小 int pthread_attr_getstacksize(const pthread_attr_t*restrict attr,size_t *restrict stacksize); int pthread_attr_setstacksize (pthread_attr_t *attr, size_t stacksize); //线程栈末尾之后用以避免栈溢出的扩展内存的大小 iint pthread_attr_getguardsize(const pthread_attr_t *restrict attr,size_t *restrict guardsize); int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/apue/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%20%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"第十二章 线程控制"}],["meta",{"property":"og:description","content":"第十二章 线程控制 线程限制 线程属性 #include &lt;pthread.h&gt; int pthread_attr_init(pthread_attr_t *attr); in pthread_attr_destory(pthread_attr_t *attr); //分离状态 int pthread_attr_getdetachstate(const pthread_attr_t *restrict attr,int *detachstate); int pthread_attr_setdetachstate(pthread_attr_t *attr, int *detachstate); //栈的最低地址 int pthread_attr_getstack(const pthread_attr_t *restrict attr,void **restrict stackaddr,size_t *restrict stacksize); int pthread_attr_setstack(pthread_attr_t *attr,void *stackaddr, size_t stacksize); //栈的大小 int pthread_attr_getstacksize(const pthread_attr_t*restrict attr,size_t *restrict stacksize); int pthread_attr_setstacksize (pthread_attr_t *attr, size_t stacksize); //线程栈末尾之后用以避免栈溢出的扩展内存的大小 iint pthread_attr_getguardsize(const pthread_attr_t *restrict attr,size_t *restrict guardsize); int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第十二章 线程控制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"线程限制","slug":"线程限制","link":"#线程限制","children":[]},{"level":2,"title":"线程属性","slug":"线程属性","link":"#线程属性","children":[]},{"level":2,"title":"同步属性","slug":"同步属性","link":"#同步属性","children":[{"level":3,"title":"互斥量","slug":"互斥量","link":"#互斥量","children":[]},{"level":3,"title":"读写锁","slug":"读写锁","link":"#读写锁","children":[]},{"level":3,"title":"条件变量","slug":"条件变量","link":"#条件变量","children":[]},{"level":3,"title":"屏障","slug":"屏障","link":"#屏障","children":[]}]},{"level":2,"title":"重入","slug":"重入","link":"#重入","children":[]},{"level":2,"title":"线程特定数据","slug":"线程特定数据","link":"#线程特定数据","children":[]},{"level":2,"title":"取消选项","slug":"取消选项","link":"#取消选项","children":[]},{"level":2,"title":"线程和信号","slug":"线程和信号","link":"#线程和信号","children":[]},{"level":2,"title":"线程和 fork","slug":"线程和-fork","link":"#线程和-fork","children":[]},{"level":2,"title":"线程和 IO","slug":"线程和-io","link":"#线程和-io","children":[]}],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":3.49,"words":1048},"filePathRelative":"apue/第十二章 线程控制.md","localizedDate":"2023年3月11日","excerpt":"<h1> 第十二章 线程控制</h1>\\n<h2> 线程限制</h2>\\n<h2> 线程属性</h2>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;pthread.h&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_attr_init</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>attr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nin <span class=\\"token function\\">pthread_attr_destory</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>attr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//分离状态</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_attr_getdetachstate</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>restrict attr<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> <span class=\\"token operator\\">*</span>detachstate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_attr_setdetachstate</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>attr<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> <span class=\\"token operator\\">*</span>detachstate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//栈的最低地址</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_attr_getstack</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>restrict attr<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span>restrict stackaddr<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">size_t</span> <span class=\\"token operator\\">*</span>restrict stacksize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_attr_setstack</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>attr<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>stackaddr<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> stacksize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//栈的大小</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_attr_getstacksize</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">pthread_attr_t</span><span class=\\"token operator\\">*</span>restrict attr<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">size_t</span> <span class=\\"token operator\\">*</span>restrict stacksize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_attr_setstacksize</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>attr<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> stacksize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//线程栈末尾之后用以避免栈溢出的扩展内存的大小</span>\\niint <span class=\\"token function\\">pthread_attr_getguardsize</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>restrict attr<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">size_t</span> <span class=\\"token operator\\">*</span>restrict guardsize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_attr_setguardsize</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>attr<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">size_t</span> guardsize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};

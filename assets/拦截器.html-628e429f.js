import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as s,d as n,e as t,a as e}from"./app-6f5bc1f7.js";const l={},u=e('<h1 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h1><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>gRPC 暴露了两个拦截器接口，分别是：</p><ul><li><code>grpc.UnaryServerInterceptor</code>服务端拦截器</li><li><code>grpc.UnaryClientInterceptor</code>客户端拦截器</li></ul><p>基于两个拦截器可以针对性的定制公共模块的封装代码，比如<code>warden/logging.go</code>是通用日志逻辑。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h3 id="服务端拦截器" tabindex="-1"><a class="header-anchor" href="#服务端拦截器" aria-hidden="true">#</a> 服务端拦截器</h3>',7),r=s("code",null,"grpc.UnaryServerInterceptor",-1),k={href:"https://github.com/grpc/grpc-go/blob/master/interceptor.go",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// UnaryServerInfo consists of various information about a unary RPC on</span>
<span class="token comment">// server side. All per-rpc information may be mutated by the interceptor.</span>
<span class="token keyword">type</span> UnaryServerInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// Server is the service implementation the user provides. This is read-only.</span>
    Server <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// FullMethod is the full RPC method string, i.e., /package.service/method.</span>
    FullMethod <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// UnaryHandler defines the handler invoked by UnaryServerInterceptor to complete the normal</span>
<span class="token comment">// execution of a unary RPC. If a UnaryHandler returns an error, it should be produced by the</span>
<span class="token comment">// status package, or else gRPC will use codes.Unknown as the status code and err.Error() as</span>
<span class="token comment">// the status message of the RPC.</span>
<span class="token keyword">type</span> UnaryHandler <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token comment">// UnaryServerInterceptor provides a hook to intercept the execution of a unary RPC on the server. info</span>
<span class="token comment">// contains all the information of this RPC the interceptor can operate on. And handler is the wrapper</span>
<span class="token comment">// of the service method implementation. It is the responsibility of the interceptor to invoke handler</span>
<span class="token comment">// to complete the RPC.</span>
<span class="token keyword">type</span> UnaryServerInterceptor <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> info <span class="token operator">*</span>UnaryServerInfo<span class="token punctuation">,</span> handler UnaryHandler<span class="token punctuation">)</span> <span class="token punctuation">(</span>resp <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来很简单包括：</p><ul><li>一个<code>UnaryServerInfo</code>结构体用于<code>Server</code>和<code>FullMethod</code>字段传递，<code>Server</code>为<code>gRPC server</code>的对象实例，<code>FullMethod</code>为请求方法的全名</li><li>一个<code>UnaryHandler</code>方法用于传递<code>Handler</code>，就是基于<code>proto</code>文件<code>service</code>内声明而生成的方法</li><li>一个<code>UnaryServerInterceptor</code>用于拦截<code>Handler</code>方法，可在<code>Handler</code>执行前后插入拦截代码</li></ul>`,3),v=s("code",null,"proto",-1),m={href:"https://github.com/bilibili/kratos-demo/blob/master/api/api.pb.go",target:"_blank",rel:"noopener noreferrer"},b=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">_Demo_SayHello_Handler</span><span class="token punctuation">(</span>srv <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> dec <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">,</span> interceptor grpc<span class="token punctuation">.</span>UnaryServerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    in <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>HelloReq<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">dec</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> interceptor <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> srv<span class="token punctuation">.</span><span class="token punctuation">(</span>DemoServer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SayHello</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> in<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    info <span class="token operator">:=</span> <span class="token operator">&amp;</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">{</span>
        Server<span class="token punctuation">:</span>     srv<span class="token punctuation">,</span>
        FullMethod<span class="token punctuation">:</span> <span class="token string">&quot;/demo.service.v1.Demo/SayHello&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    handler <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> srv<span class="token punctuation">.</span><span class="token punctuation">(</span>DemoServer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SayHello</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>HelloReq<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">interceptor</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> in<span class="token punctuation">,</span> info<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个<code>_Demo_SayHello_Handler</code>方法是关键，该方法会被包装为<code>grpc.ServiceDesc</code>结构，被注册到 gRPC 内部，具体可在生成的<code>pb.go</code>代码内查找<code>s.RegisterService(&amp;_Demo_serviceDesc, srv)</code>。</p><ul><li>当<code>gRPC server</code>收到一次请求时，首先根据请求方法从注册到<code>server</code>内的<code>grpc.ServiceDesc</code>找到该方法对应的<code>Handler</code>如：<code>_Demo_SayHello_Handler</code>并执行</li><li><code>_Demo_SayHello_Handler</code>执行过程请看上面具体代码，当<code>interceptor</code>不为<code>nil</code>时，会将<code>SayHello</code>包装为<code>grpc.UnaryHandler</code>结构传递给<code>interceptor</code></li></ul>`,3),g=s("code",null,"UnaryServerInterceptor",-1),h=s("code",null,"_Demo_SayHello_Handler",-1),f=s("code",null,"interceptor",-1),y=s("code",null,"gRPC server",-1),w={href:"https://github.com/grpc/grpc-go/blob/master/server.go",target:"_blank",rel:"noopener noreferrer"},_=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// UnaryInterceptor returns a ServerOption that sets the UnaryServerInterceptor for the</span>
<span class="token comment">// server. Only one unary interceptor can be installed. The construction of multiple</span>
<span class="token comment">// interceptors (e.g., chaining) can be implemented at the caller.</span>
<span class="token keyword">func</span> <span class="token function">UnaryInterceptor</span><span class="token punctuation">(</span>i UnaryServerInterceptor<span class="token punctuation">)</span> ServerOption <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>o <span class="token operator">*</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> o<span class="token punctuation">.</span>unaryInt <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;The unary server interceptor was already set and may not be reset.&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        o<span class="token punctuation">.</span>unaryInt <span class="token operator">=</span> i
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请一定注意这方法的注释！！！</p><blockquote><p>Only one unary interceptor can be installed. The construction of multiple interceptors (e.g., chaining) can be implemented at the caller.</p></blockquote>`,3),x=s("code",null,"gRPC",-1),S=s("code",null,"interceptor",-1),q=s("code",null,"interceptors",-1),C=s("code",null,"warden",-1),I=s("code",null,"grpc.UnaryClientInterceptor",-1),U=s("code",null,"interceptor chain",-1),H={href:"https://github.com/bilibili/kratos/blob/master/pkg/net/rpc/warden/server.go",target:"_blank",rel:"noopener noreferrer"},R=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Use attachs a global inteceptor to the server.</span>
<span class="token comment">// For example, this is the right place for a rate limiter or error management inteceptor.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>handlers <span class="token operator">...</span>grpc<span class="token punctuation">.</span>UnaryServerInterceptor<span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">{</span>
    finalSize <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> finalSize <span class="token operator">&gt;=</span> <span class="token function">int</span><span class="token punctuation">(</span>_abortIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;warden: server use too many handlers&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    mergedHandlers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>grpc<span class="token punctuation">.</span>UnaryServerInterceptor<span class="token punctuation">,</span> finalSize<span class="token punctuation">)</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>mergedHandlers<span class="token punctuation">,</span> s<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>mergedHandlers<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> handlers<span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>handlers <span class="token operator">=</span> mergedHandlers
    <span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token comment">// interceptor is a single interceptor out of a chain of many interceptors.</span>
<span class="token comment">// Execution is done in left-to-right order, including passing of context.</span>
<span class="token comment">// For example ChainUnaryServer(one, two, three) will execute one before two before three, and three</span>
<span class="token comment">// will see context changes of one and two.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">interceptor</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args <span class="token operator">*</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">,</span> handler grpc<span class="token punctuation">.</span>UnaryHandler<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token punctuation">(</span>
        i     <span class="token builtin">int</span>
        chain grpc<span class="token punctuation">.</span>UnaryHandler
    <span class="token punctuation">)</span>

    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    chain <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ic context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> ir <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>ic<span class="token punctuation">,</span> ir<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>ic<span class="token punctuation">,</span> ir<span class="token punctuation">,</span> args<span class="token punctuation">,</span> chain<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> s<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">,</span> args<span class="token punctuation">,</span> chain<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很简单的逻辑：</p><ul><li><code>warden server</code>使用<code>Use</code>方法进行<code>grpc.UnaryServerInterceptor</code>的注入，而<code>func (s *Server) interceptor</code>本身就实现了<code>grpc.UnaryServerInterceptor</code></li><li><code>func (s *Server) interceptor</code>可以根据注册的<code>grpc.UnaryServerInterceptor</code>顺序从前到后依次执行</li></ul><p>而<code>warden</code>在初始化的时候将该方法本身注册到了<code>gRPC server</code>，在<code>NewServer</code>方法内可以看到下面代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>opt <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> keepParam<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">UnaryInterceptor</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>server <span class="token operator">=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>opt<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如此完整的服务端拦截器逻辑就串联完成。</p><h3 id="客户端拦截器" tabindex="-1"><a class="header-anchor" href="#客户端拦截器" aria-hidden="true">#</a> 客户端拦截器</h3>`,7),P=s("code",null,"grpc.UnaryClientInterceptor",-1),O={href:"https://github.com/grpc/grpc-go/blob/master/interceptor.go",target:"_blank",rel:"noopener noreferrer"},D=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// UnaryInvoker is called by UnaryClientInterceptor to complete RPCs.</span>
<span class="token keyword">type</span> UnaryInvoker <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> method <span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cc <span class="token operator">*</span>ClientConn<span class="token punctuation">,</span> opts <span class="token operator">...</span>CallOption<span class="token punctuation">)</span> <span class="token builtin">error</span>

<span class="token comment">// UnaryClientInterceptor intercepts the execution of a unary RPC on the client. invoker is the handler to complete the RPC</span>
<span class="token comment">// and it is the responsibility of the interceptor to call it.</span>
<span class="token comment">// This is an EXPERIMENTAL API.</span>
<span class="token keyword">type</span> UnaryClientInterceptor <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> method <span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cc <span class="token operator">*</span>ClientConn<span class="token punctuation">,</span> invoker UnaryInvoker<span class="token punctuation">,</span> opts <span class="token operator">...</span>CallOption<span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来和服务端拦截器并没有什么太大的区别，比较简单包括：</p><ul><li>一个<code>UnaryInvoker</code>表示客户端具体要发出的执行方法</li><li>一个<code>UnaryClientInterceptor</code>用于拦截<code>Invoker</code>方法，可在<code>Invoker</code>执行前后插入拦截代码</li></ul>`,3),F=s("code",null,"proto",-1),E={href:"https://github.com/bilibili/kratos-demo/blob/master/api/api.pb.go",target:"_blank",rel:"noopener noreferrer"},N=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>demoClient<span class="token punctuation">)</span> <span class="token function">SayHello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>HelloReq<span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>google_protobuf1<span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    out <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>google_protobuf1<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span>
    err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;/demo.service.v1.Demo/SayHello&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> out<span class="token punctuation">,</span> c<span class="token punctuation">.</span>cc<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),T=s("code",null,"SayHello",-1),V=s("code",null,"grpc.Invoke",-1),M=s("code",null,"fullMethod",-1),K={href:"https://github.com/grpc/grpc-go/blob/master/call.go",target:"_blank",rel:"noopener noreferrer"},L=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Invoke sends the RPC request on the wire and returns after response is</span>
<span class="token comment">// received.  This is typically called by generated code.</span>
<span class="token comment">//</span>
<span class="token comment">// All errors returned by Invoke are compatible with the status package.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>cc <span class="token operator">*</span>ClientConn<span class="token punctuation">)</span> <span class="token function">Invoke</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> method <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>CallOption<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// allow interceptor to see all applicable call options, which means those</span>
    <span class="token comment">// configured as defaults from dial option as well as per-call options</span>
    opts <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>dopts<span class="token punctuation">.</span>callOptions<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>

    <span class="token keyword">if</span> cc<span class="token punctuation">.</span>dopts<span class="token punctuation">.</span>unaryInt <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cc<span class="token punctuation">.</span>dopts<span class="token punctuation">.</span><span class="token function">unaryInt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> invoke<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">invoke</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z=s("code",null,"unaryInt",-1),A={href:"https://github.com/grpc/grpc-go/blob/master/dialoptions.go",target:"_blank",rel:"noopener noreferrer"},B=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// WithUnaryInterceptor returns a DialOption that specifies the interceptor for</span>
<span class="token comment">// unary RPCs.</span>
<span class="token keyword">func</span> <span class="token function">WithUnaryInterceptor</span><span class="token punctuation">(</span>f UnaryClientInterceptor<span class="token punctuation">)</span> DialOption <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">newFuncDialOption</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>o <span class="token operator">*</span>dialOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        o<span class="token punctuation">.</span>unaryInt <span class="token operator">=</span> f
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W=s("code",null,"gRPC",-1),G=s("code",null,"interceptor chain",-1),X=s("code",null,"warden",-1),j={href:"https://github.com/bilibili/kratos/blob/master/pkg/net/rpc/warden/client.go",target:"_blank",rel:"noopener noreferrer"},J=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Use attachs a global inteceptor to the Client.</span>
<span class="token comment">// For example, this is the right place for a circuit breaker or error management inteceptor.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>handlers <span class="token operator">...</span>grpc<span class="token punctuation">.</span>UnaryClientInterceptor<span class="token punctuation">)</span> <span class="token operator">*</span>Client <span class="token punctuation">{</span>
    finalSize <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> finalSize <span class="token operator">&gt;=</span> <span class="token function">int</span><span class="token punctuation">(</span>_abortIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;warden: client use too many handlers&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    mergedHandlers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>grpc<span class="token punctuation">.</span>UnaryClientInterceptor<span class="token punctuation">,</span> finalSize<span class="token punctuation">)</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>mergedHandlers<span class="token punctuation">,</span> c<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>mergedHandlers<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> handlers<span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>handlers <span class="token operator">=</span> mergedHandlers
    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>

<span class="token comment">// chainUnaryClient creates a single interceptor out of a chain of many interceptors.</span>
<span class="token comment">//</span>
<span class="token comment">// Execution is done in left-to-right order, including passing of context.</span>
<span class="token comment">// For example ChainUnaryClient(one, two, three) will execute one before two before three.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">chainUnaryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> grpc<span class="token punctuation">.</span>UnaryClientInterceptor <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> method <span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            cc <span class="token operator">*</span>grpc<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> invoker grpc<span class="token punctuation">.</span>UnaryInvoker<span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">invoker</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> method<span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> method <span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        cc <span class="token operator">*</span>grpc<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> invoker grpc<span class="token punctuation">.</span>UnaryInvoker<span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> <span class="token punctuation">(</span>
            i            <span class="token builtin">int</span>
            chainHandler grpc<span class="token punctuation">.</span>UnaryInvoker
        <span class="token punctuation">)</span>
        chainHandler <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ictx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> imethod <span class="token builtin">string</span><span class="token punctuation">,</span> ireq<span class="token punctuation">,</span> ireply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ic <span class="token operator">*</span>grpc<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> iopts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">invoker</span><span class="token punctuation">(</span>ictx<span class="token punctuation">,</span> imethod<span class="token punctuation">,</span> ireq<span class="token punctuation">,</span> ireply<span class="token punctuation">,</span> ic<span class="token punctuation">,</span> iopts<span class="token operator">...</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">++</span>
            <span class="token keyword">return</span> c<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>ictx<span class="token punctuation">,</span> imethod<span class="token punctuation">,</span> ireq<span class="token punctuation">,</span> ireply<span class="token punctuation">,</span> ic<span class="token punctuation">,</span> chainHandler<span class="token punctuation">,</span> iopts<span class="token operator">...</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> c<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> method<span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> chainHandler<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此完整的客户端拦截器逻辑就串联完成。</p><h3 id="实现自己的拦截器" tabindex="-1"><a class="header-anchor" href="#实现自己的拦截器" aria-hidden="true">#</a> 实现自己的拦截器</h3><p>以服务端拦截器<code>logging</code>为例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// serverLogging warden grpc logging</span>
<span class="token keyword">func</span> <span class="token function">serverLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> grpc<span class="token punctuation">.</span>UnaryServerInterceptor <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> info <span class="token operator">*</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">,</span> handler grpc<span class="token punctuation">.</span>UnaryHandler<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// NOTE: handler执行之前的拦截代码：主要获取一些关键参数，如耗时计时、ip等</span>
        <span class="token comment">// 如果自定义的拦截器只需要在handler执行后，那么可以直接执行handler</span>

        startTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        caller <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> metadata<span class="token punctuation">.</span>Caller<span class="token punctuation">)</span>
        <span class="token keyword">if</span> caller <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
            caller <span class="token operator">=</span> <span class="token string">&quot;no_user&quot;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> remoteIP <span class="token builtin">string</span>
        <span class="token keyword">if</span> peerInfo<span class="token punctuation">,</span> ok <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">FromContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            remoteIP <span class="token operator">=</span> peerInfo<span class="token punctuation">.</span>Addr<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> quota <span class="token builtin">float64</span>
        <span class="token keyword">if</span> deadline<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            quota <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>deadline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// call server handler</span>
        resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token comment">// NOTE: 以具体执行的handler为分界线！！！</span>

        <span class="token comment">// NOTE: handler执行之后的拦截代码：主要进行耗时计算、日志记录</span>
        <span class="token comment">// 如果自定义的拦截器在handler执行后不需要逻辑，这可直接返回</span>

        <span class="token comment">// after server response</span>
        code <span class="token operator">:=</span> ecode<span class="token punctuation">.</span><span class="token function">Cause</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        duration <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span>

        <span class="token comment">// monitor</span>
        statsServer<span class="token punctuation">.</span><span class="token function">Timing</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>duration<span class="token operator">/</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>FullMethod<span class="token punctuation">)</span>
        statsServer<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> info<span class="token punctuation">.</span>FullMethod<span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>
        logFields <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">KVString</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> caller<span class="token punctuation">)</span><span class="token punctuation">,</span>
            log<span class="token punctuation">.</span><span class="token function">KVString</span><span class="token punctuation">(</span><span class="token string">&quot;ip&quot;</span><span class="token punctuation">,</span> remoteIP<span class="token punctuation">)</span><span class="token punctuation">,</span>
            log<span class="token punctuation">.</span><span class="token function">KVString</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>FullMethod<span class="token punctuation">)</span><span class="token punctuation">,</span>
            log<span class="token punctuation">.</span><span class="token function">KVInt</span><span class="token punctuation">(</span><span class="token string">&quot;ret&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// TODO: it will panic if someone remove String method from protobuf message struct that auto generate from protoc.</span>
            log<span class="token punctuation">.</span><span class="token function">KVString</span><span class="token punctuation">(</span><span class="token string">&quot;args&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span>Stringer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            log<span class="token punctuation">.</span><span class="token function">KVFloat64</span><span class="token punctuation">(</span><span class="token string">&quot;ts&quot;</span><span class="token punctuation">,</span> duration<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            log<span class="token punctuation">.</span><span class="token function">KVFloat64</span><span class="token punctuation">(</span><span class="token string">&quot;timeout_quota&quot;</span><span class="token punctuation">,</span> quota<span class="token punctuation">)</span><span class="token punctuation">,</span>
            log<span class="token punctuation">.</span><span class="token function">KVString</span><span class="token punctuation">(</span><span class="token string">&quot;source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;grpc-access-log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            logFields <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>logFields<span class="token punctuation">,</span> log<span class="token punctuation">.</span><span class="token function">KV</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span><span class="token function">KV</span><span class="token punctuation">(</span><span class="token string">&quot;stack&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">logFn</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> logFields<span class="token operator">...</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> resp<span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置拦截器" tabindex="-1"><a class="header-anchor" href="#内置拦截器" aria-hidden="true">#</a> 内置拦截器</h2><h3 id="自适应限流拦截器" tabindex="-1"><a class="header-anchor" href="#自适应限流拦截器" aria-hidden="true">#</a> 自适应限流拦截器</h3><p>更多关于自适应限流的信息，请参考：kratos 自适应限流</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> grpc

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    pb <span class="token string">&quot;kratos-demo/api&quot;</span>
    <span class="token string">&quot;kratos-demo/internal/service&quot;</span>
    <span class="token string">&quot;github.com/bilibili/kratos/pkg/conf/paladin&quot;</span>
    <span class="token string">&quot;github.com/bilibili/kratos/pkg/net/rpc/warden&quot;</span>
    <span class="token string">&quot;github.com/bilibili/kratos/pkg/net/rpc/warden/ratelimiter&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// New new a grpc server.</span>
<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>svc <span class="token operator">*</span>service<span class="token punctuation">.</span>Service<span class="token punctuation">)</span> <span class="token operator">*</span>warden<span class="token punctuation">.</span>Server <span class="token punctuation">{</span>
    <span class="token keyword">var</span> rc <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        Server <span class="token operator">*</span>warden<span class="token punctuation">.</span>ServerConfig
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> paladin<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;grpc.toml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnmarshalTOML</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rc<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> paladin<span class="token punctuation">.</span>ErrNotExist <span class="token punctuation">{</span>
            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    ws <span class="token operator">:=</span> warden<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>Server<span class="token punctuation">)</span>

    <span class="token comment">// 挂载自适应限流拦截器到 warden server，使用默认配置</span>
    limiter <span class="token operator">:=</span> ratelimiter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
    ws<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 注意替换这里：</span>
    <span class="token comment">// RegisterDemoServer方法是在&quot;api&quot;目录下代码生成的</span>
    <span class="token comment">// 对应proto文件内自定义的service名字，请使用正确方法名替换</span>
    pb<span class="token punctuation">.</span><span class="token function">RegisterDemoServer</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> svc<span class="token punctuation">)</span>

    ws<span class="token punctuation">,</span> err <span class="token operator">:=</span> ws<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ws
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>`,10),Q={href:"https://go-kratos.dev/docs/",target:"_blank",rel:"noopener noreferrer"};function Y(Z,$){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("让我们先看一下"),r,n("的声明，"),s("a",k,[n("官方代码位置"),t(a)]),n("：")]),d,s("p",null,[n("为了更形象的说明拦截器的执行过程，请看基于"),v,n("生成的以下代码"),s("a",m,[n("代码位置"),t(a)]),n("：")]),b,s("p",null,[n("这样就完成了"),g,n("的执行过程。那么"),h,n("内的"),f,n("是如何注入到"),y,n("内，则看下面这段代码"),s("a",w,[n("官方代码位置"),t(a)]),n("：")]),_,s("p",null,[x,n("本身只支持一个"),S,n("，想要多"),q,n("需要自己实现~~所以"),C,n("基于"),I,n("实现了"),U,n("，请看下面代码"),s("a",H,[n("代码位置"),t(a)]),n("：")]),R,s("p",null,[n("让我们先看一下"),P,n("的声明，"),s("a",O,[n("官方代码位置"),t(a)]),n("：")]),D,s("p",null,[n("具体执行过程，请看基于"),F,n("生成的下面代码"),s("a",E,[n("代码位置"),t(a)]),n("：")]),N,s("p",null,[n("当客户端调用"),T,n("时可以看到执行了"),V,n("方法，并且将"),M,n("和其他参数传入，最终会执行下面代码"),s("a",K,[n("官方代码位置"),t(a)]),n("：")]),L,s("p",null,[n("其中的"),z,n("即为客户端连接创建时注册的拦截器，使用下面代码注册"),s("a",A,[n("官方代码位置"),t(a)]),n("：")]),B,s("p",null,[n("需要注意的是客户端的拦截器在官方"),W,n("内也只能支持注册一个，与服务端拦截器"),G,n("逻辑类似"),X,n("在客户端拦截器也做了相同处理，并且在客户端连接时进行注册，请看下面代码"),s("a",j,[n("代码位置"),t(a)]),n("：")]),J,s("p",null,[s("a",Q,[n("https://go-kratos.dev/docs/"),t(a)])])])}const an=p(l,[["render",Y],["__file","拦截器.html.vue"]]);export{an as default};

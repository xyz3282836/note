import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as s}from"./app-08e26ff4.js";const i={},t=s(`<h1 id="strings" tabindex="-1"><a class="header-anchor" href="#strings" aria-hidden="true">#</a> strings</h1><p>提供一些字符串编辑操作，工具方法</p><h2 id="reader" tabindex="-1"><a class="header-anchor" href="#reader" aria-hidden="true">#</a> Reader</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Reader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  s        <span class="token builtin">string</span>    <span class="token comment">// Reader 读取的数据来源</span>
  i        <span class="token builtin">int</span> <span class="token comment">// current reading index（当前读的索引位置）</span>
  prevRune <span class="token builtin">int</span> <span class="token comment">// index of previous rune; or &lt; 0（前一个读取的 rune 索引位置）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现了 io.Reader（Read 方法），io.ReaderAt（ReadAt 方法），io.Seeker（Seek 方法），io.WriterTo（WriteTo 方法），io.ByteReader（ReadByte 方法），io.ByteScanner（ReadByte 和 UnreadByte 方法），io.RuneReader（ReadRune 方法） 和 io.RuneScanner（ReadRune 和 UnreadRune 方法）。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewReader</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Reader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>bytes.NewBufferString 有类似的功能，不过，如果只是为了读取，NewReader 会更高效。</p><h2 id="builder" tabindex="-1"><a class="header-anchor" href="#builder" aria-hidden="true">#</a> Builder</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Builder <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    addr <span class="token operator">*</span>Builder <span class="token comment">// of receiver, to detect copies by value</span>
    buf  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现了 io 包下的 Writer, ByteWriter, StringWriter 等接口，可以向该对象内写入数据，Builder 没有实现 Reader 等接口，所以该类型不可读，但提供了 String 方法可以获取对象内的数据。</p>`,10),r=[t];function d(o,c){return n(),a("div",null,r)}const u=e(i,[["render",d],["__file","strings.html.vue"]]);export{u as default};

const e=JSON.parse('{"key":"v-5c7f1620","path":"/go/gc%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"gc 性能优化","lang":"zh-CN","frontmatter":{"description":"gc 性能优化 Go gc 触发时机为 heap 大小增长为上次 gc 的两倍时。但在 GO GC 实际实践中会按照 Pacer 调频算法根据堆增长速度等因素，使堆大小在达到两倍大小前提前发起 GC。通过调整 GC 的步调，以调整 GC 的触发频率。 两种方式 设置 gc 设置 debug.SetGCPercent() 设置 GOGC 的弊端 GOGC 设置比率的方式不精确； GOGC 设置过小，容易频繁触发 GC； 对某些程序本身占用内存就低，容易触发 GC； GOGC 设置很大，有的时候又容易触发 OOM；","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/go/gc%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"gc 性能优化"}],["meta",{"property":"og:description","content":"gc 性能优化 Go gc 触发时机为 heap 大小增长为上次 gc 的两倍时。但在 GO GC 实际实践中会按照 Pacer 调频算法根据堆增长速度等因素，使堆大小在达到两倍大小前提前发起 GC。通过调整 GC 的步调，以调整 GC 的触发频率。 两种方式 设置 gc 设置 debug.SetGCPercent() 设置 GOGC 的弊端 GOGC 设置比率的方式不精确； GOGC 设置过小，容易频繁触发 GC； 对某些程序本身占用内存就低，容易触发 GC； GOGC 设置很大，有的时候又容易触发 OOM；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T18:28:15.000Z"}],["meta",{"property":"article:author","content":"rz"}],["meta",{"property":"article:modified_time","content":"2023-03-11T18:28:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gc 性能优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T18:28:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"rz\\",\\"url\\":\\"https://github.com/xyz3282836/monodoc\\"}]}"]]},"headers":[{"level":2,"title":"go ballast","slug":"go-ballast","link":"#go-ballast","children":[]},{"level":2,"title":"go tuner","slug":"go-tuner","link":"#go-tuner","children":[]},{"level":2,"title":"SetMemoryLimit","slug":"setmemorylimit","link":"#setmemorylimit","children":[]},{"level":2,"title":"references","slug":"references","link":"#references","children":[]}],"git":{"createdTime":1678559079000,"updatedTime":1678559295000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":2}]},"readingTime":{"minutes":1.48,"words":445},"filePathRelative":"go/gc 性能优化.md","localizedDate":"2023年3月12日","excerpt":"<h1> gc 性能优化</h1>\\n<p>Go gc 触发时机为 heap 大小增长为上次 gc 的两倍时。但在 GO GC 实际实践中会按照 Pacer 调频算法根据堆增长速度等因素，使堆大小在达到两倍大小前提前发起 GC。通过调整 GC 的步调，以调整 GC 的触发频率。</p>\\n<p>两种方式</p>\\n<ol>\\n<li>设置 gc</li>\\n<li>设置 debug.SetGCPercent()</li>\\n</ol>\\n<p>设置 GOGC 的弊端</p>\\n<ul>\\n<li>GOGC 设置比率的方式不精确；</li>\\n<li>GOGC 设置过小，容易频繁触发 GC；</li>\\n<li>对某些程序本身占用内存就低，容易触发 GC；</li>\\n<li>GOGC 设置很大，有的时候又容易触发 OOM；</li>\\n</ul>","autoDesc":true}');export{e as data};

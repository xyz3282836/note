const n=JSON.parse('{"key":"v-389e8c01","path":"/source-code/bilibili-kratos/library/cache/memcache/conn.html","title":"conn","lang":"zh-CN","frontmatter":{"description":"conn type conn struct { \\t// low level connection. \\tpconn protocolConn // 需要 \\ted *encodeDecode } // Dial connects to the Memcache server at the given network and // address using the specified options. func Dial(network, address string, options ...DialOption) (Conn, error) { \\tdo := dialOptions{ \\t\\tdial: net.Dial, \\t} \\tfor _, option := range options { \\t\\toption.f(&amp;do) \\t} \\tnetConn, err := do.dial(network, address) \\tif err != nil { \\t\\treturn nil, pkgerr.WithStack(err) \\t} // 调用ascii_conn.go 中的newASCIIConn返回protocolConn 接口的实现 \\tpconn, err := newASCIIConn(netConn, do.readTimeout, do.writeTimeout) \\treturn &amp;conn{pconn: pconn, ed: newEncodeDecoder()}, nil } // low level connection that implement memcache protocol provide basic operation. type protocolConn interface { \\tPopulate(ctx context.Context, cmd string, key string, flags uint32, expiration int32, cas uint64, data []byte) error \\tGet(ctx context.Context, key string) (*Item, error) \\tGetMulti(ctx context.Context, keys ...string) (map[string]*Item, error) \\tTouch(ctx context.Context, key string, expire int32) error \\tIncrDecr(ctx context.Context, cmd, key string, delta uint64) (uint64, error) \\tDelete(ctx context.Context, key string) error \\tClose() error \\tErr() error }","head":[["meta",{"property":"og:url","content":"https://www.ruizhou.cf/source-code/bilibili-kratos/library/cache/memcache/conn.html"}],["meta",{"property":"og:site_name","content":"rz文档"}],["meta",{"property":"og:title","content":"conn"}],["meta",{"property":"og:description","content":"conn type conn struct { \\t// low level connection. \\tpconn protocolConn // 需要 \\ted *encodeDecode } // Dial connects to the Memcache server at the given network and // address using the specified options. func Dial(network, address string, options ...DialOption) (Conn, error) { \\tdo := dialOptions{ \\t\\tdial: net.Dial, \\t} \\tfor _, option := range options { \\t\\toption.f(&amp;do) \\t} \\tnetConn, err := do.dial(network, address) \\tif err != nil { \\t\\treturn nil, pkgerr.WithStack(err) \\t} // 调用ascii_conn.go 中的newASCIIConn返回protocolConn 接口的实现 \\tpconn, err := newASCIIConn(netConn, do.readTimeout, do.writeTimeout) \\treturn &amp;conn{pconn: pconn, ed: newEncodeDecoder()}, nil } // low level connection that implement memcache protocol provide basic operation. type protocolConn interface { \\tPopulate(ctx context.Context, cmd string, key string, flags uint32, expiration int32, cas uint64, data []byte) error \\tGet(ctx context.Context, key string) (*Item, error) \\tGetMulti(ctx context.Context, keys ...string) (map[string]*Item, error) \\tTouch(ctx context.Context, key string, expire int32) error \\tIncrDecr(ctx context.Context, cmd, key string, delta uint64) (uint64, error) \\tDelete(ctx context.Context, key string) error \\tClose() error \\tErr() error }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-11T14:36:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-11T14:36:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"conn\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-11T14:36:50.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678545410000,"updatedTime":1678545410000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":0.54,"words":163},"filePathRelative":"source-code/bilibili-kratos/library/cache/memcache/conn.md","localizedDate":"2023年3月11日","excerpt":"<h1> conn</h1>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> conn <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// low level connection.</span>\\n\\tpconn protocolConn <span class=\\"token comment\\">// 需要</span>\\n\\ted    <span class=\\"token operator\\">*</span>encodeDecode\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// Dial connects to the Memcache server at the given network and</span>\\n<span class=\\"token comment\\">// address using the specified options.</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">Dial</span><span class=\\"token punctuation\\">(</span>network<span class=\\"token punctuation\\">,</span> address <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> options <span class=\\"token operator\\">...</span>DialOption<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span>Conn<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">error</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tdo <span class=\\"token operator\\">:=</span> dialOptions<span class=\\"token punctuation\\">{</span>\\n\\t\\tdial<span class=\\"token punctuation\\">:</span> net<span class=\\"token punctuation\\">.</span>Dial<span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> option <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> options <span class=\\"token punctuation\\">{</span>\\n\\t\\toption<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>do<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tnetConn<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> do<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dial</span><span class=\\"token punctuation\\">(</span>network<span class=\\"token punctuation\\">,</span> address<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">nil</span><span class=\\"token punctuation\\">,</span> pkgerr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WithStack</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 调用ascii_conn.go 中的newASCIIConn返回protocolConn 接口的实现</span>\\n\\tpconn<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">newASCIIConn</span><span class=\\"token punctuation\\">(</span>netConn<span class=\\"token punctuation\\">,</span> do<span class=\\"token punctuation\\">.</span>readTimeout<span class=\\"token punctuation\\">,</span> do<span class=\\"token punctuation\\">.</span>writeTimeout<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&amp;</span>conn<span class=\\"token punctuation\\">{</span>pconn<span class=\\"token punctuation\\">:</span> pconn<span class=\\"token punctuation\\">,</span> ed<span class=\\"token punctuation\\">:</span> <span class=\\"token function\\">newEncodeDecoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">nil</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// low level connection that implement memcache protocol provide basic operation.</span>\\n<span class=\\"token keyword\\">type</span> protocolConn <span class=\\"token keyword\\">interface</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">Populate</span><span class=\\"token punctuation\\">(</span>ctx context<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">,</span> cmd <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> key <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> flags <span class=\\"token builtin\\">uint32</span><span class=\\"token punctuation\\">,</span> expiration <span class=\\"token builtin\\">int32</span><span class=\\"token punctuation\\">,</span> cas <span class=\\"token builtin\\">uint64</span><span class=\\"token punctuation\\">,</span> data <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">byte</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span>\\n\\t<span class=\\"token function\\">Get</span><span class=\\"token punctuation\\">(</span>ctx context<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">,</span> key <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>Item<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">error</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token function\\">GetMulti</span><span class=\\"token punctuation\\">(</span>ctx context<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">,</span> keys <span class=\\"token operator\\">...</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>Item<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">error</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token function\\">Touch</span><span class=\\"token punctuation\\">(</span>ctx context<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">,</span> key <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> expire <span class=\\"token builtin\\">int32</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span>\\n\\t<span class=\\"token function\\">IncrDecr</span><span class=\\"token punctuation\\">(</span>ctx context<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">,</span> cmd<span class=\\"token punctuation\\">,</span> key <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> delta <span class=\\"token builtin\\">uint64</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">uint64</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">error</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token function\\">Delete</span><span class=\\"token punctuation\\">(</span>ctx context<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">,</span> key <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span>\\n\\t<span class=\\"token function\\">Close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span>\\n\\t<span class=\\"token function\\">Err</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

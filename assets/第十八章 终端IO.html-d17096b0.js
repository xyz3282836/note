import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-6f5bc1f7.js";const t={},c=e(`<h1 id="第十八章-终端-io" tabindex="-1"><a class="header-anchor" href="#第十八章-终端-io" aria-hidden="true">#</a> 第十八章 终端 IO</h1><p>终端 I/O 处理分立为两种不同的风格：一种是系统 Ⅲ 的风格，由 System V 沿续下来，另一种是 V7 的风格，它成为 BSD 派生的系统终端 I/O 处理的标准</p><p>终端 I/O 有两种不同的工作模式：规范模式输入处理；非规范模式输入处理</p><p>比如通常的 shell 就是规范模式，而 vim 编辑器就是非规范模式</p><h2 id="特殊输入字符" tabindex="-1"><a class="header-anchor" href="#特殊输入字符" aria-hidden="true">#</a> 特殊输入字符</h2><p>posix.1</p><h2 id="获得和设置终端属性" tabindex="-1"><a class="header-anchor" href="#获得和设置终端属性" aria-hidden="true">#</a> 获得和设置终端属性</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token punctuation">{</span>
    <span class="token class-name">tcflag_t</span> c_iflag<span class="token punctuation">;</span><span class="token comment">/* input flags */</span>
    <span class="token class-name">tcflag_t</span> c_oflag<span class="token punctuation">;</span><span class="token comment">/* output flags */</span>
    <span class="token class-name">tcflag_t</span> c_cflag<span class="token punctuation">;</span><span class="token comment">/* control flags */</span>
    <span class="token class-name">tcflag_t</span> c_lflag<span class="token punctuation">;</span><span class="token comment">/* local flags */</span>
    <span class="token class-name">cc_t</span>  c_cc<span class="token punctuation">[</span>NCCS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* control characters */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

所有选项都可以被检查和更改
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">tcgetattr</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token operator">*</span>termptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">tcsetattr</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> opt<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">termios</span> <span class="token operator">*</span>termptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stty-命令" tabindex="-1"><a class="header-anchor" href="#stty-命令" aria-hidden="true">#</a> stty 命令</h2><p>在命令行（或 shell 脚本）中用 stty(1)命令进行检查和更改</p><h2 id="波特率函数" tabindex="-1"><a class="header-anchor" href="#波特率函数" aria-hidden="true">#</a> 波特率函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h&gt;</span></span>
<span class="token class-name">speed_t</span> cfgetispeed
<span class="token class-name">speed_t</span> cfsetispeed
<span class="token class-name">speed_t</span> cfgetospeed
<span class="token class-name">speed_t</span> cfsetospeed

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="行为控制函数" tabindex="-1"><a class="header-anchor" href="#行为控制函数" aria-hidden="true">#</a> 行为控制函数</h2><p>4 个函数提供了终端设备的行控制能力</p><p>4 个函数都要求参数 fd 引用一个终端设备</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">tcdrain</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待所有输出都被传递</span>
<span class="token keyword">int</span> <span class="token function">tcflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用于对输入和输出流控制进行控制</span>
<span class="token keyword">int</span> <span class="token function">tcflush</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//冲洗（抛弃）输入缓冲区（其中的数据是终端驱动程序已接收到，但用户程序 尚未读取的）或</span>
<span class="token comment">//输出缓冲区（其中的数据是用户程序已经写入，但尚未被传递的）</span>
<span class="token keyword">int</span> <span class="token function">tcsendbreak</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在一个指定的时间区间内发送连续的 0 值位流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="终端标志" tabindex="-1"><a class="header-anchor" href="#终端标志" aria-hidden="true">#</a> 终端标志</h2><p>历史上，在大多数 UNIX 系统版本中，控制终端的名字一直是/dev/tty。</p><h2 id="规范模式" tabindex="-1"><a class="header-anchor" href="#规范模式" aria-hidden="true">#</a> 规范模式</h2>`,19),p=[c];function o(i,l){return s(),a("div",null,p)}const u=n(t,[["render",o],["__file","第十八章 终端IO.html.vue"]]);export{u as default};
